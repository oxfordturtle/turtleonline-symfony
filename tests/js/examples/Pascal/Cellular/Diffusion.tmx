{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Diffusion in a tapering tube",
  "author":"Peter Millican",
  "date":"31/08/2020",
  "time":"11:16:51",
  "code":"PROGRAM Diffusion;\nCONST width = 100;\n      leftaxis = 21;\n      rightaxis = 15;\n      topmargin = 20;\n      gap = 10;\n      concbottom = 80;\n      concwidth = 50;\n      colour1 = red;\n      colour2 = blue;\n      edgecol = black;\n      molcol = red;\n      conccol = seagreen;\nVAR xorval: integer;\n    bottom: integer;\n    boundary: integer;\n    x1, y1: integer;\n    x2, y2: integer;\n    temp: integer;\n    num1: array[0..width] of integer;\n\n  Procedure setup;\n  Begin\n    canvas(0, 0, width + leftaxis + rightaxis, width * 2 + topmargin + gap);\n    resolution(width + leftaxis + rightaxis, width * 2 + topmargin + gap);\n    bottom := width * 2 + topmargin + gap - 1;\n    boundary := divmult(width, 1000, 707);\n    xorval := colour1 xor colour2;\n    colour(colour2);\n    setxy(boundary + 1 + leftaxis, bottom - boundary);\n    drawxy(0, boundary);\n    thickness(1);\n    setxy(boundary + leftaxis, bottom - boundary - 10);\n    drawxy(0, 5);\n    setxy(boundary + leftaxis, topmargin);\n    drawxy(0, 5);\n    colour(colour1);\n    setxy(boundary + leftaxis - 1, bottom - boundary - 10);\n    drawxy(0, 5);\n    setxy(boundary + leftaxis - 1, topmargin);\n    drawxy(0, 5);\n    colour(edgecol);\n    setxy(leftaxis - 1, bottom);\n    drawxy(width + 1, -width - 1);\n    colour(edgecol);\n    drawxy(0, width + 1);\n    recolour(leftaxis + 2, bottom, colour1);\n    recolour(width + leftaxis - 4, bottom, colour2);\n    for x1 := 0 to boundary - 1 do\n      num1[x1] := x1 + 1;\n    for x1 := boundary to width - 1 do\n      num1[x1] := 0;\n    colour(black);\n    setxy(0, 0);\n    print('Diffusion in a Tapering Tube', 2, width / 10)\n  End;\n\n  Procedure drawaxes;\n  Var n: integer;\n  Begin\n    for n := -1 to concwidth do\n      pixset(leftaxis - 1, concbottom - n, black);\n    for n := 0 to width do\n      pixset(leftaxis + 100, topmargin + n, black);\n    for n := 0 to 100 do\n      begin\n        if (n < 31) or (n mod 5 = 0) then\n          pixset(leftaxis + n, concbottom + 1, black);\n        pixset(leftaxis + n, topmargin + 101, black)\n      end;\n    drawxy(0, -concwidth);\n    colour(conccol);\n    setxy(0, concbottom - concwidth - width / 15);\n    print('100%', 2, width / 15);\n    setxy(0, concbottom - width / 15);\n    print('  0%', 2, width / 15);\n    setxy(0, topmargin + width * 11 / 10);\n    print('Red concentration', 2, width / 12);\n    colour(molcol);\n    setxy(width + leftaxis + 2, topmargin + width - boundary + 1 - width / 15);\n    print(str(boundary - 1), 2, width / 15);\n    setxy(width + leftaxis + 2, topmargin + width - width / 15);\n    print('  0', 2, width / 15);\n    setxy(0, topmargin + width * 12 / 10);\n    print('Red molecule count', 2, width / 12);\n    colour(black);\n    setxy(0, topmargin + width * 13 / 10 + 5);\n    print('(at horizontal position', 2, width / 15);\n    setxy(0, topmargin + width * 14 / 10 + 5);\n    print('in tapering tube)', 2, width / 15)\n  End;\n\n  Procedure graphit(x: integer; show: boolean);\n  Begin\n    if show then\n      begin\n        pixset(x + leftaxis, topmargin + width - num1[x], molcol);\n        pixset(x + leftaxis, concbottom - divmult(num1[x], x + 1, concwidth), conccol)\n      end\n    else\n      begin\n        pixset(x + leftaxis, topmargin + width - num1[x], white);\n        pixset(x + leftaxis, concbottom - divmult(num1[x], x + 1, concwidth), white)\n      end\n  End;\n\n  Procedure showswap(x, origcol: integer);\n  Begin\n    graphit(x1, false);\n    graphit(x1 + 1, false);\n    if origcol = colour1 then\n      begin\n        dec(num1[x1]);\n        inc(num1[x1 + 1])\n      end\n    else\n      begin\n        inc(num1[x1]);\n        dec(num1[x1 + 1])\n      end;\n    graphit(x1, true);\n    graphit(x1 + 1, true)\n  End;\n\nBEGIN\n  setup;\n  drawaxes;\n  for x1 := 0 to width - 1 do\n    graphit(x1, true);\n  pause(2500);\n  repeat\n    x1 := random(width);\n    y1 := random(width);\n    if y1 <= x1 then\n      begin\n        y1 := bottom - y1;\n        x2 := x1;\n        y2 := y1;\n        if random(2) = 0 then\n          inc(x2)\n        else\n          dec(y2);\n        temp := pixcol(x1 + leftaxis, y1);\n        if (pixcol(x2 + leftaxis, y2) xor temp) = xorval then\n          begin\n            noupdate;\n            pixset(x1 + leftaxis, y1, pixcol(x2 + leftaxis, y2));\n            pixset(x2 + leftaxis, y2, temp);\n            if (x2 <> x1) then\n              showswap(x1, temp);\n            update\n          end\n      end\n  until 0 = 1\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"drawxy", "level":2, "count":8, "lines":"31 34 36 39 41 44 46 71"}
      ],
      "total":8
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":15, "lines":"30 33 35 38 40 43 54 73 75 77 80 82 84 87 89"}
      ],
      "total":15
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":8, "lines":"29 37 42 45 53 72 79 86"},
        {"name":"thickness", "level":1, "count":1, "lines":"32"}
      ],
      "total":9
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":1, "lines":"146"},
        {"name":"update", "level":1, "count":1, "lines":"151"},
        {"name":"canvas", "level":2, "count":1, "lines":"24"},
        {"name":"resolution", "level":2, "count":1, "lines":"25"},
        {"name":"pixcol", "level":3, "count":3, "lines":"143 144 147"},
        {"name":"pixset", "level":3, "count":10, "lines":"62 64 68 69 97 98 102 103 147 148"},
        {"name":"recolour", "level":3, "count":2, "lines":"47 48"}
      ],
      "total":19
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"dec", "level":1, "count":3, "lines":"113 119 142"},
        {"name":"inc", "level":1, "count":3, "lines":"114 118 140"},
        {"name":"random", "level":2, "count":3, "lines":"132 133 139"},
        {"name":"divmult", "level":3, "count":3, "lines":"27 98 103"}
      ],
      "total":12
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":9, "lines":"55 74 76 78 81 83 85 88 90"}
      ],
      "total":9
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":1, "lines":"81"}
      ],
      "total":1
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"pause", "level":1, "count":1, "lines":"130"}
      ],
      "total":1
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":7, "lines":"67 95 111 134 139 144 149"},
        {"name":"else", "level":1, "count":3, "lines":"100 116 141"},
        {"name":"for", "level":1, "count":6, "lines":"49 51 61 63 65 128"},
        {"name":"repeat", "level":2, "count":1, "lines":"131"},
        {"name":"procedure", "level":2, "count":4, "lines":"22 58 93 107"}
      ],
      "total":21
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"graphit", "level":0, "count":5, "lines":"109 110 121 122 129"},
        {"name":"setup", "level":0, "count":1, "lines":"126"},
        {"name":"drawaxes", "level":0, "count":1, "lines":"127"},
        {"name":"showswap", "level":0, "count":1, "lines":"150"}
      ],
      "total":8
    }
  ],
  "pcode":[
    [112,16,1,1,112,0,123,112,6,2,123,4,112,117,124,112,133,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,32,119,31],
    [112,101,119,32],
    [128,110],
    [133,1],
    [112,0,112,0,112,100,112,21,26,112,15,26,112,100,112,2,28,112,20,26,112,10,26,144],
    [112,100,112,21,26,112,15,26,112,100,112,2,28,112,20,26,112,10,26,145],
    [112,100,112,2,28,112,20,26,112,10,26,112,1,27,119,24],
    [112,100,112,1000,112,707,48,119,25],
    [112,16711680,112,255,19,119,23],
    [112,255,87],
    [113,25,112,1,26,112,21,26,113,24,113,25,27,88],
    [112,0,113,25,90],
    [112,1,85],
    [113,25,112,21,26,113,24,113,25,27,112,10,27,88],
    [112,0,112,5,90],
    [113,25,112,21,26,112,20,88],
    [112,0,112,5,90],
    [112,16711680,87],
    [113,25,112,21,26,112,1,27,113,24,113,25,27,112,10,27,88],
    [112,0,112,5,90],
    [113,25,112,21,26,112,1,27,112,20,88],
    [112,0,112,5,90],
    [112,0,87],
    [112,21,112,1,27,113,24,88],
    [112,100,112,1,26,112,100,23,112,1,27,90],
    [112,0,87],
    [112,0,112,100,112,1,26,90],
    [112,21,112,2,26,113,24,112,16711680,97],
    [112,100,112,21,26,112,4,27,113,24,112,255,97],
    [112,0],
    [119,26,113,25,112,1,27],
    [113,26,37,129,37],
    [113,31,113,26,2,127,26,4,113,26,112,1,26,2,123],
    [113,26,4,128,33],
    [113,25],
    [119,26,112,100,112,1,27],
    [113,26,37,129,42],
    [113,31,113,26,2,127,26,4,112,0,2,123],
    [113,26,4,128,38],
    [112,0,87],
    [112,0,112,0,88],
    [118,28,68,105,102,102,117,115,105,111,110,32,105,110,32,97,32,84,97,112,101,114,105,110,103,32,84,117,98,101,112,2,112,100,112,10,29,168,142],
    [134,132],
    [133,2],
    [139,13,1],
    [112,1,23],
    [120,13,1,112,50],
    [114,13,1,37,129,53],
    [112,21,112,1,27,112,80,114,13,1,27,112,0,100],
    [114,13,1,4,128,49],
    [112,0],
    [120,13,1,112,100],
    [114,13,1,37,129,58],
    [112,21,112,100,26,112,20,114,13,1,26,112,0,100],
    [114,13,1,4,128,54],
    [112,0],
    [120,13,1,112,100],
    [114,13,1,37,129,65],
    [114,13,1,112,31,34,114,13,1,112,5,31,112,0,32,18,129,63],
    [112,21,114,13,1,26,112,80,112,1,26,112,0,100],
    [112,21,114,13,1,26,112,20,112,101,26,112,0,100],
    [114,13,1,4,128,59],
    [112,0,112,50,23,90],
    [112,3978097,87],
    [112,0,112,80,112,50,27,112,100,112,15,29,27,88],
    [118,4,49,48,48,37,112,2,112,100,112,15,29,168,142],
    [112,0,112,80,112,100,112,15,29,27,88],
    [118,4,32,32,48,37,112,2,112,100,112,15,29,168,142],
    [112,0,112,20,112,100,112,11,28,112,10,29,26,88],
    [118,17,82,101,100,32,99,111,110,99,101,110,116,114,97,116,105,111,110,112,2,112,100,112,12,29,168,142],
    [112,16711680,87],
    [112,100,112,21,26,112,2,26,112,20,112,100,26,113,25,27,112,1,26,112,100,112,15,29,27,88],
    [113,25,112,1,27,11,112,2,112,100,112,15,29,168,142],
    [112,100,112,21,26,112,2,26,112,20,112,100,26,112,100,112,15,29,27,88],
    [118,3,32,32,48,112,2,112,100,112,15,29,168,142],
    [112,0,112,20,112,100,112,12,28,112,10,29,26,88],
    [118,18,82,101,100,32,109,111,108,101,99,117,108,101,32,99,111,117,110,116,112,2,112,100,112,12,29,168,142],
    [112,0,87],
    [112,0,112,20,112,100,112,13,28,112,10,29,26,112,5,26,88],
    [118,23,40,97,116,32,104,111,114,105,122,111,110,116,97,108,32,112,111,115,105,116,105,111,110,112,2,112,100,112,15,29,168,142],
    [112,0,112,20,112,100,112,14,28,112,10,29,26,112,5,26,88],
    [118,17,105,110,32,116,97,112,101,114,105,110,103,32,116,117,98,101,41,112,2,112,100,112,15,29,168,142],
    [140,13,134,132],
    [133,3],
    [139,14,2],
    [120,14,2,120,14,1],
    [114,14,2,129,93],
    [114,14,1,112,21,26,112,20,112,100,26,113,31,114,14,1,2,127,26,4,122,27,112,16711680,100],
    [114,14,1,112,21,26,112,80,113,31,114,14,1,2,127,26,4,122,114,14,1,112,1,26,112,50,48,27,112,3978097,100],
    [128,95],
    [114,14,1,112,21,26,112,20,112,100,26,113,31,114,14,1,2,127,26,4,122,27,112,16777215,100],
    [114,14,1,112,21,26,112,80,113,31,114,14,1,2,127,26,4,122,114,14,1,112,1,26,112,50,48,27,112,16777215,100],
    [140,14,134,132],
    [133,4],
    [139,15,2],
    [120,15,2,120,15,1],
    [113,26,112,0,131,86],
    [113,26,112,1,26,112,0,131,86],
    [114,15,2,112,16711680,32,129,105],
    [113,31,113,26,2,127,26,4,1,122,5,2,123],
    [113,31,113,26,112,1,26,2,127,26,4,1,122,4,2,123],
    [128,107],
    [113,31,113,26,2,127,26,4,1,122,4,2,123],
    [113,31,113,26,112,1,26,2,127,26,4,1,122,5,2,123],
    [113,26,112,-1,131,86],
    [113,26,112,1,26,112,-1,131,86],
    [140,15,134,132],
    [131,6],
    [131,46],
    [112,0],
    [119,26,112,100,112,1,27],
    [113,26,37,129,117],
    [113,26,112,-1,131,86],
    [113,26,4,128,113],
    [112,2500,174],
    [112,100,7,119,26],
    [112,100,7,119,27],
    [113,27,113,26,36,129,136],
    [113,24,113,27,27,119,27],
    [113,26,119,28],
    [113,27,119,29],
    [112,2,7,112,0,32,129,127],
    [116,28,1,122,4,2,123],
    [128,128],
    [116,29,1,122,5,2,123],
    [113,26,112,21,26,113,27,99,119,30],
    [113,28,112,21,26,113,29,99,113,30,19,113,23,32,129,136],
    [112,0,146],
    [113,26,112,21,26,113,27,113,28,112,21,26,113,29,99,100],
    [113,28,112,21,26,113,29,113,30,100],
    [113,28,113,26,33,129,135],
    [113,26,113,30,131,96],
    [112,-1,146],
    [112,0,112,1,32,129,118],
    [130]
  ]
}
