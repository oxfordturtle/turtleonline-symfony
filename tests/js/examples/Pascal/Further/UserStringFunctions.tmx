{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"User-defined string functions",
  "author":"Peter Millican",
  "date":"31/08/2020",
  "time":"11:16:41",
  "code":"PROGRAM UserStringFunctions;\n\n  {generates the reverse of a string}\n  Function reverse(s: string): string;\n  Var posn: integer;\n  Begin\n    result := '';\n    for posn := 1 to length(s) do\n      result := s[posn] + result\n  End;\n\n  {generates the reverse of a string recursively}\n  Function reverseRecursive(s: string): string;\n  Begin\n    if s = '' then\n      result := s\n    else\n      result := reverseRecursive(delete(s, 1, 1)) + s[1]\n  End;\n\n  {tests whether a character is uppercase (1), lowercase (0), or neither (-1)}\n  Function testCase(c: char): integer;\n  Begin\n    if (c >= 'A') and (c <= 'Z') then\n      result := 1\n    else\n    if (c >= 'a') and (c <= 'z') then\n      result := 0\n    else\n      result := -1\n  End;\n\n  {capitalises first letter of each word, leaving other letters unchanged and}\n  {treating any non-letter as a word separator; the native TITLECASE function}\n  {treats only spaces as word separators, making subsequent letters lowercase}\n  Function initCaps(s: string): string;\n  Var posn: integer;\n      newword: boolean;\n  Begin\n    newword := true;\n    for posn := 1 to length(s) do\n      begin\n        if newword and (testCase(s[posn]) = 0) then\n          s[posn] := chr(ord(s[posn]) - 32);\n        newword := (testCase(s[posn]) = -1)\n      end;\n    result := s\n  End;\n\n  {generates the Caesar cipher of a string}\n  Function caesar(s: string; n: integer): string;\n  Var posn: integer;\n  Begin\n    for posn := 1 to length(s) do\n      begin\n        if testCase(s[posn]) = 1 then\n          begin\n            s[posn] := chr(ord(s[posn]) + n);\n            if s[posn] > 'Z' then\n              s[posn] := chr(ord(s[posn]) - 26)\n          end\n        else\n        if testCase(s[posn]) = 0 then\n          begin\n            s[posn] := chr(ord(s[posn]) + n);\n            if s[posn] > 'z' then\n              s[posn] := chr(ord(s[posn]) - 26)\n          end\n      end;\n    result := s\n  End;\n\n  {shows the results of applying the above functions to a string}\n  Procedure process(s: string);\n  Begin\n    writeln('');\n    writeln('ORIGINAL STRING:               \"' + s + '\"');\n    writeln('REVERSED (by iteration):       \"' + reverse(s) + '\"');\n    writeln('REVERSED (by recursion):       \"' + reverseRecursive(s) + '\"');\n    writeln('INITIAL CAPITAL ALL WORDS:     \"' + initCaps(s) + '\"');\n    writeln('TITLE CASE:                    \"' + titlecase(s) + '\"');\n    writeln('REVERSED THEN INITIAL CAPITAL: \"' + initCaps(reverse(s)) + '\"');\n    writeln('REVERSED THEN TITLE CASE:      \"' + titlecase(reverse(s)) + '\"');\n    writeln('CAESAR CIPHER (1 letter):      \"' + caesar(s, 1) + '\"');\n    writeln('CAESAR DECRYPT (1+25 = 26):    \"' + caesar(caesar(s, 1), 25) + '\"');\n    writeln('CAESAR CIPHER (4 letters):     \"' + caesar(s, 4) + '\"');\n    writeln('CAESAR DECRYPT (4+22 = 26):    \"' + caesar(caesar(s, 4), 22) + '\"')\n  End;\n\nBEGIN\n  {show the output}\n  output(true, cream, true);\n  writeln('Some User-Defined String Functions');\n  {process some example strings}\n  process('CREATING is better than LEARNING;');\n  process('indeed it''s the Essence of Life!')\nEND.",
  "usage":[
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"output", "level":2, "count":1, "lines":"92"}
      ],
      "total":1
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"writeln", "level":1, "count":13, "lines":"76 77 78 79 80 81 82 83 84 85 86 87 93"},
        {"name":"length", "level":2, "count":3, "lines":"8 41 54"},
        {"name":"titlecase", "level":2, "count":2, "lines":"81 83"},
        {"name":"delete", "level":3, "count":1, "lines":"18"}
      ],
      "total":19
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"chr", "level":3, "count":5, "lines":"44 58 60 65 67"},
        {"name":"ord", "level":3, "count":5, "lines":"44 58 60 65 67"}
      ],
      "total":10
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":8, "lines":"15 24 27 43 56 59 63 66"},
        {"name":"else", "level":1, "count":4, "lines":"17 26 29 62"},
        {"name":"for", "level":1, "count":3, "lines":"8 41 54"},
        {"name":"procedure", "level":2, "count":1, "lines":"74"},
        {"name":"function", "level":3, "count":5, "lines":"4 13 22 36 51"}
      ],
      "total":21
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"reverserecursive", "level":0, "count":2, "lines":"18 79"},
        {"name":"testcase", "level":0, "count":4, "lines":"43 45 56 63"},
        {"name":"reverse", "level":0, "count":3, "lines":"78 82 83"},
        {"name":"initcaps", "level":0, "count":2, "lines":"80 82"},
        {"name":"caesar", "level":0, "count":6, "lines":"84 85 85 86 87 87"},
        {"name":"process", "level":0, "count":2, "lines":"95 96"}
      ],
      "total":19
    }
  ],
  "pcode":[
    [112,19,1,1,112,0,123,112,6,2,123,4,112,6,124,112,25,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [128,97],
    [133,1],
    [139,12,71],
    [117,12,3,120,12,1,112,33,120,12,2,117,12,37,1,1,4,120,12,36,112,33,2,123,4,126],
    [114,12,1,118,0,2,126,142],
    [112,1],
    [120,12,71,114,12,36,65],
    [114,12,71,37,129,13],
    [114,12,1,114,12,36,114,12,71,112,1,27,2,127,26,4,122,9,114,12,1,64,2,126,142],
    [114,12,71,4,128,9],
    [113,12,119,18,140,12,134,132],
    [133,2],
    [139,13,70],
    [117,13,3,120,13,1,112,33,120,13,2,117,13,37,1,1,4,120,13,36,112,33,2,123,4,126],
    [114,13,36,118,0,40,142,129,20],
    [114,13,1,114,13,36,2,126],
    [128,22],
    [114,13,1,114,13,36,112,1,112,1,68,131,14],
    [114,18,1,8,114,13,36,112,1,112,1,27,2,127,26,4,122,9,64,2,126,142],
    [113,13,119,18,140,13,134,132],
    [133,3],
    [139,14,2],
    [120,14,2],
    [114,14,2,112,65,37,114,14,2,112,90,36,17,129,29],
    [112,1,120,14,1],
    [128,33],
    [114,14,2,112,97,37,114,14,2,112,122,36,17,129,32],
    [112,0,120,14,1],
    [128,33],
    [112,1,23,120,14,1],
    [113,14,119,18,140,14,134,132],
    [133,4],
    [139,15,72],
    [117,15,3,120,15,1,112,33,120,15,2,117,15,37,1,1,4,120,15,36,112,33,2,123,4,126],
    [112,-1,120,15,72],
    [112,1],
    [120,15,71,114,15,36,65],
    [114,15,71,37,129,47],
    [114,15,72,114,15,36,114,15,71,112,1,27,2,127,26,4,122,131,23],
    [114,18,1,112,0,32,17,129,44],
    [114,15,36,114,15,71,112,1,27,2,127,26,4,114,15,36,114,15,71,112,1,27,2,127,26,4,122,112,32,27,2,123],
    [114,15,36,114,15,71,112,1,27,2,127,26,4,122,131,23],
    [114,18,1,112,1,23,32,120,15,72],
    [114,15,71,4,128,39],
    [114,15,1,114,15,36,2,126],
    [113,15,119,18,140,15,134,132],
    [133,5],
    [139,16,72],
    [117,16,3,120,16,1,112,33,120,16,2,120,16,71,117,16,37,1,1,4,120,16,36,112,33,2,123,4,126],
    [112,1],
    [120,16,72,114,16,36,65],
    [114,16,72,37,129,67],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,122,131,23],
    [114,18,1,112,1,32,129,61],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,114,16,36,114,16,72,112,1,27,2,127,26,4,122,114,16,71,26,2,123],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,122,112,90,35,129,60],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,114,16,36,114,16,72,112,1,27,2,127,26,4,122,112,26,27,2,123],
    [128,66],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,122,131,23],
    [114,18,1,112,0,32,129,66],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,114,16,36,114,16,72,112,1,27,2,127,26,4,122,114,16,71,26,2,123],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,122,112,122,35,129,66],
    [114,16,36,114,16,72,112,1,27,2,127,26,4,114,16,36,114,16,72,112,1,27,2,127,26,4,122,112,26,27,2,123],
    [114,16,72,4,128,53],
    [114,16,1,114,16,36,2,126],
    [113,16,119,18,140,16,134,132],
    [133,6],
    [139,17,35],
    [117,17,2,1,1,4,120,17,1,112,33,2,123,4,126],
    [118,0,169,170,142],
    [118,32,79,82,73,71,73,78,65,76,32,83,84,82,73,78,71,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,114,17,1,64,112,34,9,64,169,170,142],
    [118,32,82,69,86,69,82,83,69,68,32,40,98,121,32,105,116,101,114,97,116,105,111,110,41,58,32,32,32,32,32,32,32,34,114,17,1,131,4],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,82,69,86,69,82,83,69,68,32,40,98,121,32,114,101,99,117,114,115,105,111,110,41,58,32,32,32,32,32,32,32,34,114,17,1,131,14],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,73,78,73,84,73,65,76,32,67,65,80,73,84,65,76,32,65,76,76,32,87,79,82,68,83,58,32,32,32,32,32,34,114,17,1,131,34],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,84,73,84,76,69,32,67,65,83,69,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,114,17,1,112,4,66,64,112,34,9,64,169,170,142],
    [118,32,82,69,86,69,82,83,69,68,32,84,72,69,78,32,73,78,73,84,73,65,76,32,67,65,80,73,84,65,76,58,32,34,114,17,1,131,4],
    [114,18,1,8,131,34],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,82,69,86,69,82,83,69,68,32,84,72,69,78,32,84,73,84,76,69,32,67,65,83,69,58,32,32,32,32,32,32,34,114,17,1,131,4],
    [114,18,1,8,112,4,66,64,112,34,9,64,169,170,142],
    [118,32,67,65,69,83,65,82,32,67,73,80,72,69,82,32,40,49,32,108,101,116,116,101,114,41,58,32,32,32,32,32,32,34,114,17,1,112,1,131,49],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,67,65,69,83,65,82,32,68,69,67,82,89,80,84,32,40,49,43,50,53,32,61,32,50,54,41,58,32,32,32,32,34,114,17,1,112,1,131,49],
    [114,18,1,8,112,25,131,49],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,67,65,69,83,65,82,32,67,73,80,72,69,82,32,40,52,32,108,101,116,116,101,114,115,41,58,32,32,32,32,32,34,114,17,1,112,4,131,49],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [118,32,67,65,69,83,65,82,32,68,69,67,82,89,80,84,32,40,52,43,50,50,32,61,32,50,54,41,58,32,32,32,32,34,114,17,1,112,4,131,49],
    [114,18,1,8,112,22,131,49],
    [114,18,1,8,64,112,34,9,64,169,170,142],
    [140,17,134,132],
    [112,-1,112,16777147,112,-1,166],
    [118,34,83,111,109,101,32,85,115,101,114,45,68,101,102,105,110,101,100,32,83,116,114,105,110,103,32,70,117,110,99,116,105,111,110,115,169,170,142],
    [118,33,67,82,69,65,84,73,78,71,32,105,115,32,98,101,116,116,101,114,32,116,104,97,110,32,76,69,65,82,78,73,78,71,59,142,131,69],
    [118,32,105,110,100,101,101,100,32,105,116,39,115,32,116,104,101,32,69,115,115,101,110,99,101,32,111,102,32,76,105,102,101,33,142,131,69],
    [130]
  ]
}
