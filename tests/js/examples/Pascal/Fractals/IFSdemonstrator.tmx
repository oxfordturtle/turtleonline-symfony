{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"IFS demonstrator program",
  "author":"Peter Millican",
  "date":"31/08/2020",
  "time":"11:18:02",
  "code":"PROGRAM IFSdemonstrator;\nCONST maxmappings = 4;\n      pauseval = 2000;\nVAR xleft, xright, ytop, ybottom: integer;\n    scaledown, mappings: integer;\n    live, copied: integer;\n    uniform, seedpixel: boolean;\n    seedx, seedy: integer;\n    xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..maxmappings] of integer;\n    mapyx, mapyy, mapyc: array[1..maxmappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setsierpinski;\n  Begin\n    xleft := 0;\n    xright := 999;\n    ytop := 0;\n    ybottom := 999;\n    scaledown := 2;\n    mappings := 3;\n    live := black;\n    copied := darkgrey;\n    seedx := 250;\n    seedy := 0;\n    coeffdiv := 100;\n    mapxx[1] := 50;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 50;\n    mapxc[1] := 250;\n    mapyc[1] := 0;\n    mapxx[2] := 50;\n    mapyx[2] := 0;\n    mapxy[2] := 0;\n    mapyy[2] := 50;\n    mapxc[2] := 0;\n    mapyc[2] := 500;\n    mapxx[3] := 50;\n    mapyx[3] := 0;\n    mapxy[3] := 0;\n    mapyy[3] := 50;\n    mapxc[3] := 500;\n    mapyc[3] := 500\n  End;\n\n  Procedure setbarnsley;\n  Begin\n    xleft := -236;\n    xright := 263;\n    ytop := 1;\n    ybottom := 1000;\n    scaledown := 2;\n    mappings := 4;\n    live := seagreen;\n    copied := emerald;\n    seedx := 1;\n    seedy := 1;\n    coeffdiv := 100;\n    mapxx[1] := 0;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 16;\n    mapxc[1] := 0;\n    mapyc[1] := 0;\n    mapxx[2] := 85;\n    mapyx[2] := -4;\n    mapxy[2] := 4;\n    mapyy[2] := 85;\n    mapxc[2] := 0;\n    mapyc[2] := 160;\n    mapxx[3] := 20;\n    mapyx[3] := 23;\n    mapxy[3] := -26;\n    mapyy[3] := 22;\n    mapxc[3] := 0;\n    mapyc[3] := 160;\n    mapxx[4] := -15;\n    mapyx[4] := 26;\n    mapxy[4] := 28;\n    mapyy[4] := 24;\n    mapxc[4] := 0;\n    mapyc[4] := 44\n  End;\n\n  Procedure setdragon;\n  Begin\n    xleft := 0;\n    xright := 999;\n    ytop := 0;\n    ybottom := 999;\n    scaledown := 4;\n    mappings := 3;\n    live := black;\n    copied := silver;\n    seedx := 1;\n    seedy := 1;\n    coeffdiv := 1000;\n    mapxx[1] := 0;\n    mapyx[1] := -577;\n    mapxy[1] := 577;\n    mapyy[1] := 0;\n    mapxc[1] := 95;\n    mapyc[1] := 589;\n    mapxx[2] := 0;\n    mapyx[2] := -577;\n    mapxy[2] := 577;\n    mapyy[2] := 0;\n    mapxc[2] := 441;\n    mapyc[2] := 789;\n    mapxx[3] := 0;\n    mapyx[3] := -577;\n    mapxy[3] := 577;\n    mapyy[3] := 0;\n    mapxc[3] := 95;\n    mapyc[3] := 989\n  End;\n\n  Procedure startprompt;\n  Begin\n    output(true, cream, true);\n    keyecho(false);\n    writeln('ITERATED FUNCTION SYSTEMS DEMONSTRATOR PROGRAM');\n    writeln('');\n    write('Select Barnsley fern, Sierpinski, or Dragon curve? (B/S/D) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\b) or (abs(?key) = \\s) or (abs(?key) = \\d);\n    writeln(chr(abs(?key)));\n    if abs(?key) = \\b then\n      begin\n        writeln('Barnsley fern mappings will be used');\n        setbarnsley\n      end\n    else\n    if abs(?key) = \\s then\n      begin\n        writeln('Sierpinski mappings will be used');\n        setsierpinski\n      end\n    else\n      begin\n        writeln('Dragon curve mappings will be used');\n        setdragon\n      end;\n    writeln('');\n    write('Start with single Pixel or entire Canvas? (P/C) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\p) or (abs(?key) = \\c);\n    writeln(chr(abs(?key)));\n    seedpixel := (abs(?key) = \\p);\n    writeln('');\n    write('Use Uniform or Different colours for mappings? (U/D) ');\n    keyecho(false);\n    repeat\n    until (abs(?key) = \\u) or (abs(?key) = \\d);\n    writeln(chr(abs(?key)));\n    uniform := (abs(?key) = \\u);\n    output(false, white, false)\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            if uniform then\n              pixset(newx, newy, copied)\n            else\n              pixset(newx, newy, rgb(mapnum))\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) <> white then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  startprompt;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  if seedpixel then\n    pixset(seedx, seedy, live)\n  else\n    blank(live);\n  iteration := 0;\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000)\n     + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) +\n     ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached');\n  for count := 1 to mappings do\n    domap(count)\nEND.",
  "usage":[
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"output", "level":2, "count":2, "lines":"123 162"},
        {"name":"rgb", "level":3, "count":1, "lines":"199"}
      ],
      "total":3
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"blank", "level":1, "count":1, "lines":"229"},
        {"name":"noupdate", "level":1, "count":2, "lines":"188 207"},
        {"name":"update", "level":1, "count":2, "lines":"201 218"},
        {"name":"canvas", "level":2, "count":1, "lines":"224"},
        {"name":"resolution", "level":2, "count":1, "lines":"225"},
        {"name":"pixcol", "level":3, "count":4, "lines":"191 194 210 216"},
        {"name":"pixset", "level":3, "count":5, "lines":"197 199 212 217 227"}
      ],
      "total":16
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"abs", "level":1, "count":14, "lines":"130 130 130 131 132 138 152 152 153 154 159 159 160 161"},
        {"name":"inc", "level":1, "count":3, "lines":"195 213 234"},
        {"name":"divmult", "level":3, "count":4, "lines":"181 181 182 182"}
      ],
      "total":21
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"write", "level":1, "count":4, "lines":"127 149 156 247"},
        {"name":"writeln", "level":1, "count":16, "lines":"125 126 131 134 140 145 148 153 155 160 235 236 242 243 250 253"}
      ],
      "total":20
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":5, "lines":"236 242 242 243 243"},
        {"name":"qstr", "level":2, "count":1, "lines":"247"},
        {"name":"chr", "level":3, "count":3, "lines":"131 153 160"}
      ],
      "total":9
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"pause", "level":1, "count":1, "lines":"249"},
        {"name":"keyecho", "level":2, "count":4, "lines":"124 128 150 157"},
        {"name":"time", "level":2, "count":3, "lines":"233 243 243"},
        {"name":"timeset", "level":2, "count":1, "lines":"231"}
      ],
      "total":9
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":9, "lines":"132 138 191 194 196 210 216 226 245"},
        {"name":"else", "level":1, "count":5, "lines":"137 143 198 215 228"},
        {"name":"for", "level":1, "count":7, "lines":"172 189 190 208 209 238 254"},
        {"name":"repeat", "level":2, "count":4, "lines":"129 151 158 232"},
        {"name":"procedure", "level":2, "count":8, "lines":"16 49 88 121 165 179 185 204"}
      ],
      "total":33
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"setbarnsley", "level":0, "count":1, "lines":"135"},
        {"name":"setsierpinski", "level":0, "count":1, "lines":"141"},
        {"name":"setdragon", "level":0, "count":1, "lines":"146"},
        {"name":"map", "level":0, "count":1, "lines":"193"},
        {"name":"startprompt", "level":0, "count":1, "lines":"222"},
        {"name":"setscale", "level":0, "count":1, "lines":"223"},
        {"name":"domap", "level":0, "count":2, "lines":"239 255"},
        {"name":"cleanup", "level":0, "count":1, "lines":"241"}
      ],
      "total":9
    }
  ],
  "pcode":[
    [112,20,1,1,112,0,123,112,6,2,123,4,112,64,124,112,84,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,45,119,44],
    [112,4,119,45],
    [116,51,119,50],
    [112,4,119,51],
    [116,57,119,56],
    [112,4,119,57],
    [116,63,119,62],
    [112,4,119,63],
    [116,69,119,68],
    [112,4,119,69],
    [116,75,119,74],
    [112,4,119,75],
    [128,208],
    [133,1],
    [112,0,119,27],
    [112,999,119,28],
    [112,0,119,29],
    [112,999,119,30],
    [112,2,119,31],
    [112,3,119,32],
    [112,0,119,33],
    [112,4210752,119,34],
    [112,250,119,37],
    [112,0,119,38],
    [112,100,119,43],
    [113,44,112,1,112,1,27,2,127,26,4,112,50,2,123],
    [113,62,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,50,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,68,112,1,112,1,27,2,127,26,4,112,50,2,123],
    [113,56,112,1,112,1,27,2,127,26,4,112,250,2,123],
    [113,74,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,44,112,2,112,1,27,2,127,26,4,112,50,2,123],
    [113,62,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,50,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,68,112,2,112,1,27,2,127,26,4,112,50,2,123],
    [113,56,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,74,112,2,112,1,27,2,127,26,4,112,500,2,123],
    [113,44,112,3,112,1,27,2,127,26,4,112,50,2,123],
    [113,62,112,3,112,1,27,2,127,26,4,112,0,2,123],
    [113,50,112,3,112,1,27,2,127,26,4,112,0,2,123],
    [113,68,112,3,112,1,27,2,127,26,4,112,50,2,123],
    [113,56,112,3,112,1,27,2,127,26,4,112,500,2,123],
    [113,74,112,3,112,1,27,2,127,26,4,112,500,2,123],
    [134,132],
    [133,2],
    [112,236,23,119,27],
    [112,263,119,28],
    [112,1,119,29],
    [112,1000,119,30],
    [112,2,119,31],
    [112,4,119,32],
    [112,3978097,119,33],
    [112,51543,119,34],
    [112,1,119,37],
    [112,1,119,38],
    [112,100,119,43],
    [113,44,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,62,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,50,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,68,112,1,112,1,27,2,127,26,4,112,16,2,123],
    [113,56,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,74,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,44,112,2,112,1,27,2,127,26,4,112,85,2,123],
    [113,62,112,2,112,1,27,2,127,26,4,112,4,23,2,123],
    [113,50,112,2,112,1,27,2,127,26,4,112,4,2,123],
    [113,68,112,2,112,1,27,2,127,26,4,112,85,2,123],
    [113,56,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,74,112,2,112,1,27,2,127,26,4,112,160,2,123],
    [113,44,112,3,112,1,27,2,127,26,4,112,20,2,123],
    [113,62,112,3,112,1,27,2,127,26,4,112,23,2,123],
    [113,50,112,3,112,1,27,2,127,26,4,112,26,23,2,123],
    [113,68,112,3,112,1,27,2,127,26,4,112,22,2,123],
    [113,56,112,3,112,1,27,2,127,26,4,112,0,2,123],
    [113,74,112,3,112,1,27,2,127,26,4,112,160,2,123],
    [113,44,112,4,112,1,27,2,127,26,4,112,15,23,2,123],
    [113,62,112,4,112,1,27,2,127,26,4,112,26,2,123],
    [113,50,112,4,112,1,27,2,127,26,4,112,28,2,123],
    [113,68,112,4,112,1,27,2,127,26,4,112,24,2,123],
    [113,56,112,4,112,1,27,2,127,26,4,112,0,2,123],
    [113,74,112,4,112,1,27,2,127,26,4,112,44,2,123],
    [134,132],
    [133,3],
    [112,0,119,27],
    [112,999,119,28],
    [112,0,119,29],
    [112,999,119,30],
    [112,4,119,31],
    [112,3,119,32],
    [112,0,119,33],
    [112,12632256,119,34],
    [112,1,119,37],
    [112,1,119,38],
    [112,1000,119,43],
    [113,44,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,62,112,1,112,1,27,2,127,26,4,112,577,23,2,123],
    [113,50,112,1,112,1,27,2,127,26,4,112,577,2,123],
    [113,68,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,56,112,1,112,1,27,2,127,26,4,112,95,2,123],
    [113,74,112,1,112,1,27,2,127,26,4,112,589,2,123],
    [113,44,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,62,112,2,112,1,27,2,127,26,4,112,577,23,2,123],
    [113,50,112,2,112,1,27,2,127,26,4,112,577,2,123],
    [113,68,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,56,112,2,112,1,27,2,127,26,4,112,441,2,123],
    [113,74,112,2,112,1,27,2,127,26,4,112,789,2,123],
    [113,44,112,3,112,1,27,2,127,26,4,112,0,2,123],
    [113,62,112,3,112,1,27,2,127,26,4,112,577,23,2,123],
    [113,50,112,3,112,1,27,2,127,26,4,112,577,2,123],
    [113,68,112,3,112,1,27,2,127,26,4,112,0,2,123],
    [113,56,112,3,112,1,27,2,127,26,4,112,95,2,123],
    [113,74,112,3,112,1,27,2,127,26,4,112,989,2,123],
    [134,132],
    [133,4],
    [112,-1,112,16777147,112,-1,166],
    [112,0,165],
    [118,46,73,84,69,82,65,84,69,68,32,70,85,78,67,84,73,79,78,32,83,89,83,84,69,77,83,32,68,69,77,79,78,83,84,82,65,84,79,82,32,80,82,79,71,82,65,77,169,170,142],
    [118,0,169,170,142],
    [118,59,83,101,108,101,99,116,32,66,97,114,110,115,108,101,121,32,102,101,114,110,44,32,83,105,101,114,112,105,110,115,107,105,44,32,111,114,32,68,114,97,103,111,110,32,99,117,114,118,101,63,32,40,66,47,83,47,68,41,32,169,142],
    [112,0,165],
    [112,-9,160,24,112,66,32,112,-9,160,24,112,83,32,18,112,-9,160,24,112,68,32,18,129,122],
    [112,-9,160,24,9,169,170,142],
    [112,-9,160,24,112,66,32,129,128],
    [118,35,66,97,114,110,115,108,101,121,32,102,101,114,110,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,169,170,142],
    [131,47],
    [128,134],
    [112,-9,160,24,112,83,32,129,132],
    [118,32,83,105,101,114,112,105,110,115,107,105,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,169,170,142],
    [131,16],
    [128,134],
    [118,34,68,114,97,103,111,110,32,99,117,114,118,101,32,109,97,112,112,105,110,103,115,32,119,105,108,108,32,98,101,32,117,115,101,100,169,170,142],
    [131,84],
    [118,0,169,170,142],
    [118,48,83,116,97,114,116,32,119,105,116,104,32,115,105,110,103,108,101,32,80,105,120,101,108,32,111,114,32,101,110,116,105,114,101,32,67,97,110,118,97,115,63,32,40,80,47,67,41,32,169,142],
    [112,0,165],
    [112,-9,160,24,112,80,32,112,-9,160,24,112,67,32,18,129,137],
    [112,-9,160,24,9,169,170,142],
    [112,-9,160,24,112,80,32,119,36],
    [118,0,169,170,142],
    [118,53,85,115,101,32,85,110,105,102,111,114,109,32,111,114,32,68,105,102,102,101,114,101,110,116,32,99,111,108,111,117,114,115,32,102,111,114,32,109,97,112,112,105,110,103,115,63,32,40,85,47,68,41,32,169,142],
    [112,0,165],
    [112,-9,160,24,112,85,32,112,-9,160,24,112,68,32,18,129,143],
    [112,-9,160,24,9,169,170,142],
    [112,-9,160,24,112,85,32,119,35],
    [112,0,112,16777215,112,0,166],
    [134,132],
    [133,5],
    [139,16,1],
    [113,27,113,31,29,119,39],
    [113,28,113,31,29,119,40],
    [113,29,113,31,29,119,41],
    [113,30,113,31,29,119,42],
    [112,1],
    [120,16,1,113,32],
    [114,16,1,37,129,160],
    [113,56,114,16,1,112,1,27,2,127,26,4,113,56,114,16,1,112,1,27,2,127,26,4,122,113,31,29,2,123],
    [113,74,114,16,1,112,1,27,2,127,26,4,113,74,114,16,1,112,1,27,2,127,26,4,122,113,31,29,2,123],
    [114,16,1,4,128,155],
    [140,16,134,132],
    [133,6],
    [139,17,5],
    [120,17,5,120,17,4,120,17,3,120,17,2,120,17,1],
    [114,17,2,113,43,113,44,114,17,1,112,1,27,2,127,26,4,122,48,114,17,3,113,43,113,50,114,17,1,112,1,27,2,127,26,4,122,48,26,113,56,114,17,1,112,1,27,2,127,26,4,122,26,121,17,4],
    [114,17,2,113,43,113,62,114,17,1,112,1,27,2,127,26,4,122,48,114,17,3,113,43,113,68,114,17,1,112,1,27,2,127,26,4,122,48,26,113,74,114,17,1,112,1,27,2,127,26,4,122,26,121,17,5],
    [140,17,134,132],
    [133,7],
    [139,18,5],
    [120,18,1],
    [112,0,146],
    [113,41],
    [120,18,3,113,42],
    [114,18,3,37,129,187],
    [113,39],
    [120,18,2,113,40],
    [114,18,2,37,129,186],
    [114,18,2,114,18,3,99,112,16777215,33,129,185],
    [114,18,1,114,18,2,114,18,3,117,18,4,117,18,5,131,161],
    [114,18,4,114,18,5,99,112,16777215,32,129,181],
    [116,83,1,122,4,2,123],
    [113,35,129,184],
    [114,18,4,114,18,5,113,34,100],
    [128,185],
    [114,18,4,114,18,5,114,18,1,101,100],
    [114,18,2,4,128,175],
    [114,18,3,4,128,172],
    [112,-1,146],
    [140,18,134,132],
    [133,8],
    [139,19,2],
    [112,0,146],
    [113,41],
    [120,19,2,113,42],
    [114,19,2,37,129,206],
    [113,39],
    [120,19,1,113,40],
    [114,19,1,37,129,205],
    [114,19,1,114,19,2,99,113,33,32,129,202],
    [114,19,1,114,19,2,112,16777215,100],
    [116,84,1,122,4,2,123],
    [128,204],
    [114,19,1,114,19,2,99,112,16777215,33,129,204],
    [114,19,1,114,19,2,113,33,100],
    [114,19,1,4,128,196],
    [114,19,2,4,128,193],
    [112,-1,146],
    [140,19,134,132],
    [131,115],
    [131,148],
    [113,39,113,41,113,40,113,39,27,112,1,26,113,42,113,41,27,112,1,26,144],
    [113,40,113,39,27,112,1,26,113,42,113,41,27,112,1,26,145],
    [113,36,129,215],
    [113,37,113,38,113,33,100],
    [128,216],
    [113,33,96],
    [112,0,119,80],
    [112,0,173],
    [172,119,81],
    [116,80,1,122,4,2,123],
    [118,0,169,170,142],
    [118,10,73,116,101,114,97,116,105,111,110,32,113,80,11,64,112,58,9,64,169,170,142],
    [112,0,119,83],
    [112,1],
    [119,82,113,32],
    [113,82,37,129,228],
    [113,82,131,167],
    [113,82,4,128,224],
    [112,0,119,84],
    [131,189],
    [118,2,32,32,113,83,11,64,118,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,64,113,84,11,64,118,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,64,169,170,142],
    [118,8,32,32,40,116,111,111,107,32,172,113,81,27,112,1000,29,11,64,118,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,64,172,112,1000,29,11,64,118,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,64,169,170,142],
    [113,83,113,84,26,112,0,35,112,2000,112,1000,37,17,129,236],
    [118,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,112,2000,112,1000,112,1,14,64,118,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,64,169,142],
    [112,2000,174],
    [118,0,169,170,142],
    [113,83,113,84,26,112,0,32,129,218],
    [118,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,169,170,142],
    [112,1],
    [119,82,113,32],
    [113,82,37,129,243],
    [113,82,131,167],
    [113,82,4,128,239],
    [130]
  ]
}
