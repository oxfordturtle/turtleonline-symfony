{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Reading a CSV file",
  "author":"Peter Millican",
  "date":"31/08/2020",
  "time":"11:16:47",
  "code":"PROGRAM ReadCSV;\nCONST cols = 10;\n      rows = 10;\n      fname = 'SaveCSV.csv';\nVAR value: array[1..cols, 1..rows] of integer;\n    colwidth, rowheight: integer;\n    xmargin, ymargin: integer;\n    fontsize: integer;\n\n  Procedure setup;\n  Begin\n    colwidth := 1000 div (cols + 1);\n    rowheight := 900 div (rows + 1);\n    xmargin     {calculate relevant sizes} := colwidth  {draw the grid lines} * 3 {add the grid headings}\n     / 7  {read data from file};\n    ymargin   {put array values in grid} := rowheight / 3;\n    fontsize := colwidth / 4\n  End;\n\n  Procedure drawgrid;\n  Var i, j: integer;\n  Begin\n    for i := 0 to cols + 1 do\n      begin\n        if (i = 0) or (i = 1) or (i = cols + 1) then\n          thickness(10)\n        else\n          thickness(2);\n        setxy(5 + i * colwidth, 5);\n        drawxy(0, 890)\n      end;\n    for j := 0 to rows + 1 do\n      begin\n        if (j = 0) or (j = 1) or (j = rows + 1) then\n          thickness(10)\n        else\n          thickness(2);\n        setxy(5, 5 + j * rowheight);\n        drawxy(995, 0)\n      end\n  End;\n\n  Procedure labelgrid;\n  Var i, j: integer;\n  Begin\n    setxy(colwidth - 25, 5);\n    print('x', 0, 30);\n    setxy(20, rowheight - 45);\n    print('y', 0, 30);\n    setxy(300, 925);\n    print('Table read from file', 0, 40);\n    for i := 1 to cols do\n      begin\n        setxy(i * colwidth + xmargin, ymargin);\n        print(str(i), 0, fontsize)\n      end;\n    for j := 1 to rows do\n      begin\n        setxy(xmargin, j * rowheight + ymargin);\n        print(str(j), 0, fontsize)\n      end\n  End;\n\n  Procedure display;\n  Var i, j: integer;\n  Begin\n    for i := 1 to cols do\n      for j := 1 to rows do\n        begin\n          setxy(i * colwidth + xmargin, j * rowheight + ymargin);\n          print(str(value[i, j]), 0, fontsize)\n        end\n  End;\n\n  Procedure readdata;\n  Var handle, i, j: integer;\n      thisline, thisbit: string[64];\n\n    function nextbit(var s: string): string;\n    var posn: integer;\n    begin\n      posn := pos(',', s);\n      if posn = 0 then\n        begin\n          result := s;\n          s := ''\n        end\n      else\n        begin\n          result := copy(s, 1, posn - 1);\n          s := delete(s, 1, posn)\n        end\n    end;\n\n  Begin\n    i := 0;\n    handle := openfile(fname, 1);\n    while not(eof(handle)) do\n      begin\n        inc(i);\n        thisline := freadln(handle);\n        j := 0;\n        while thisline <> '' do\n          begin\n            inc(j);\n            thisbit := nextbit(thisline);\n            value[i, j] := val(thisbit)\n          end\n      end;\n    closefile(handle)\n  End;\n\nBEGIN\n  setup;\n  drawgrid;\n  labelgrid;\n  readdata;\n  display;\n  writeln('File ' + fname + ' has been read')\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"drawxy", "level":2, "count":2, "lines":"30 39"}
      ],
      "total":2
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":8, "lines":"29 38 46 48 50 54 59 70"}
      ],
      "total":8
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"thickness", "level":1, "count":4, "lines":"26 28 35 37"}
      ],
      "total":4
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"inc", "level":1, "count":2, "lines":"100 105"}
      ],
      "total":2
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":6, "lines":"47 49 51 55 60 71"},
        {"name":"writeln", "level":1, "count":1, "lines":"119"},
        {"name":"copy", "level":3, "count":1, "lines":"90"},
        {"name":"delete", "level":3, "count":1, "lines":"91"},
        {"name":"pos", "level":3, "count":1, "lines":"82"}
      ],
      "total":10
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":3, "lines":"55 60 71"},
        {"name":"val", "level":1, "count":1, "lines":"107"}
      ],
      "total":4
    },
    {
      "category": "File processing",
      "expressions":[
        {"name":"closefile", "level":2, "count":1, "lines":"110"},
        {"name":"eof", "level":2, "count":1, "lines":"98"},
        {"name":"freadln", "level":2, "count":1, "lines":"101"},
        {"name":"openfile", "level":2, "count":1, "lines":"97"}
      ],
      "total":4
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":3, "lines":"25 34 83"},
        {"name":"else", "level":1, "count":3, "lines":"27 36 88"},
        {"name":"for", "level":1, "count":6, "lines":"23 32 52 57 67 68"},
        {"name":"while", "level":2, "count":2, "lines":"98 103"},
        {"name":"procedure", "level":2, "count":5, "lines":"10 20 43 64 75"},
        {"name":"function", "level":3, "count":1, "lines":"79"}
      ],
      "total":20
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"nextbit", "level":0, "count":1, "lines":"106"},
        {"name":"setup", "level":0, "count":1, "lines":"114"},
        {"name":"drawgrid", "level":0, "count":1, "lines":"115"},
        {"name":"labelgrid", "level":0, "count":1, "lines":"116"},
        {"name":"readdata", "level":0, "count":1, "lines":"117"},
        {"name":"display", "level":0, "count":1, "lines":"118"}
      ],
      "total":6
    }
  ],
  "pcode":[
    [112,19,1,1,112,0,123,112,6,2,123,4,112,133,124,112,152,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,27,119,26],
    [112,10,119,27,116,38,119,28],
    [112,10,119,38,116,49,119,29],
    [112,10,119,49,116,60,119,30],
    [112,10,119,60,116,71,119,31],
    [112,10,119,71,116,82,119,32],
    [112,10,119,82,116,93,119,33],
    [112,10,119,93,116,104,119,34],
    [112,10,119,104,116,115,119,35],
    [112,10,119,115,116,126,119,36],
    [112,10,119,126,116,137,119,37],
    [112,10,119,137],
    [128,110],
    [133,1],
    [112,1000,112,10,112,1,26,30,119,148],
    [112,900,112,10,112,1,26,30,119,149],
    [113,148,112,3,28,112,7,29,119,150],
    [113,149,112,3,29,119,151],
    [113,148,112,4,29,119,152],
    [134,132],
    [133,2],
    [139,13,2],
    [112,0],
    [120,13,1,112,10,112,1,26],
    [114,13,1,37,129,35],
    [114,13,1,112,0,32,114,13,1,112,1,32,18,114,13,1,112,10,112,1,26,32,18,129,31],
    [112,10,85],
    [128,32],
    [112,2,85],
    [112,5,114,13,1,113,148,28,26,112,5,88],
    [112,0,112,890,90],
    [114,13,1,4,128,26],
    [112,0],
    [120,13,2,112,10,112,1,26],
    [114,13,2,37,129,45],
    [114,13,2,112,0,32,114,13,2,112,1,32,18,114,13,2,112,10,112,1,26,32,18,129,41],
    [112,10,85],
    [128,42],
    [112,2,85],
    [112,5,112,5,114,13,2,113,149,28,26,88],
    [112,995,112,0,90],
    [114,13,2,4,128,36],
    [140,13,134,132],
    [133,3],
    [139,14,2],
    [113,148,112,25,27,112,5,88],
    [112,120,9,112,0,112,30,168,142],
    [112,20,113,149,112,45,27,88],
    [112,121,9,112,0,112,30,168,142],
    [112,300,112,925,88],
    [118,20,84,97,98,108,101,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,112,0,112,40,168,142],
    [112,1],
    [120,14,1,112,10],
    [114,14,1,37,129,60],
    [114,14,1,113,148,28,113,150,26,113,151,88],
    [114,14,1,11,112,0,113,152,168,142],
    [114,14,1,4,128,55],
    [112,1],
    [120,14,2,112,10],
    [114,14,2,37,129,66],
    [113,150,114,14,2,113,149,28,113,151,26,88],
    [114,14,2,11,112,0,113,152,168,142],
    [114,14,2,4,128,61],
    [140,14,134,132],
    [133,4],
    [139,15,2],
    [112,1],
    [120,15,1,112,10],
    [114,15,1,37,129,79],
    [112,1],
    [120,15,2,112,10],
    [114,15,2,37,129,78],
    [114,15,1,113,148,28,113,150,26,114,15,2,113,149,28,113,151,26,88],
    [113,26,114,15,1,112,1,27,2,127,26,4,122,114,15,2,112,1,27,2,127,26,4,122,11,112,0,113,152,168,142],
    [114,15,2,4,128,73],
    [114,15,1,4,128,70],
    [140,15,134,132],
    [133,6],
    [139,17,37],
    [117,17,3,120,17,1,112,33,120,17,2,120,17,36],
    [112,44,9,114,17,36,70,120,17,37,142],
    [114,17,37,112,0,32,129,88],
    [114,17,1,114,17,36,2,126],
    [114,17,36,118,0,2,126,142],
    [128,90],
    [114,17,1,114,17,36,112,1,114,17,37,112,1,27,67,2,126,142],
    [114,17,36,114,17,36,112,1,114,17,37,68,2,126,142],
    [113,17,119,18,140,17,134,132],
    [133,5],
    [139,16,137],
    [117,16,6,120,16,4,112,65,120,16,5],
    [117,16,73,120,16,71,112,65,120,16,72],
    [112,0,120,16,2],
    [118,11,83,97,118,101,67,83,86,46,99,115,118,112,1,179,120,16,1,142],
    [114,16,1,182,16,129,108],
    [117,16,2,1,122,4,2,123],
    [114,16,4,114,16,1,185,2,126,142],
    [112,0,120,16,3],
    [114,16,4,118,0,41,142,129,107],
    [117,16,3,1,122,4,2,123],
    [114,16,71,114,16,4,131,80],
    [114,18,1,8,2,126,142],
    [113,26,114,16,2,112,1,27,2,127,26,4,122,114,16,3,112,1,27,2,127,26,4,114,16,71,112,0,13,2,123],
    [128,101],
    [128,97],
    [114,16,1,180],
    [140,16,134,132],
    [131,16],
    [131,23],
    [131,46],
    [131,91],
    [131,67],
    [118,5,70,105,108,101,32,118,11,83,97,118,101,67,83,86,46,99,115,118,64,118,14,32,104,97,115,32,98,101,101,110,32,114,101,97,100,64,169,170,142],
    [130]
  ]
}
