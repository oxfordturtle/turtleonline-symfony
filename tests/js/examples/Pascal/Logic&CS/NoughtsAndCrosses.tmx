{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Noughts and crosses",
  "author":"Peter Millican",
  "date":"31/08/2020",
  "time":"11:18:09",
  "code":"PROGRAM NoughtsAndCrosses;\nCONST cross = 33;\n      nought = 2;\nVAR board: array[0..11] of integer;\n    numgames: integer;\n    randfirst: boolean;\n    i, column, row: integer;\n\n  Procedure doblot(x, y, col: integer);\n  Begin\n    setxy(x * 250 + 250, y * 250 + 175);\n    colour(rgb(col));\n    blot(70)\n  End;\n\n  Procedure copy(var fromarray, toarray: array of integer);\n  Var i: integer;\n  Begin\n    for i := 0 to fromarray.length - 1 do\n      toarray[i] := fromarray[i]\n  End;\n\n  Procedure evaluate(var b1: array of integer; jm, depth: integer);\n  Var mover: integer;\n      replyscore: integer;\n      b2: array[0..11] of integer;\n      m: integer;\n  Begin\n    mover := cross + nought - jm;\n    replyscore := -2;\n    b1[9] := 0;\n    b1[10] := -1;\n    b1[11] := depth;\n    if (((b1[0] = jm) and (b1[1] = jm) and (b1[2] = jm)) or ((b1[3] = jm) and (b1[4] = jm) and (b1[5]\n     = jm)) or ((b1[6] = jm) and (b1[7] = jm) and (b1[8] = jm)) or ((b1[0] = jm) and (b1[3] = jm)\n     and (b1[6] = jm)) or ((b1[1] = jm) and (b1[4] = jm) and (b1[7] = jm)) or ((b1[2] = jm) and\n     (b1[5] = jm) and (b1[8] = jm)) or ((b1[0] = jm) and (b1[4] = jm) and (b1[8] = jm)) or ((b1[2]\n     = jm) and (b1[4] = jm) and (b1[6] = jm))) then\n      b1[9] := 1\n    else\n      begin\n        m := 0;\n        repeat\n          if (b1[m] = 0) then\n            begin\n              copy(b1, b2);\n              b2[m] := mover;\n              evaluate(b2, mover, depth + 1);\n              if (b2[9] > replyscore) then\n                begin\n                  replyscore := b2[9];\n                  b1[10] := m;\n                  b1[11] := b2[11]\n                end\n            end;\n          m := m + 1\n        until (m > 8) or (replyscore > 0);\n        if (replyscore <> -2) then\n          b1[9] := -replyscore\n      end\n  End;\n\nBEGIN\n  numgames := 0;\n  repeat\n    numgames := numgames + 1;\n    randfirst := (numgames mod 2 = 1);\n    blank(lightgreen);\n    thickness(10);\n    colour(black);\n    setxy(375, 50);\n    drawxy(0, 750);\n    setxy(625, 50);\n    drawxy(0, 750);\n    setxy(125, 300);\n    drawxy(750, 0);\n    setxy(125, 550);\n    drawxy(750, 0);\n    for i := 0 to 10 do\n      board[i] := 0;\n    board[11] := 8;\n    repeat\n      if (randfirst) then\n        begin\n          board[10] := random(9);\n          randfirst := false\n        end\n      else\n        begin\n          cursor(2);\n          repeat\n            repeat\n              repeat\n              until ?lmouse > 0;\n              pause(200)\n            until ((?clickx >= 125) and (?clickx <= 875) and (?clicky >= 50) and (?clicky <= 800));\n            column := (?clickx - 125) div 250;\n            row := (?clicky - 50) div 250\n          until board[column + row * 3] = 0;\n          doblot(column, row, cross);\n          board[column + row * 3] := cross;\n          cursor(11);\n          evaluate(board, cross, 0)\n        end;\n      if (board[10] <> -1) then\n        begin\n          doblot(board[10] mod 3, board[10] div 3, nought);\n          board[board[10]] := nought\n        end\n    until (board[11] <= 1);\n    setxy(350, 850);\n    colour(black);\n    if (board[9] = 0) then\n      print('  Draw!  ', 4, 60)\n    else\n      print('  I win!  ', 4, 60);\n    pause(2500)\n  until (1 <> 1)\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"drawxy", "level":2, "count":4, "lines":"72 74 76 78"}
      ],
      "total":4
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":6, "lines":"11 71 73 75 77 111"}
      ],
      "total":6
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"blot", "level":1, "count":1, "lines":"13"}
      ],
      "total":1
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":3, "lines":"12 70 112"},
        {"name":"thickness", "level":1, "count":1, "lines":"69"},
        {"name":"rgb", "level":3, "count":1, "lines":"12"}
      ],
      "total":5
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"blank", "level":1, "count":1, "lines":"68"}
      ],
      "total":1
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"random", "level":2, "count":1, "lines":"85"}
      ],
      "total":1
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":2, "lines":"114 116"},
        {"name":"copy", "level":3, "count":1, "lines":"46"}
      ],
      "total":3
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"pause", "level":1, "count":2, "lines":"95 117"},
        {"name":"cursor", "level":2, "count":2, "lines":"90 102"}
      ],
      "total":4
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":7, "lines":"34 44 49 58 83 105 113"},
        {"name":"else", "level":1, "count":3, "lines":"40 88 115"},
        {"name":"for", "level":1, "count":2, "lines":"19 79"},
        {"name":"repeat", "level":2, "count":6, "lines":"43 65 82 91 92 93"},
        {"name":"procedure", "level":2, "count":3, "lines":"9 16 23"}
      ],
      "total":21
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"evaluate", "level":0, "count":2, "lines":"48 103"},
        {"name":"doblot", "level":0, "count":2, "lines":"100 107"}
      ],
      "total":4
    }
  ],
  "pcode":[
    [112,15,1,1,112,0,123,112,6,2,123,4,112,25,124,112,40,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,23,119,22],
    [112,12,119,23],
    [128,48],
    [133,1],
    [139,12,3],
    [120,12,3,120,12,2,120,12,1],
    [114,12,1,112,250,28,112,250,26,114,12,2,112,250,28,112,175,26,88],
    [114,12,3,101,87],
    [112,70,108],
    [140,12,134,132],
    [133,2],
    [139,13,3],
    [120,13,2,120,13,1],
    [112,0],
    [120,13,3,114,13,1,122,112,1,27],
    [114,13,3,37,129,21],
    [114,13,2,114,13,3,2,127,26,4,114,13,1,114,13,3,2,127,26,4,122,2,123],
    [114,13,3,4,128,17],
    [140,13,134,132],
    [133,3],
    [139,14,20],
    [120,14,3,120,14,2,120,14,1],
    [117,14,7,120,14,6,112,12,120,14,7],
    [112,33,112,2,26,114,14,2,27,120,14,4],
    [112,2,23,120,14,5],
    [114,14,1,112,9,2,127,26,4,112,0,2,123],
    [114,14,1,112,10,2,127,26,4,112,1,23,2,123],
    [114,14,1,112,11,2,127,26,4,114,14,3,2,123],
    [114,14,1,112,0,2,127,26,4,122,114,14,2,32,114,14,1,112,1,2,127,26,4,122,114,14,2,32,17,114,14,1,112,2,2,127,26,4,122,114,14,2,32,17,114,14,1,112,3,2,127,26,4,122,114,14,2,32,114,14,1,112,4,2,127,26,4,122,114,14,2,32,17,114,14,1,112,5,2,127,26,4,122,114,14,2,32,17,18,114,14,1,112,6,2,127,26,4,122,114,14,2,32,114,14,1,112,7,2,127,26,4,122,114,14,2,32,17,114,14,1,112,8,2,127,26,4,122,114,14,2,32,17,18,114,14,1,112,0,2,127,26,4,122,114,14,2,32,114,14,1,112,3,2,127,26,4,122,114,14,2,32,17,114,14,1,112,6,2,127,26,4,122,114,14,2,32,17,18,114,14,1,112,1,2,127,26,4,122,114,14,2,32,114,14,1,112,4,2,127,26,4,122,114,14,2,32,17,114,14,1,112,7,2,127,26,4,122,114,14,2,32,17,18,114,14,1,112,2,2,127,26,4,122,114,14,2,32,114,14,1,112,5,2,127,26,4,122,114,14,2,32,17,114,14,1,112,8,2,127,26,4,122,114,14,2,32,17,18,114,14,1,112,0,2,127,26,4,122,114,14,2,32,114,14,1,112,4,2,127,26,4,122,114,14,2,32,17,114,14,1,112,8,2,127,26,4,122,114,14,2,32,17,18,114,14,1,112,2,2,127,26,4,122,114,14,2,32,114,14,1,112,4,2,127,26,4,122,114,14,2,32,17,114,14,1,112,6,2,127,26,4,122,114,14,2,32,17,18,129,34],
    [114,14,1,112,9,2,127,26,4,112,1,2,123],
    [128,47],
    [112,0,120,14,20],
    [114,14,1,114,14,20,2,127,26,4,122,112,0,32,129,43],
    [114,14,1,114,14,6,131,13],
    [114,14,6,114,14,20,2,127,26,4,114,14,4,2,123],
    [114,14,6,114,14,4,114,14,3,112,1,26,131,22],
    [114,14,6,112,9,2,127,26,4,122,114,14,5,35,129,43],
    [114,14,6,112,9,2,127,26,4,122,120,14,5],
    [114,14,1,112,10,2,127,26,4,114,14,20,2,123],
    [114,14,1,112,11,2,127,26,4,114,14,6,112,11,2,127,26,4,122,2,123],
    [114,14,20,112,1,26,120,14,20],
    [114,14,20,112,8,35,114,14,5,112,0,35,18,129,35],
    [114,14,5,112,2,23,33,129,47],
    [114,14,1,112,9,2,127,26,4,114,14,5,23,2,123],
    [140,14,134,132],
    [112,0,119,36],
    [113,36,112,1,26,119,36],
    [113,36,112,2,31,112,1,32,119,37],
    [112,10025880,96],
    [112,10,85],
    [112,0,87],
    [112,375,112,50,88],
    [112,0,112,750,90],
    [112,625,112,50,88],
    [112,0,112,750,90],
    [112,125,112,300,88],
    [112,750,112,0,90],
    [112,125,112,550,88],
    [112,750,112,0,90],
    [112,0],
    [119,38,112,10],
    [113,38,37,129,67],
    [113,22,113,38,2,127,26,4,112,0,2,123],
    [113,38,4,128,63],
    [113,22,112,11,2,127,26,4,112,8,2,123],
    [113,37,129,72],
    [113,22,112,10,2,127,26,4,112,9,7,2,123],
    [112,0,119,37],
    [128,83],
    [112,2,171],
    [112,-1,160,112,0,35,129,73],
    [112,200,174],
    [112,-5,160,112,125,37,112,-5,160,112,875,36,17,112,-6,160,112,50,37,17,112,-6,160,112,800,36,17,129,73],
    [112,-5,160,112,125,27,112,250,30,119,39],
    [112,-6,160,112,50,27,112,250,30,119,40],
    [113,22,113,39,113,40,112,3,28,26,2,127,26,4,122,112,0,32,129,73],
    [113,39,113,40,112,33,131,6],
    [113,22,113,39,113,40,112,3,28,26,2,127,26,4,112,33,2,123],
    [112,11,171],
    [113,22,112,33,112,0,131,22],
    [113,22,112,10,2,127,26,4,122,112,1,23,33,129,86],
    [113,22,112,10,2,127,26,4,122,112,3,31,113,22,112,10,2,127,26,4,122,112,3,30,112,2,131,6],
    [113,22,113,22,112,10,2,127,26,4,122,2,127,26,4,112,2,2,123],
    [113,22,112,11,2,127,26,4,122,112,1,36,129,68],
    [112,350,112,850,88],
    [112,0,87],
    [113,22,112,9,2,127,26,4,122,112,0,32,129,92],
    [118,9,32,32,68,114,97,119,33,32,32,112,4,112,60,168],
    [128,93],
    [118,10,32,32,73,32,119,105,110,33,32,32,112,4,112,60,168,142],
    [112,2500,174],
    [112,1,112,1,33,129,49],
    [130]
  ]
}
