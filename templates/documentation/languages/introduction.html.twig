<h2>Introduction</h2>

<p>Turtle <span data-language="BASIC">BASIC</span><span data-language="C">C</span><span data-language="Java">Java</span><span data-language="Pascal">Pascal</span><span data-language="Python">Python</span><span data-language="TypeScript">TypeScript</span> is a simplified subset of <span data-language="BASIC">BASIC</span><span data-language="C">C</span><span data-language="Java">Java</span><span data-language="Pascal">Pascal</span><span data-language="Python">Python</span><span data-language="TypeScript">TypeScript</span> with native support for Turtle Graphics. It is intended as a teaching language, to bridge the gap between visual programming languages like Scratch and fully-fledged <span data-language="BASIC">BASIC</span><span data-language="C">C</span><span data-language="Java">Java</span><span data-language="Pascal">Pascal</span><span data-language="Python">Python</span><span data-language="TypeScript">TypeScript</span>.</p>

<p>Turtle <span data-language="BASIC">BASIC</span><span data-language="C">C</span><span data-language="Java">Java</span><span data-language="Pascal">Pascal</span><span data-language="Python">Python</span><span data-language="TypeScript">TypeScript</span> programs are ASCII text files that are compiled to a pseudo-code or “PCode”, which can be executed by the virtual Turtle Machine. This enables the Turtle System to provide a large number of clear and precisely targeted error messages, and also offers more advanced students the opportunity to learn about compilers and machine code.</p>

<div data-language="BASIC"></div>
<div data-language="C"></div>
<div data-language="Java">
  <p>At various points in what follows the differences between Turtle Java and Java itself will be explained. It may be helpful, however, to be aware of one major differences up front: In Java, more or less everything is an object. In Turtle Java, however, there are no objects. This difference is the result of the desire for comparative simplicity in a teaching language, together with limitations of the virtual Turtle Machine (itself designed with simplicity and teaching in mind). Although this difference is substantial in principle, it ought to be invisible to beginners in practice; and where more advanced students start to make the switch to Java itself, it will afford a useful opportunity for learning about that language’s data model.</p>
</div>
<div data-language="Pascal"></div>
<div data-language="Python">
  <p>At various points in what follows the differences between Turtle Python and Python itself will be explained. It may be helpful, however, to be aware of the main differences up front:</p>
  <ol>
    <li>The specification for Python does not prescribe whether it should be interpreted or compiled; in practice, however, it is invariably an interpreted language. In contrast, as already stated, Turtle Python is a compiled language.</li>
    <li>Python is a dynamically typed language, but Turtle Python is a statically typed language. Consequently the type hints that are optional in Python itself are compulsory in Turtle Python. Type hinting is a good practice to encourage in students anyway, and this enables the Turtle Python compiler to pick up type errors without the need for a separate type checker.</li>
    <li>Python supports strings and lists of unspecified length, that grow as necessary to fit your data. Strings and lists in Turtle Python are of a fixed length, and there are extra facilities to specify the size you want to allocate for each of your string or list variables. This is because the virtual Turtle Machine does not implement garbage collection (for the sake of simplicity).</li>
    <li>In Python, more or less everything is an object. In Turtle Python, there are no objects. This difference is the result of the desire for comparative simplicity in a teaching language, together with limitations of the virtual Turtle Machine (itself designed with simplicity and teaching in mind). Although this difference is substantial in principle, it ought to be invisible to beginners in practice; and where more advanced students start to make the switch to Python itself, it will afford a useful opportunity for learning about that language’s data model.</li>
    <li>In Python, every callable object is a function, i.e. returns a value (though that value may be None). In Turtle Python, a distinction is drawn between functions (which must return a value), and procedures (which cannot); and there is no None object.</li>
  </ol>
</div>
<div data-language="TypeScript">
  <p>At various points in what follows the differences between Turtle TypeScript and TypeScript itself will be explained. It may be helpful, however, to be aware of the main differences up front:</p>
  <ol>
    <li>TypeScript is a typed superset of JavaScript, that performs type checking at compilation time and then compiles to JavaScript, an interpreted language that only has types at runtime. Turtle TypeScript is compiled directly to Turtle Machine code.</li>
    <li>JavaScript is a dynamically typed language. TypeScript is flexible, allowing dynamic typing but also enabling the compiler to enforce static types. Turtle TypeScript is a statically typed language.</li>
    <li>JavaScript supports strings and arrays of unspecified length, that grow as necessary to fit your data. Strings and arrays in Turtle TypeScript are of a fixed length, and there are extra facilities to specify the size you want to allocate for each of your string or array variables. This is because the virtual Turtle Machine does not implement garbage collection (for the sake of simplicity).</li>
    <li>In JavaScript/TypeScript, more or less everything is an object. In Turtle TypeScript, there are no objects. This difference is the result of the desire for comparative simplicity in a teaching language, together with limitations of the virtual Turtle Machine (itself designed with simplicity and teaching in mind). Although this difference is substantial in principle, it ought to be invisible to beginners in practice; and where more advanced students start to make the switch to TypeScript/JavaScript itself, it will afford a useful opportunity for learning about that language’s data model.</li>
    <li>In JavaScript/TypeScript, there is no distinction between functions (which return a value) and procedures (which do not); functions that lack any explicit <code>return</code> statement always return the special value <code>undefined</code>. In Turtle TypeScript, a distinction is drawn between functions (which must return a value), and procedures (which cannot); and there is no <code>undefined</code> value.</li>
  </ol>
</div>
