<h2>Guide for Normal Users</h2>

<h3>1. Interface Overview</h3>
<p>The <i>Turtle System</i> is divided into two sections, the <em class="red">programming section</em> on the left, and the <em class="green">tabs section</em> on the right. The <em class="red">programming section</em> is where you write your Turtle programs. You can have up to eight programs open at one time (if you attempt to open a ninth program, it will replace whatever is in the eighth slot, prompting you first if doing so will overwrite unsaved changes).</p>
<p>The <em class="green">tabs section</em> on the right contains input and output displays for your programs. The first tab contains the <em class="orange">canvas</em> for graphical output, while the second tab contains a box for textual output. The smaller <em class="blue">console</em> underneath the canvas shows both textual output and textual input. The second two tabs&mdash;the “QuickHelp” tabs&mdash;contain information about how to program in the <i>Turtle System</i>. This information is also available (in a less condensed form) on the <a href="{{ path('documentation_help') }}">Turtle Languages Help</a> page.)</p>
<p>Above all of the tabs on the right is the <em class="yellow">program execution bar</em>, containing buttons to RUN, PAUSE, and HALT your program, and real-time displays of the Turtle’s current properties (X and Y coordinates, direction, pen thickness, and pen colour).</p>

<h3>2. Technical Overview: what happens when I click ‘RUN’</h3>
<p>Computer programs are typically written in some high-level language (like <i>BASIC</i>, <i>C</i>, <i>Java</i>, <i>JavaScript</i>, <i>Pascal</i>, or <i>Python</i>), which is relatively easy for human beings to read and understand. They are then “compiled” (translated) into machine code. Machine code is what the computer actually executes, and it is generally much harder for human beings to read and understand.</p>
<p>The <i>Turtle System</i> implements a virtual <i>Turtle Machine</i>, which is a software representation of an actual computer, designed to execute its own special machine code. When you write a program and click ‘RUN’, the first thing that happens is that the <i>Turtle System</i> attempts to compile your program into this machine code. If it succeeds, it will then send this code to the <i>Turtle Machine</i> to be executed, and you will see the results of your program on the <em class="orange">canvas</em> (and/or in the textual output). If it fails, because of errors in your code, it will throw up an appropriate error message, showing you the line number in which the error was encountered, and the most likely cause of the problem.</p>
<p>For users who are interested in learning more about machine code, and in how computers work “under the bonnet”, the <i>Turtle System</i> provides a number of advanced features. To learn about these, please see the accompanying <a href="{{ path('documentation_guides', { tab: 'power' }) }}">Guide for Power Users</a>. For those who simply want to learn how to program, the present guide (together with the <a href="{{ path('documentation_help') }}">Turtle Languages Help</a>) is all you will need. To better understand the <i>Turtle System</i>, however, and to make best sense of this <a href="{{ path('documentation_guides', { tab: 'normal' }) }}">Guide for Normal Users</a>, it is helpful to be aware of these two processes beneath the surface: first the program is compiled into machine code, and then this machine code is executed by the <i>Turtle Machine</i>.</p>

<h3>3. The LANGUAGE Menu</h3>
<p>The <i>Turtle System</i> supports programming in three languages, <i>Turtle BASIC</i>, <i>Turtle Pascal</i>, and Turtle Python, with additional languages being planned for the future. (Note however that <i>Turtle Python</i> is currently being redeveloped, and has been disabled in the latest version of the software. In the meantime, you can continue to use it in the legacy version 11.) By default, the <i>Turtle System</i> opens in <i>Turtle Pascal</i>, but you can change between languages at any time using the “LANGUAGE” menu.</p>
<p>Changing the language will change the language-specific help under the “QuickHelp 1” tab, but also&mdash;more importantly&mdash;will change the compiler to expect programs in the new language. Note that this can lead to some surprising error messages. If you try to compile a correct <i>Turtle Pascal</i> program in <i>Turtle Python</i>, for example, the compiler will very quickly encounter an error. No attempt is made to automatically guess which language your program has been written in, and this is by design: we do not wish to hide from users the fact that different languages have to be handled by different compilers.</p>

<h3>4. The File Menu</h3>
<p>The “File” menu contains the obvious entries you would expect, giving you the facilities to open and close programs, create new programs, save your programs to your computer, or print them. Here you can also save the graphical output of your programs, either by copying the <em class="orange">canvas</em> image to your clipboard, or saving it as a bitmap image file. In addition to creating a new (blank) program, you can also create a skeleton program, which saves you time by preloading the program editor with the minimum framework you need to get your program functioning.</p>

<h3>5. The Edit Menu</h3>
<p>The “Edit” menu contains the obvious facilities you would expect: undo, redo, cut, copy, paste. You also have the option here to store a copy of the program you are currently working on, and subsequently restore that copy&mdash;a quick way to temporarily save a version of your program before experimenting with some changes, allowing you to revert to the earlier version if those changes don’t work out. Note that this will not save the program to your computer, and any copies stored in this way will be lost when you close the program (unless you have saved them in the usual way). You can store at most one copy for each open program in this way, and so clicking on this option a second time will overwrite the existing copy.</p>
<p>The “Edit” menu also contains an Auto-Format feature. This very useful feature will automatically arrange the code of your program into a standard and consistent format, making it much easier to read, and optionally removing any program comments. Clicking on “Auto-Format program” brings up a dialogue box with a number of options. Having changed the options, you can click “Save Options” to save your preferences without formatting the current program, or click “Format” to save your preferences <em>and</em> format the current program according to those preferences.</p>

<h3>6. The View Menu</h3>
<p>By default, the <em>Turtle System</em> contains everything integrated into one window. In the “View” menu, however, you have the option to separate the <em class="green">tabs section</em> on the right from the <em class="red">programming section</em> on the left, creating two windows. Similarly, you can also place the <em class="orange">canvas</em> in its own window. This latter option is particularly useful if you want to change the size of the <em class="orange">canvas</em> on your screen. By default, the <am class="orange">canvas</em> is 1000 by 1000 pixels, but scaled down to take up only 500 by 500 pixels on your screen. By detaching it you can view it full size, or indeed at any size by simply resizing this separate window.</p>
<p>Under the “View” menu you can also change the font for the program editor, place the tabs at the top rather than the bottom of your window, and clear the <em class="orange">canvas</em>, <em class="blue">console</em>, and textual output of any content that was generated by your previously executed program.</p>
<p>At the bottom of the “View” menu is an entry to bring up the “VIEWING MODE” dialog box. This box enables you to set a number of advanced options, and options designed specifically for teachers. Those interested in these higher level features should consult the <a href="{{ path('documentation_guides', { tab: 'power' }) }}">Guide for Power Users</e> and the <a href="{{ path('documentation_guides', { tab: 'teachers' }) }}">Guide for Teachers</a>.</p>

<h3>7. The Run Menu</h3>
<p>The “Run” menu contains entries to RUN, HALT, and PAUSE your program. In addition, there are two runtime options, to show the “Canvas &amp; Console” tab when your program starts, and to show the “Output” tab when textual output is generated. These will automatically change the currently viewed tab on the right hand side. Note that you can switch between these tabs during the running of your program using the <code>output</code> command. See the “String functions” example program under “Examples 3 - further commands and structures” in the “Help” menu for an illustration of this.</p>

<h3>8. The Options Menu</h3>
<p>There are two sections in the “Options” menu. In the first section, you can change the starting size of the <em class="orange">canvas</em> for all of your programs. By default, the <em class="orange">canvas</em> is set to 1000 by 1000 pixels, but here you can select either a smaller <em class="orange">canvas</em> (500 by 500) or a larger one (2000 by 2000). This setting effects how your program is compiled, rather than how it is executed: every compiled program begins with some setup code, creating a default keyboard buffer, positioning the Turtle in the centre of the <em class="orange">canvas</em>, and fixing the <em class="orange">canvas</em> size and resolution. (Note that this option only concerns the initial setup; the canvas size and resolution can also be changed during your program, using the <code>canvas</code> and <code>resolution</code> commands.)</p>
<p>The second section lets you save your preferred settings and directories to an options file on your computer, so that the next time you run the <i>Turtle System</i> it will be set up the way you like it. To do this, simply arrange the <i>Turtle System</i> to suit your preferences, and then click on “Save current settings to options file”. You can save this file anywhere on your computer, and call it whatever you like, keeping multiple settings files if you wish. You can then load them by clicking on “Load and apply settings/directories from options file”. However, if you save an options file in the same directory as the <i>Turtle System</i> executable, and call it “Default.tgo”, the settings from that file will automatically be applied each time you start up the <i>Turtle System</i>. To revert to the default settings, simply delete or rename this file.</p>
<p>An options file is simply a text file with the options written in a regimented format. If you wish, you can open this file in a text editor, and edit it directly yourself. It should be fairly obvious how to change most of the options in this way, but to be sure of getting the results you want, it is always safer to use the <i>Turtle System</i> itself to generate these options files.</p>

<h3>9. The Examples Menu</h3>
<p>The “Help” menu contains a wide selection of example programs, which together illustrate most of the programming features available in the Turtle languages. These examples range from very simple programs intended for complete beginners, to very sophisticated programs meant for more experienced programmers. We encourage students to explore the features of the Turtle languages by reading, running, and editing these programs.</p>
<p>The final entry in the “Help” menu, “Load corresponding example on language switch”, toggles an option. With this option turned on, if you are currently viewing an example program, and then change language (using the “LANGUAGE” menu), the <i>Turtle System</i> will automatically load the corresponding example from the new language. This is a very nice way of seeing at a glance how the various languages differ (and the ways in which they are similar).</p>
<p>There are two things to note about this option. First, there is no automated translation happening, and you cannot automatically convert your own programs from one language to another in this way. It is simply that we have written our example programs in each of the different languages. Secondly, some of our example programs do not yet have versions for every language. When you change language with this option set, therefore, you may get a notice saying that the current example is not yet available in the new language. We are working to fix this.
