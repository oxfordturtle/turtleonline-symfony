PROGRAM KnightsTour
CONST width = 10
      height = 10
      maxlast = 255
      delay = 0
      margin = 20
      timelimit = 500
      pauseonbest = 1000
      drawall = false
VAR vectorx, vectory: array(0..8) of integer
    squarestatus, cleverrank: array(0..maxlast) of integer
    lastsquare: integer
    xgap, ygap, radius: integer
    countsquares, attempts, total, best: integer
    clever, pausenow: boolean

 Procedure setup
 Begin
  vectorx(0) = 1
  vectory(0) = -2
  vectorx(1) = 2
  vectory(1) = -1
  vectorx(2) = 2
  vectory(2) = 1
  vectorx(3) = 1
  vectory(3) = 2
  vectorx(4) = -1
  vectory(4) = 2
  vectorx(5) = -2
  vectory(5) = 1
  vectorx(6) = -2
  vectory(6) = -1
  vectorx(7) = -1
  vectory(7) = -2
  xgap = (1000 - 2 * margin) / width
  ygap = (1000 - 2 * margin) / height
  IF xgap <= ygap THEN
   radius = xgap * 2 / 5
  ELSE
   radius = ygap * 2 / 5
  lastsquare = width * height - 1
 End

 Function findx(s: integer): integer
 Begin
  result = s mod width
 End

 Function findy(s: integer): integer
 Begin
  result = s div width
 End

 Function findsquare(x, y: integer): integer
 Begin
  result = y * width + x
 End

 Procedure drawsquare(s: integer)
 Begin
  SETXY(margin + xgap * findx(s) + xgap / 2, margin + ygap * findy(s) + ygap / 2)
  IF squarestatus(s) = 0 THEN
   begin
    COLOUR(salmon)
    blot(radius)
   end
  ELSE
   begin
    COLOUR(white)
    blot(radius)
    IF width > 10 THEN
     begin
      IF squarestatus(s) < 10 THEN
       MOVEXY(-8, -20)
      ELSE
      IF squarestatus(s) < 100 THEN
       MOVEXY(-15, -20)
      ELSE
       MOVEXY(-22, -20)
      COLOUR(black)
      print(STR$(squarestatus(s)), 4, 20)
     end
    ELSE
     begin
      IF squarestatus(s) < 10 THEN
       MOVEXY(-10, -24)
      ELSE
      IF squarestatus(s) < 100 THEN
       MOVEXY(-20, -24)
      ELSE
       MOVEXY(-30, -24)
      COLOUR(black)
      print(STR$(squarestatus(s)), 4, 25)
     end
   end
 End

 Procedure drawboard
 Var s: integer
 Begin
  BLANK(darkgreen)
  FOR s = 0 TO lastsquare
   drawsquare(s)
 End

 Function goodmove(s, direction: integer): integer
 Var newx, newy: integer
 Begin
  newx = findx(s) + vectorx(direction)
  newy = findy(s) + vectory(direction)
  IF (newx >= 0) and (newx < width) and (newy >= 0) and (newy < height) THEN
   begin
    result = findsquare(newx, newy)
    IF squarestatus(result) > 0 THEN
     result = -1
   end
  ELSE
   result = -1
 End

 Function moveto(s, direction: integer): integer
 Var newx, newy: integer
     newn: integer
     d: integer
 Begin
  newx = findx(s) + vectorx(direction)
  newy = findy(s) + vectory(direction)
  result = findsquare(newx, newy)
  IF clever THEN
   FOR d = 0 TO 7
    begin
     newn = goodmove(result, d)
     IF newn > -1 THEN
      dec(cleverrank(newn))
    end
 End

 Procedure clearboard
 Var s, d: integer
 Begin
  FOR s = 0 TO lastsquare
   squarestatus(s) = 0
  IF clever THEN
   FOR s = 0 TO lastsquare
    begin
     cleverrank(s) = 0
     FOR d = 0 TO 7
      IF goodmove(s, d) > -1 THEN
       inc(cleverrank(s))
    end
 End

 Function randommove(s: integer): integer
 Var d: integer
 Begin
  REPEAT
   d = random(8)
  UNTIL (goodmove(s, d) > -1) OR (time >= timelimit)
  result = d
 End

 Function clevermove(s: integer): integer
 Var chosen, d, news: integer
     bestrank, numbest: integer
 Begin
  chosen = -1
  bestrank = 9
  FOR d = 0 TO 8
   begin
    news = goodmove(s, d)
    IF news > -1 THEN
     IF cleverrank(news) < bestrank THEN
      begin
       chosen = d
       bestrank = cleverrank(news)
       numbest = 1
      end
     ELSE
     IF cleverrank(news) = bestrank THEN
      begin
       inc(numbest)
       IF random(numbest) = 0 THEN
        chosen = d
      end
   end
  result = chosen
 End

 Procedure findroute
 Var thiss, s, d: integer
 Begin
  countsquares = 1
  thiss = random(lastsquare + 1)
  squarestatus(thiss) = countsquares
  timeset(0)
  while time < timelimit
   begin
    IF clever THEN
     d = clevermove(thiss)
    ELSE
     d = randommove(thiss)
    IF (time < timelimit) and (d > -1) THEN
     begin
      thiss = moveto(thiss, d)
      inc(countsquares)
      squarestatus(thiss) = countsquares
      IF drawall THEN
       drawsquare(thiss)
     end
   end
 End

BEGIN
 WRITE("Random search or Clever search? (R/C) ")
 REPEAT
 UNTIL (abs(?key) = \r) OR (abs(?key) = \c)
 clever = (abs(?key) = \c)
 IF clever THEN
  WRITELN("  Clever ...")
 ELSE
  WRITELN("  Random ...")
 setup
 IF lastsquare > maxlast THEN
  WRITELN("Error: maximum board size is " + STR$(maxlast + 1) + " squares")
 ELSE
  begin
   attempts = 0
   total = 0
   best = 0
   REPEAT
    inc(attempts)
    clearboard
    IF drawall THEN
     drawboard
    findroute
    total = total + countsquares
    pausenow = (countsquares > best)
    IF countsquares > best THEN
     begin
      drawboard
      best = countsquares
      WRITE("Attempt ")
      WRITE(STR$(attempts))
      WRITE(", score: ")
      WRITE(STR$(countsquares))
      IF attempts > 1 THEN
       begin
        WRITE("   (average of all attempts: ")
        WRITE(QSTR$(total, attempts, 2))
        WRITELN(")")
       end
      ELSE
       WRITELN("")
      update
     end
    IF pausenow THEN
     PAUSE(pauseonbest)
    noupdate
   UNTIL best = width * height
  end
END.
