maxcol: Final[int] = 40
scale: Final[int] = 250
pixels: Final[int] = 750
xcentre: Final[int] = -500000
ycentre: Final[int] = 0
spectrum: Final[int] = 8
spectcol: List[int, spectrum]
boundary: List[int, spectrum]

def colsetup ():
  spectcol[0] = violet
  spectcol[1] = blue
  spectcol[2] = cyan
  spectcol[3] = lime
  spectcol[4] = yellow
  spectcol[5] = orange
  spectcol[6] = red
  spectcol[7] = violet
  for n in range(0, spectrum, 1):
    boundary[n] = divmult(maxcol, spectrum, n)

def mixcolour (n: int) -> int:
  col2: int = 1
  while (boundary[col2] < n) and (col2 != spectrum):
    col2 = col2 + 1
  col1: int = col2 - 1
  return mixcols(spectcol[col1], spectcol[col2], boundary[col2] - n, n - boundary[col1])

colsetup()
xstart: int = divmult(xcentre, 1000000, scale) - pixels / 2
ystart: int = divmult(ycentre, 1000000, scale) - pixels / 2
xfinish: int = xstart + pixels - 1
yfinish: int = ystart + pixels - 1
canvas(xstart, ystart, pixels, pixels)
resolution(pixels, pixels)
timeset(0)
for a in range(xstart, xfinish, 1):
  noupdate()
  for b in range (ystart, yfinish, 1):
    x: int = a
    y: int = b
    iterations: int = 0
    while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol):
      temp: int = divmult(x + y, scale, x - y)
      y = divmult(2 * x, scale, y) + b
      x = temp + a
      iterations = iterations + 1
    if iterations > maxcol:
      pixset(a, b, black)
    else:
      pixset(a, b, mixcolour(iterations))
  update()
writeline('Resolution: ' + str(scale * 3) + ' Time taken: ' + qstr(time(), 1000, 1) + ' seconds.')
