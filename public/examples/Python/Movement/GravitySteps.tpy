# draws n steps
def steps (n: int):
  size: int = 1000 / n
  setxy(0, 1000)
  thickness(1)
  for count in range(0, n * 2, 1):
    if count % 2 == 1:
      movexy(0, -size)
    else:
      movexy(size, 0)
  movexy(0, n * size)
  movexy(-n * size, 0)
  colour(blue)
  polygon(n * 2 + 2)

# simulates the movement of a ball with the effect of gravity
def throwBall (xVelocity: int, yVelocity: int, gravity: int, floor: int):
  global turty
  turty = turty - 1
  while (turty != floor):
    colour(white)
    blot(25)
    movexy(xVelocity, yVelocity)
    yVelocity = yVelocity + gravity
    if turty > floor:
      turty = floor
    colour(red)
    blot(24)
    update()
    pause(10)
    noupdate()

# draw steps
steps(10)
# set starting point
setxy(950, 75)
# throw ball down each step
while not(turtx < 75):
  throwBall(-2, -22, 1, turty + 100)
# bounce ball on the ground
for count in range(0, 10, 1):
  throwBall(0, count * 2 - 18, 1, turty)
