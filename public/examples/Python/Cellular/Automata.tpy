width: int = 100
height: int = 100
nextState: List[int]
cellColour: List[int]
rule: int
generation: int

def setup (ruleCode: int):
  for neighbour in range(0, 8, 1):
    nextState[neighbour] = ruleCode % 2
    ruleCode = ruleCode // 2

def nextGeneration (generation: int):
  xMod: int
  thisPixelColour: int
  n1: int
  n2: int
  n3: int
  for x in range(-1, width + 1, 1):
    xMod = (x + width) % width
    thisPixelColour = pixcol(xMod, g - 1) & 1
    n3 = n2 * 2 + thisPixelColour
    n2 = n1 * 2 + thisPixelColour
    n1 = thisPixelColour
    if (x > 0):
      pixset(x - 1, g, cellColour[nextState[n3]])

canvas(0, 0, width, height)
resolution(width, height)
cellColour[0] = 0xFFFFFE
cellColour[1] = 0x000001
for n in range(4, 46, 1):
  rule = n * 4 + 2
  setup(rule)
  noupdate()
  blank(white)
  for x in range(0, width, 1):
    pixset(x, 0, cellColour[randint(2)])
  for generation in range(1, height, 1):
    nextGeneration(generation)
  setxy(0, height - 15)
  box(25 + length(str(rule)) * 7, 14, cream, false)
  print('Rule ' + str(rule), 4, 8)
  update()
  pause(500)
