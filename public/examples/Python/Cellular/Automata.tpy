width = 100
height = 100
nextState: List[int, 8]
cellColour: List[int, 2]
rule
generation

def setup (ruleCode):
  for neighbour in range(8):
    nextState[neighbour] = ruleCode % 2
    ruleCode = ruleCode // 2

def nextGeneration (generation):
  xMod
  thisPixelColour
  n1
  n2
  n3
  for x in range(-1, width + 1):
    xMod = (x + width) % width
    thisPixelColour = pixcol(xMod, generation - 1) & 1
    n3 = n2 * 2 + thisPixelColour
    n2 = n1 * 2 + thisPixelColour
    n1 = thisPixelColour
    if (x > 0):
      pixset(x - 1, generation, cellColour[nextState[n3]])

canvas(0, 0, width, height)
resolution(width, height)
cellColour[0] = 0xFFFFFE
cellColour[1] = 0x000001
for n in range(4, 46):
  rule = n * 4 + 2
  setup(rule)
  noupdate()
  blank(white)
  for x in range(width):
    pixset(x, 0, cellColour[randint(0, 1)])
  for generation in range(1, height):
    nextGeneration(generation)
  setxy(0, height - 15)
  box(25 + len(str(rule)) * 7, 14, cream, False)
  display('Rule ' + str(rule), 4, 8)
  update()
  pause(500)