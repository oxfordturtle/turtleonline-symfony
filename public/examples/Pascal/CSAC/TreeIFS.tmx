{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"TreeIFS",
  "author":"meriv",
  "date":"28/07/2020",
  "time":"08:29:53",
  "code":"PROGRAM TreeIFS;\nCONST xleft = 0;\n      xright = 999;\n      ytop = 0;\n      ybottom = 999;\n      scaledown = 4;\n      mappings = 5;\n      title = 'Tree';\n      live = green;\n      copied = emerald;\n      pauseval = 2000;\nVAR xl, xr, yt, yb: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    iteration, starttime: integer;\n    count, numborn, numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 1000;\n    mapxx[1] := 195;\n    mapyx[1] := 344;\n    mapxy[1] := -488;\n    mapyy[1] := 443;\n    mapxc[1] := 443;\n    mapyc[1] := 245;\n    mapxx[2] := 462;\n    mapyx[2] := -252;\n    mapxy[2] := 414;\n    mapyy[2] := 361;\n    mapxc[2] := 251;\n    mapyc[2] := 569;\n    mapxx[3] := -58;\n    mapyx[3] := 453;\n    mapxy[3] := -70;\n    mapyy[3] := -111;\n    mapxc[3] := 598;\n    mapyc[3] := 97;\n    mapxx[4] := -35;\n    mapyx[4] := -469;\n    mapxy[4] := 70;\n    mapyy[4] := -22;\n    mapxc[4] := 488;\n    mapyc[4] := 507;\n    mapxx[5] := -637;\n    mapyx[5] := 0;\n    mapxy[5] := 0;\n    mapyy[5] := 501;\n    mapxc[5] := 856;\n    mapyc[5] := 251\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) <> white then\n          begin\n            map(mapnum, x, y, newx, newy);\n            if pixcol(newx, newy) = white then\n              inc(numborn);\n            pixset(newx, newy, copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x, y: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        if pixcol(x, y) = live then\n          begin\n            pixset(x, y, white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x, y) = copied then\n          pixset(x, y, live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  pixset(1, 1, live);\n  iteration := 0;\n  writeln(title + ' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime := time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration ' + str(iteration) + ':');\n    numborn := 0;\n    for count := 1 to mappings do\n      domap(count);\n    numkilled := 0;\n    cleanup;\n    writeln('  ' + str(numborn) + ' pixels born; ' + str(numkilled) + ' pixels killed');\n    writeln('  (took ' + str((time - starttime) / 1000) + ' seconds - total ' + str(time / 1000) + ' seconds so far)');\n    if (numborn + numkilled > 0) and (pauseval >= 1000) then\n      begin\n        write('  (now pausing ' + qstr(pauseval, 1000, 1) + ' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn + numkilled = 0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.\n",
  "usage":[
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":2, "lines":"77 93"},
        {"name":"update", "level":1, "count":2, "lines":"87 104"},
        {"name":"canvas", "level":2, "count":1, "lines":"110"},
        {"name":"resolution", "level":2, "count":1, "lines":"111"},
        {"name":"pixcol", "level":3, "count":4, "lines":"80 83 96 102"},
        {"name":"pixset", "level":3, "count":4, "lines":"85 98 103 112"}
      ],
      "total":14
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"inc", "level":1, "count":3, "lines":"84 99 118"},
        {"name":"divmult", "level":3, "count":4, "lines":"70 70 71 71"}
      ],
      "total":7
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"write", "level":1, "count":1, "lines":"130"},
        {"name":"writeln", "level":1, "count":7, "lines":"114 119 120 126 127 132 135"}
      ],
      "total":8
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":5, "lines":"120 126 126 127 127"},
        {"name":"qstr", "level":2, "count":1, "lines":"130"}
      ],
      "total":6
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"pause", "level":1, "count":1, "lines":"131"},
        {"name":"time", "level":2, "count":3, "lines":"117 127 127"},
        {"name":"timeset", "level":2, "count":1, "lines":"115"}
      ],
      "total":5
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":5, "lines":"80 83 96 102 128"},
        {"name":"else", "level":1, "count":1, "lines":"101"},
        {"name":"for", "level":1, "count":6, "lines":"61 78 79 94 95 122"},
        {"name":"repeat", "level":2, "count":1, "lines":"116"},
        {"name":"procedure", "level":2, "count":5, "lines":"19 54 68 74 90"}
      ],
      "total":18
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"map", "level":0, "count":1, "lines":"82"},
        {"name":"setmaps", "level":0, "count":1, "lines":"108"},
        {"name":"setscale", "level":0, "count":1, "lines":"109"},
        {"name":"domap", "level":0, "count":1, "lines":"123"},
        {"name":"cleanup", "level":0, "count":1, "lines":"125"}
      ],
      "total":5
    }
  ],
  "pcode":[
    [112,17,1,1,112,0,123,112,6,2,123,4,112,58,124,112,75,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,30,119,29],
    [112,5,119,30],
    [116,37,119,36],
    [112,5,119,37],
    [116,44,119,43],
    [112,5,119,44],
    [116,51,119,50],
    [112,5,119,51],
    [116,58,119,57],
    [112,5,119,58],
    [116,65,119,64],
    [112,5,119,65],
    [128,108],
    [133,1],
    [112,1000,119,28],
    [113,29,112,1,112,1,27,2,127,26,4,112,195,2,123],
    [113,50,112,1,112,1,27,2,127,26,4,112,344,2,123],
    [113,36,112,1,112,1,27,2,127,26,4,112,488,23,2,123],
    [113,57,112,1,112,1,27,2,127,26,4,112,443,2,123],
    [113,43,112,1,112,1,27,2,127,26,4,112,443,2,123],
    [113,64,112,1,112,1,27,2,127,26,4,112,245,2,123],
    [113,29,112,2,112,1,27,2,127,26,4,112,462,2,123],
    [113,50,112,2,112,1,27,2,127,26,4,112,252,23,2,123],
    [113,36,112,2,112,1,27,2,127,26,4,112,414,2,123],
    [113,57,112,2,112,1,27,2,127,26,4,112,361,2,123],
    [113,43,112,2,112,1,27,2,127,26,4,112,251,2,123],
    [113,64,112,2,112,1,27,2,127,26,4,112,569,2,123],
    [113,29,112,3,112,1,27,2,127,26,4,112,58,23,2,123],
    [113,50,112,3,112,1,27,2,127,26,4,112,453,2,123],
    [113,36,112,3,112,1,27,2,127,26,4,112,70,23,2,123],
    [113,57,112,3,112,1,27,2,127,26,4,112,111,23,2,123],
    [113,43,112,3,112,1,27,2,127,26,4,112,598,2,123],
    [113,64,112,3,112,1,27,2,127,26,4,112,97,2,123],
    [113,29,112,4,112,1,27,2,127,26,4,112,35,23,2,123],
    [113,50,112,4,112,1,27,2,127,26,4,112,469,23,2,123],
    [113,36,112,4,112,1,27,2,127,26,4,112,70,2,123],
    [113,57,112,4,112,1,27,2,127,26,4,112,22,23,2,123],
    [113,43,112,4,112,1,27,2,127,26,4,112,488,2,123],
    [113,64,112,4,112,1,27,2,127,26,4,112,507,2,123],
    [113,29,112,5,112,1,27,2,127,26,4,112,637,23,2,123],
    [113,50,112,5,112,1,27,2,127,26,4,112,0,2,123],
    [113,36,112,5,112,1,27,2,127,26,4,112,0,2,123],
    [113,57,112,5,112,1,27,2,127,26,4,112,501,2,123],
    [113,43,112,5,112,1,27,2,127,26,4,112,856,2,123],
    [113,64,112,5,112,1,27,2,127,26,4,112,251,2,123],
    [134,132],
    [133,2],
    [139,13,1],
    [117,13,1,112,1,124],
    [112,0,112,4,29,119,24],
    [112,999,112,4,29,119,25],
    [112,0,112,4,29,119,26],
    [112,999,112,4,29,119,27],
    [112,1],
    [120,13,1,112,5],
    [114,13,1,37,129,62],
    [113,43,114,13,1,112,1,27,2,127,26,4,113,43,114,13,1,112,1,27,2,127,26,4,122,112,4,29,2,123],
    [113,64,114,13,1,112,1,27,2,127,26,4,113,64,114,13,1,112,1,27,2,127,26,4,122,112,4,29,2,123],
    [114,13,1,4,128,57],
    [140,13,134,132],
    [133,3],
    [139,14,5],
    [117,14,1,112,5,124,120,14,5,120,14,4,120,14,3,120,14,2,120,14,1],
    [114,14,2,113,28,113,29,114,14,1,112,1,27,2,127,26,4,122,48,114,14,3,113,28,113,36,114,14,1,112,1,27,2,127,26,4,122,48,26,113,43,114,14,1,112,1,27,2,127,26,4,122,26,121,14,4],
    [114,14,2,113,28,113,50,114,14,1,112,1,27,2,127,26,4,122,48,114,14,3,113,28,113,57,114,14,1,112,1,27,2,127,26,4,122,48,26,113,64,114,14,1,112,1,27,2,127,26,4,122,26,121,14,5],
    [140,14,134,132],
    [133,4],
    [139,15,5],
    [117,15,1,112,5,124,120,15,1],
    [112,0,146],
    [113,26],
    [120,15,3,113,27],
    [114,15,3,37,129,86],
    [113,24],
    [120,15,2,113,25],
    [114,15,2,37,129,85],
    [114,15,2,114,15,3,99,112,16777215,33,129,84],
    [114,15,1,114,15,2,114,15,3,117,15,4,117,15,5,131,63],
    [114,15,4,114,15,5,99,112,16777215,32,129,83],
    [116,74,1,122,4,2,123],
    [114,15,4,114,15,5,112,51543,100],
    [114,15,2,4,128,77],
    [114,15,3,4,128,74],
    [112,-1,146],
    [140,15,134,132],
    [133,5],
    [139,16,2],
    [117,16,1,112,2,124],
    [112,0,146],
    [113,26],
    [120,16,2,113,27],
    [114,16,2,37,129,106],
    [113,24],
    [120,16,1,113,25],
    [114,16,1,37,129,105],
    [114,16,1,114,16,2,99,112,2263842,32,129,102],
    [114,16,1,114,16,2,112,16777215,100],
    [116,75,1,122,4,2,123],
    [128,104],
    [114,16,1,114,16,2,99,112,51543,32,129,104],
    [114,16,1,114,16,2,112,2263842,100],
    [114,16,1,4,128,96],
    [114,16,2,4,128,93],
    [112,-1,146],
    [140,16,134,132],
    [131,16],
    [131,49],
    [113,24,113,26,113,25,113,24,27,112,1,26,113,27,113,26,27,112,1,26,144],
    [113,25,113,24,27,112,1,26,113,27,113,26,27,112,1,26,145],
    [112,1,112,1,112,2263842,100],
    [112,0,119,71],
    [118,4,84,114,101,101,118,21,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,64,169,170,142],
    [112,0,173],
    [172,119,72],
    [116,71,1,122,4,2,123],
    [118,0,169,170,142],
    [118,10,73,116,101,114,97,116,105,111,110,32,113,71,11,64,112,58,9,64,169,170,142],
    [112,0,119,74],
    [112,1],
    [119,73,112,5],
    [113,73,37,129,126],
    [113,73,131,69],
    [113,73,4,128,122],
    [112,0,119,75],
    [131,88],
    [118,2,32,32,113,74,11,64,118,14,32,112,105,120,101,108,115,32,98,111,114,110,59,32,64,113,75,11,64,118,14,32,112,105,120,101,108,115,32,107,105,108,108,101,100,64,169,170,142],
    [118,8,32,32,40,116,111,111,107,32,172,113,72,27,112,1000,29,11,64,118,17,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,64,172,112,1000,29,11,64,118,16,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,64,169,170,142],
    [113,74,113,75,26,112,0,35,112,2000,112,1000,37,17,129,134],
    [118,15,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,112,2000,112,1000,112,1,14,64,118,41,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,64,169,142],
    [112,2000,174],
    [118,0,169,170,142],
    [113,74,113,75,26,112,0,32,129,116],
    [118,58,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,169,170,142],
    [130]
  ]
}
