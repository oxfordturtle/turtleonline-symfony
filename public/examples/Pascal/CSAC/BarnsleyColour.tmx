{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"BarnsleyColour",
  "author":"meriv",
  "date":"28/07/2020",
  "time":"08:24:27",
  "code":"PROGRAM BarnsleyColour;\nCONST xleft = -236;\n      xright = 263;\n      ytop = 1;\n      ybottom = 1000;\n      scaledown = 3;\n      mappings = 4;\n      title = 'Barnsley fern';\n      gridlines = 5;\n      gridthick = 32;\nVAR xl, xr, yt, yb, gt: integer;\n    coeffdiv: integer;\n    mapxx, mapxy, mapxc: array[1..mappings] of integer;\n    mapyx, mapyy, mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv := 100;\n    mapxx[1] := 0;\n    mapyx[1] := 0;\n    mapxy[1] := 0;\n    mapyy[1] := 16;\n    mapxc[1] := 0;\n    mapyc[1] := 0;\n    mapxx[2] := 85;\n    mapyx[2] := -4;\n    mapxy[2] := 4;\n    mapyy[2] := 85;\n    mapxc[2] := 0;\n    mapyc[2] := 160;\n    mapxx[3] := 20;\n    mapyx[3] := 23;\n    mapxy[3] := -26;\n    mapyy[3] := 22;\n    mapxc[3] := 0;\n    mapyc[3] := 160;\n    mapxx[4] := -15;\n    mapyx[4] := 26;\n    mapxy[4] := 28;\n    mapyy[4] := 24;\n    mapxc[4] := 0;\n    mapyc[4] := 44\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl := xleft / scaledown;\n    xr := xright / scaledown;\n    yt := ytop / scaledown;\n    yb := ybottom / scaledown;\n    for i := 1 to mappings do\n      begin\n        mapxc[i] := mapxc[i] / scaledown;\n        mapyc[i] := mapyc[i] / scaledown\n      end;\n    gt := gridthick / scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x, y: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x := 1 to gridlines - 1 do\n      begin\n        setxy(xl + divmult(xr - xl, gridlines, x), yt);\n        drawxy(0, yb - yt)\n      end;\n    for y := 1 to gridlines - 1 do\n      begin\n        setxy(xl + gt / 2, yt + divmult(yb - yt, gridlines, y));\n        drawxy(xr - xl - gt, 0)\n      end;\n    colour(black);\n    setxy(xl, yt);\n    drawxy(xr - xl, 0);\n    drawxy(0, yb - yt);\n    drawxy(xl - xr, 0);\n    drawxy(0, yt- yb);\n    for x := 0 to gridlines - 1 do\n      for y := 0 to gridlines - 1 do\n        recolour(xl + divmult(xr - xl, gridlines, x) + gt,\n                 yt + divmult(yb - yt, gridlines, y) + gt,\n                 divmult(255, gridlines - 1, x) * $10000\n                 + divmult(255, gridlines - 1, y) * $100\n                 + divmult(255, 2 * gridlines - 2, 2 * gridlines - 2 - x - y) * $1)\n  End;\n\n  Procedure map(a, x, y: integer; var newx, newy: integer);\n  Begin\n    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];\n    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x, y, newx, newy: integer;\n  Begin\n    noupdate;\n    for y := yt to yb do\n      for x := xl to xr do\n        begin\n          map(mapnum, x, y, newx, newy);\n          pixset(newx, newy, pixcol(x, y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl, yt, xr - xl + 1, yb - yt + 1);\n  resolution(xr - xl + 1, yb - yt + 1);\n  background(6);\n  writeln(title + ' mappings in colour');\n  for count := 1 to mappings do\n    domap(count)\nEND.\n",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"drawxy", "level":2, "count":6, "lines":"69 74 78 79 80 81"}
      ],
      "total":6
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":3, "lines":"68 73 77"}
      ],
      "total":3
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":2, "lines":"65 76"},
        {"name":"thickness", "level":1, "count":1, "lines":"64"}
      ],
      "total":3
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":1, "lines":"100"},
        {"name":"update", "level":1, "count":1, "lines":"107"},
        {"name":"canvas", "level":2, "count":1, "lines":"113"},
        {"name":"resolution", "level":2, "count":1, "lines":"114"},
        {"name":"pixcol", "level":3, "count":1, "lines":"105"},
        {"name":"pixset", "level":3, "count":1, "lines":"105"},
        {"name":"recolour", "level":3, "count":1, "lines":"84"}
      ],
      "total":7
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"divmult", "level":3, "count":11, "lines":"68 73 84 85 86 87 88 93 93 94 94"}
      ],
      "total":11
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"writeln", "level":1, "count":1, "lines":"116"}
      ],
      "total":1
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"for", "level":1, "count":8, "lines":"53 66 71 82 83 101 102 117"},
        {"name":"procedure", "level":2, "count":5, "lines":"17 46 61 91 97"}
      ],
      "total":13
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"map", "level":0, "count":1, "lines":"104"},
        {"name":"setmaps", "level":0, "count":1, "lines":"111"},
        {"name":"setscale", "level":0, "count":1, "lines":"112"},
        {"name":"background", "level":0, "count":1, "lines":"115"},
        {"name":"domap", "level":0, "count":1, "lines":"118"}
      ],
      "total":5
    }
  ],
  "pcode":[
    [112,17,1,1,112,0,123,112,6,2,123,4,112,49,124,112,66,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,31,119,30],
    [112,4,119,31],
    [116,37,119,36],
    [112,4,119,37],
    [116,43,119,42],
    [112,4,119,43],
    [116,49,119,48],
    [112,4,119,49],
    [116,55,119,54],
    [112,4,119,55],
    [116,61,119,60],
    [112,4,119,61],
    [128,113],
    [133,1],
    [112,100,119,29],
    [113,30,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,48,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,36,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,54,112,1,112,1,27,2,127,26,4,112,16,2,123],
    [113,42,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,60,112,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,30,112,2,112,1,27,2,127,26,4,112,85,2,123],
    [113,48,112,2,112,1,27,2,127,26,4,112,4,23,2,123],
    [113,36,112,2,112,1,27,2,127,26,4,112,4,2,123],
    [113,54,112,2,112,1,27,2,127,26,4,112,85,2,123],
    [113,42,112,2,112,1,27,2,127,26,4,112,0,2,123],
    [113,60,112,2,112,1,27,2,127,26,4,112,160,2,123],
    [113,30,112,3,112,1,27,2,127,26,4,112,20,2,123],
    [113,48,112,3,112,1,27,2,127,26,4,112,23,2,123],
    [113,36,112,3,112,1,27,2,127,26,4,112,26,23,2,123],
    [113,54,112,3,112,1,27,2,127,26,4,112,22,2,123],
    [113,42,112,3,112,1,27,2,127,26,4,112,0,2,123],
    [113,60,112,3,112,1,27,2,127,26,4,112,160,2,123],
    [113,30,112,4,112,1,27,2,127,26,4,112,15,23,2,123],
    [113,48,112,4,112,1,27,2,127,26,4,112,26,2,123],
    [113,36,112,4,112,1,27,2,127,26,4,112,28,2,123],
    [113,54,112,4,112,1,27,2,127,26,4,112,24,2,123],
    [113,42,112,4,112,1,27,2,127,26,4,112,0,2,123],
    [113,60,112,4,112,1,27,2,127,26,4,112,44,2,123],
    [134,132],
    [133,2],
    [139,13,1],
    [117,13,1,112,1,124],
    [112,-236,112,3,29,119,24],
    [112,263,112,3,29,119,25],
    [112,1,112,3,29,119,26],
    [112,1000,112,3,29,119,27],
    [112,1],
    [120,13,1,112,4],
    [114,13,1,37,129,56],
    [113,42,114,13,1,112,1,27,2,127,26,4,113,42,114,13,1,112,1,27,2,127,26,4,122,112,3,29,2,123],
    [113,60,114,13,1,112,1,27,2,127,26,4,113,60,114,13,1,112,1,27,2,127,26,4,122,112,3,29,2,123],
    [114,13,1,4,128,51],
    [112,32,112,3,29,119,28],
    [140,13,134,132],
    [133,3],
    [139,14,3],
    [117,14,1,112,3,124,120,14,1],
    [113,28,85],
    [112,4210752,87],
    [112,1],
    [120,14,2,112,5,112,1,27],
    [114,14,2,37,129,69],
    [113,24,113,25,113,24,27,112,5,114,14,2,48,26,113,26,88],
    [112,0,113,27,113,26,27,90],
    [114,14,2,4,128,64],
    [112,1],
    [120,14,3,112,5,112,1,27],
    [114,14,3,37,129,75],
    [113,24,113,28,112,2,29,26,113,26,113,27,113,26,27,112,5,114,14,3,48,26,88],
    [113,25,113,24,27,113,28,27,112,0,90],
    [114,14,3,4,128,70],
    [112,0,87],
    [113,24,113,26,88],
    [113,25,113,24,27,112,0,90],
    [112,0,113,27,113,26,27,90],
    [113,24,113,25,27,112,0,90],
    [112,0,113,26,113,27,27,90],
    [112,0],
    [120,14,2,112,5,112,1,27],
    [114,14,2,37,129,90],
    [112,0],
    [120,14,3,112,5,112,1,27],
    [114,14,3,37,129,89],
    [113,24,113,25,113,24,27,112,5,114,14,2,48,26,113,28,26,113,26,113,27,113,26,27,112,5,114,14,3,48,26,113,28,26,112,255,112,5,112,1,27,114,14,2,48,112,65536,28,112,255,112,5,112,1,27,114,14,3,48,112,256,28,26,112,255,112,2,112,5,28,112,2,27,112,2,112,5,28,112,2,27,114,14,2,27,114,14,3,27,48,112,1,28,26,97],
    [114,14,3,4,128,85],
    [114,14,2,4,128,82],
    [140,14,134,132],
    [133,4],
    [139,15,5],
    [117,15,1,112,5,124,120,15,5,120,15,4,120,15,3,120,15,2,120,15,1],
    [114,15,2,113,29,113,30,114,15,1,112,1,27,2,127,26,4,122,48,114,15,3,113,29,113,36,114,15,1,112,1,27,2,127,26,4,122,48,26,113,42,114,15,1,112,1,27,2,127,26,4,122,26,121,15,4],
    [114,15,2,113,29,113,48,114,15,1,112,1,27,2,127,26,4,122,48,114,15,3,113,29,113,54,114,15,1,112,1,27,2,127,26,4,122,48,26,113,60,114,15,1,112,1,27,2,127,26,4,122,26,121,15,5],
    [140,15,134,132],
    [133,5],
    [139,16,5],
    [117,16,1,112,5,124,120,16,1],
    [112,0,146],
    [113,26],
    [120,16,3,113,27],
    [114,16,3,37,129,111],
    [113,24],
    [120,16,2,113,25],
    [114,16,2,37,129,110],
    [114,16,1,114,16,2,114,16,3,117,16,4,117,16,5,131,91],
    [114,16,4,114,16,5,114,16,2,114,16,3,99,100],
    [114,16,2,4,128,105],
    [114,16,3,4,128,102],
    [112,-1,146],
    [140,16,134,132],
    [131,16],
    [131,43],
    [113,24,113,26,113,25,113,24,27,112,1,26,113,27,113,26,27,112,1,26,144],
    [113,25,113,24,27,112,1,26,113,27,113,26,27,112,1,26,145],
    [112,6,131,58],
    [118,13,66,97,114,110,115,108,101,121,32,102,101,114,110,118,19,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,64,169,170,142],
    [112,1],
    [119,66,112,4],
    [113,66,37,129,124],
    [113,66,131,97],
    [113,66,4,128,120],
    [130]
  ]
}
