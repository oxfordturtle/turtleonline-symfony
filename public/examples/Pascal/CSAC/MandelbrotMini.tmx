{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"MandelbrotMini",
  "author":"meriv",
  "date":"28/07/2020",
  "time":"08:28:31",
  "code":"PROGRAM MandelbrotMini;\nCONST maxcol = 40;\n      scale = 10000;\n      pixels = 300;\n      xcentre = -159200;\n      ycentre = -1033000;\nVAR xstart, xfinish, ystart, yfinish: integer;\n    a, b, x, y: integer;\n    iterations, temp: integer;\n\nBEGIN\n  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;\n  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;\n  xfinish := xstart + pixels - 1;\n  yfinish := ystart + pixels - 1;\n  canvas(xstart, ystart, pixels, pixels);\n  resolution(pixels, pixels);\n  timeset(0);\n  for a := xstart to xfinish do\n    begin\n      noupdate;\n      for b := ystart to yfinish do\n        begin\n          x := a;\n          y := b;\n          iterations := 0;\n          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do\n            begin\n              temp := divmult(x + y, scale, x - y);\n              y := divmult(2 * x, scale, y) + b;\n              x := temp + a;\n              inc(iterations)\n            end;\n          if iterations > maxcol then\n            pixset(a, b, black)\n          else\n            pixset(a, b, rgb(iterations + 1))\n        end;\n      update\n    end;\n  writeln('Resolution: ' + str(scale * 3) + '; Time taken: ' + qstr(time, 1000, 1) + ' seconds.')\nEND.\n",
  "usage":[
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"rgb", "level":3, "count":1, "lines":"37"}
      ],
      "total":1
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":1, "lines":"21"},
        {"name":"update", "level":1, "count":1, "lines":"39"},
        {"name":"canvas", "level":2, "count":1, "lines":"16"},
        {"name":"resolution", "level":2, "count":1, "lines":"17"},
        {"name":"pixset", "level":3, "count":2, "lines":"35 37"}
      ],
      "total":6
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"inc", "level":1, "count":1, "lines":"32"},
        {"name":"hypot", "level":2, "count":1, "lines":"27"},
        {"name":"divmult", "level":3, "count":4, "lines":"12 13 29 30"}
      ],
      "total":6
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"writeln", "level":1, "count":1, "lines":"41"}
      ],
      "total":1
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":1, "lines":"41"},
        {"name":"qstr", "level":2, "count":1, "lines":"41"}
      ],
      "total":2
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"time", "level":2, "count":1, "lines":"41"},
        {"name":"timeset", "level":2, "count":1, "lines":"18"}
      ],
      "total":2
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":1, "lines":"34"},
        {"name":"else", "level":1, "count":1, "lines":"36"},
        {"name":"for", "level":1, "count":2, "lines":"19 22"},
        {"name":"while", "level":2, "count":1, "lines":"27"}
      ],
      "total":5
    }
  ],
  "pcode":[
    [112,12,1,1,112,0,123,112,6,2,123,4,112,16,124,112,28,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [112,-159200,112,1000000,112,10000,48,112,300,112,2,29,27,119,19],
    [112,-1033000,112,1000000,112,10000,48,112,300,112,2,29,27,119,21],
    [113,19,112,300,26,112,1,27,119,20],
    [113,21,112,300,26,112,1,27,119,22],
    [113,19,113,21,112,300,112,300,144],
    [112,300,112,300,145],
    [112,0,173],
    [113,19],
    [119,23,113,20],
    [113,23,37,129,33],
    [112,0,146],
    [113,21],
    [119,24,113,22],
    [113,24,37,129,31],
    [113,23,119,25],
    [113,24,119,26],
    [112,0,119,27],
    [113,25,113,26,112,1,50,112,2,112,10000,28,34,113,27,112,40,36,17,129,26],
    [113,25,113,26,26,112,10000,113,25,113,26,27,48,119,28],
    [112,2,113,25,28,112,10000,113,26,48,113,24,26,119,26],
    [113,28,113,23,26,119,25],
    [116,27,1,122,4,2,123],
    [128,20],
    [113,27,112,40,35,129,29],
    [113,23,113,24,112,0,100],
    [128,30],
    [113,23,113,24,113,27,112,1,26,101,100],
    [113,24,4,128,15],
    [112,-1,146],
    [113,23,4,128,11],
    [118,12,82,101,115,111,108,117,116,105,111,110,58,32,112,10000,112,3,28,11,64,118,14,59,32,84,105,109,101,32,116,97,107,101,110,58,32,64,172,112,1000,112,1,14,64,118,9,32,115,101,99,111,110,100,115,46,64,169,170,142],
    [130]
  ]
}
