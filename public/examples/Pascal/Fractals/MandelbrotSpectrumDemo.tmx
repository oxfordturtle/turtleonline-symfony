{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Mandelbrot spectral colours",
  "author":"Peter Millican",
  "date":"28/07/2020",
  "time":"13:25:10",
  "code":"PROGRAM MandelbrotSpectrumDemo;\nCONST maxcol=40;\n      spectrum=7;\nVAR xcentre,ycentre: integer;\n    xstart,xfinish,ystart,yfinish: integer;\n    a,b,x,y: integer;\n    iterations,temp: integer;\n    scale,pixels: integer;\n    spectcol: array[0..spectrum] of integer;\n    boundary: array[0..spectrum] of integer;\n\n Procedure startprompt;\n Begin\n  output(true,cream,true);\n  keyecho(false);\n  writeln('MANDELBROT SET DISPLAY PROGRAM');\n  writeln('');\n  write('Select Whole set, or Zoom on mini \"lake\" at -0.1592,-1.0330 (W/Z)');\n  repeat\n  until (abs(?key)=\\w) or (abs(?key)=\\z);\n  writeln(chr(abs(?key)));\n  if abs(?key)=\\w then\n   begin\n    xcentre:=-500000;\n    ycentre:=0\n   end\n  else\n   begin\n    xcentre:=-159200;\n    ycentre:=-1033000\n   end;\n  writeln('');\n  if ycentre=0 then\n   write('Select Fast/Medium/Slow, giving resolution 300/750/1500: (F/M/S) ')\n  else\n   write('Select Fast/Medium/Slow, giving resolution 300/600/1200: (F/M/S) ');\n  repeat\n  until (abs(?key)=\\f) or (abs(?key)=\\m) or (abs(?key)=\\s);\n  writeln(chr(abs(?key)));\n  if ycentre=0 then\n   begin\n    if abs(?key)=\\f then\n     scale:=100\n    else\n    if abs(?key)=\\m then\n     scale:=250\n    else\n     scale:=500;\n    pixels:=scale*3\n   end\n  else\n   begin\n    if abs(?key)=\\f then\n     scale:=10000\n    else\n    if abs(?key)=\\m then\n     scale:=20000\n    else\n     scale:=40000;\n    pixels:=scale/100*3\n   end;\n  output(false,white,false)\n End;\n\n Procedure colsetup;\n Var n: integer;\n Begin\n  spectcol[0]:=violet;\n  spectcol[1]:=blue;\n  spectcol[2]:=cyan;\n  spectcol[3]:=lime;\n  spectcol[4]:=yellow;\n  spectcol[5]:=orange;\n  spectcol[6]:=red;\n  spectcol[7]:=violet;\n  for n:=0 to spectrum do\n   boundary[n]:=divmult(maxcol,spectrum,n)\n End;\n\n Function mixcolour(n: integer): integer;\n Var col1,col2: integer;\n     mix1,mix2: integer;\n Begin\n  col2:=0;\n  repeat\n   inc(col2)\n  until (boundary[col2]>=n) or (col2=spectrum);\n  col1:=col2-1;\n  result:=mixcols(spectcol[col1],spectcol[col2],boundary[col2]-n,n-boundary[col1])\n End;\n\nBEGIN\n startprompt;\n colsetup;\n xstart:=divmult(xcentre,1000000,scale)-pixels/2;\n ystart:=divmult(ycentre,1000000,scale)-pixels/2;\n xfinish:=xstart+pixels-1;\n yfinish:=ystart+pixels-1;\n writeln('Mandelbrot will be plotted over the following real range:');\n write(qstr(xstart,scale,4)+' < x < '+qstr(xfinish,scale,4)+'    ');\n writeln(qstr(ystart,scale,4)+' < y < '+qstr(yfinish,scale,4));\n writeln('Scaling factor: '+str(scale)+'    Image resolution: '+str(pixels)+'x'+str(pixels));\n canvas(xstart,ystart,pixels,pixels);\n resolution(pixels,pixels);\n timeset(0);\n for a:=xstart to xfinish do\n  begin\n   noupdate;\n   for b:=ystart to yfinish do\n    begin\n     x:=a;\n     y:=b;\n     iterations:=0;\n     while (hypot(x,y,1)<2*scale) and (iterations<=maxcol) do\n      begin\n       temp:=divmult(x+y,scale,x-y);\n       y:=divmult(2*x,scale,y)+b;\n       x:=temp+a;\n       inc(iterations)\n      end;\n     if iterations>maxcol then\n      pixset(a,b,black)\n     else\n      pixset(a,b,mixcolour(iterations))\n    end;\n   update\n  end;\n writeln('Time taken: '+qstr(time,1000,1)+' seconds.')\nEND.",
  "usage":[
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"output", "level":2, "count":2, "lines":"14 62"},
        {"name":"mixcols", "level":3, "count":1, "lines":"89"}
      ],
      "total":3
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":1, "lines":"108"},
        {"name":"update", "level":1, "count":1, "lines":"126"},
        {"name":"canvas", "level":2, "count":1, "lines":"103"},
        {"name":"resolution", "level":2, "count":1, "lines":"104"},
        {"name":"pixset", "level":3, "count":2, "lines":"122 124"}
      ],
      "total":6
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"abs", "level":1, "count":12, "lines":"20 20 21 22 38 38 38 39 42 45 53 56"},
        {"name":"inc", "level":1, "count":2, "lines":"86 119"},
        {"name":"hypot", "level":2, "count":1, "lines":"114"},
        {"name":"divmult", "level":3, "count":5, "lines":"77 95 96 116 117"}
      ],
      "total":20
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"write", "level":1, "count":4, "lines":"18 34 36 100"},
        {"name":"writeln", "level":1, "count":9, "lines":"16 17 21 32 39 99 101 102 128"}
      ],
      "total":13
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":3, "lines":"102 102 102"},
        {"name":"qstr", "level":2, "count":5, "lines":"100 100 101 101 128"},
        {"name":"chr", "level":3, "count":2, "lines":"21 39"}
      ],
      "total":10
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"keyecho", "level":2, "count":1, "lines":"15"},
        {"name":"time", "level":2, "count":1, "lines":"128"},
        {"name":"timeset", "level":2, "count":1, "lines":"105"}
      ],
      "total":3
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":8, "lines":"22 33 40 42 45 53 56 121"},
        {"name":"else", "level":1, "count":8, "lines":"27 35 44 47 51 55 58 123"},
        {"name":"for", "level":1, "count":3, "lines":"76 106 109"},
        {"name":"repeat", "level":2, "count":3, "lines":"19 37 85"},
        {"name":"while", "level":2, "count":1, "lines":"114"},
        {"name":"procedure", "level":2, "count":2, "lines":"12 65"},
        {"name":"function", "level":3, "count":1, "lines":"80"}
      ],
      "total":26
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"startprompt", "level":0, "count":1, "lines":"93"},
        {"name":"colsetup", "level":0, "count":1, "lines":"94"},
        {"name":"mixcolour", "level":0, "count":1, "lines":"124"}
      ],
      "total":3
    }
  ],
  "pcode":[
    [112,16,1,1,112,0,123,112,6,2,123,4,112,40,124,112,56,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,38,119,37],
    [112,8,119,38],
    [116,48,119,47],
    [112,8,119,48],
    [128,75],
    [133,1],
    [112,-1,112,16777147,112,-1,166],
    [112,0,165],
    [118,30,77,65,78,68,69,76,66,82,79,84,32,83,69,84,32,68,73,83,80,76,65,89,32,80,82,79,71,82,65,77,169,170,142],
    [118,0,169,170,142],
    [118,65,83,101,108,101,99,116,32,87,104,111,108,101,32,115,101,116,44,32,111,114,32,90,111,111,109,32,111,110,32,109,105,110,105,32,34,108,97,107,101,34,32,97,116,32,45,48,46,49,53,57,50,44,45,49,46,48,51,51,48,32,40,87,47,90,41,169,142],
    [112,-9,160,24,112,87,32,112,-9,160,24,112,90,32,18,129,14],
    [112,-9,160,24,9,169,170,142],
    [112,-9,160,24,112,87,32,129,20],
    [112,500000,23,119,23],
    [112,0,119,24],
    [128,22],
    [112,159200,23,119,23],
    [112,1033000,23,119,24],
    [118,0,169,170,142],
    [113,24,112,0,32,129,26],
    [118,65,83,101,108,101,99,116,32,70,97,115,116,47,77,101,100,105,117,109,47,83,108,111,119,44,32,103,105,118,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,51,48,48,47,55,53,48,47,49,53,48,48,58,32,40,70,47,77,47,83,41,32,169],
    [128,27],
    [118,65,83,101,108,101,99,116,32,70,97,115,116,47,77,101,100,105,117,109,47,83,108,111,119,44,32,103,105,118,105,110,103,32,114,101,115,111,108,117,116,105,111,110,32,51,48,48,47,54,48,48,47,49,50,48,48,58,32,40,70,47,77,47,83,41,32,169,142],
    [112,-9,160,24,112,70,32,112,-9,160,24,112,77,32,18,112,-9,160,24,112,83,32,18,129,27],
    [112,-9,160,24,9,169,170,142],
    [113,24,112,0,32,129,39],
    [112,-9,160,24,112,70,32,129,33],
    [112,100,119,35],
    [128,37],
    [112,-9,160,24,112,77,32,129,36],
    [112,250,119,35],
    [128,37],
    [112,500,119,35],
    [113,35,112,3,28,119,36],
    [128,47],
    [112,-9,160,24,112,70,32,129,42],
    [112,10000,119,35],
    [128,46],
    [112,-9,160,24,112,77,32,129,45],
    [112,20000,119,35],
    [128,46],
    [112,40000,119,35],
    [113,35,112,100,29,112,3,28,119,36],
    [112,0,112,16777215,112,0,166],
    [134,132],
    [133,2],
    [139,13,1],
    [117,13,1,112,1,124],
    [113,37,112,0,2,127,26,4,112,9055202,2,123],
    [113,37,112,1,2,127,26,4,112,255,2,123],
    [113,37,112,2,2,127,26,4,112,65535,2,123],
    [113,37,112,3,2,127,26,4,112,65280,2,123],
    [113,37,112,4,2,127,26,4,112,16776960,2,123],
    [113,37,112,5,2,127,26,4,112,16755200,2,123],
    [113,37,112,6,2,127,26,4,112,16711680,2,123],
    [113,37,112,7,2,127,26,4,112,9055202,2,123],
    [112,0],
    [120,13,1,112,7],
    [114,13,1,37,129,65],
    [113,47,114,13,1,2,127,26,4,112,40,112,7,114,13,1,48,2,123],
    [114,13,1,4,128,61],
    [140,13,134,132],
    [133,3],
    [139,14,6],
    [117,14,1,112,6,124,120,14,2],
    [112,0,120,14,4],
    [117,14,4,1,122,4,2,123],
    [113,47,114,14,4,2,127,26,4,122,114,14,2,37,114,14,4,112,7,32,18,129,70],
    [114,14,4,112,1,27,120,14,3],
    [113,37,114,14,3,2,127,26,4,122,113,37,114,14,4,2,127,26,4,122,113,47,114,14,4,2,127,26,4,122,114,14,2,27,114,14,2,113,47,114,14,3,2,127,26,4,122,27,102,120,14,1],
    [113,14,119,15,140,14,134,132],
    [131,8],
    [131,49],
    [113,23,112,1000000,113,35,48,113,36,112,2,29,27,119,25],
    [113,24,112,1000000,113,35,48,113,36,112,2,29,27,119,27],
    [113,25,113,36,26,112,1,27,119,26],
    [113,27,113,36,26,112,1,27,119,28],
    [118,57,77,97,110,100,101,108,98,114,111,116,32,119,105,108,108,32,98,101,32,112,108,111,116,116,101,100,32,111,118,101,114,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,114,101,97,108,32,114,97,110,103,101,58,169,170,142],
    [113,25,113,35,112,4,14,118,7,32,60,32,120,32,60,32,64,113,26,113,35,112,4,14,64,118,4,32,32,32,32,64,169,142],
    [113,27,113,35,112,4,14,118,7,32,60,32,121,32,60,32,64,113,28,113,35,112,4,14,64,169,170,142],
    [118,16,83,99,97,108,105,110,103,32,102,97,99,116,111,114,58,32,113,35,11,64,118,22,32,32,32,32,73,109,97,103,101,32,114,101,115,111,108,117,116,105,111,110,58,32,64,113,36,11,64,112,120,9,64,113,36,11,64,169,170,142],
    [113,25,113,27,113,36,113,36,144],
    [113,36,113,36,145],
    [112,0,173],
    [113,25],
    [119,29,113,26],
    [113,29,37,129,112],
    [112,0,146],
    [113,27],
    [119,30,113,28],
    [113,30,37,129,110],
    [113,29,119,31],
    [113,30,119,32],
    [112,0,119,33],
    [113,31,113,32,112,1,50,112,2,113,35,28,34,113,33,112,40,36,17,129,104],
    [113,31,113,32,26,113,35,113,31,113,32,27,48,119,34],
    [112,2,113,31,28,113,35,113,32,48,113,30,26,119,32],
    [113,34,113,29,26,119,31],
    [116,33,1,122,4,2,123],
    [128,98],
    [113,33,112,40,35,129,107],
    [113,29,113,30,112,0,100],
    [128,109],
    [113,29,113,30,113,33,131,66],
    [114,15,1,100],
    [113,30,4,128,93],
    [112,-1,146],
    [113,29,4,128,89],
    [118,12,84,105,109,101,32,116,97,107,101,110,58,32,172,112,1000,112,1,14,64,118,9,32,115,101,99,111,110,100,115,46,64,169,170,142],
    [130]
  ]
}
