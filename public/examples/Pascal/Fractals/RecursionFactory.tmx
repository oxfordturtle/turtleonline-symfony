{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Recursion factory",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"12:00:01",
  "code":"PROGRAM RecursionFactory;\nCONST numsides = 6;        {number of sides in each polygon }\n      initsize = 240;      {initial length of polygon side  }\n      shrink = 40;         {shrink n/120ths each recursion  }\n      rangle = 180;        {recursion angle from centre line}\n      polygap = 0;         {polygon gap, n/120ths at RANGLE }\n      levels = 5;          {how many levels of recursion    }\n      slowdraw = 3;        {levels to be shown slow-drawing }\n      mode = 1;            {1=lines ; 2=blots ; 3=circles   }\n      firstcol = 5;        {colour of first level polygon   }\n      colinc = 4;          {increment for successive colours}\n      minthick = 2;        {minimum line thickness          }\n      addthick = 6;        {extra thickness per level x 12  }\n      circsize = 60;       {radius n/120ths of polygon side }\nVAR halfangle: integer;  {internal half-angle of polygon  }\n    slowlev: integer;    {minimum level to be slow-drawn  }\n\n  {PROCEDURE RECURSE is the program's heart. SIZE gives the }\n  {polygon side at the current level; DEPTH the levels of   }\n  {recursion to go; COL the colour; FLAG is explained below.}\n  {Note that when RECURSE is called, the turtle is always at}\n  {a corner, facing towards the centre of the polygon at the}\n  {current level. So after turning HALFANGLE to the left, it}\n  {will be facing along the left-hand edge of the polygon.  }\n  Procedure recurse(flag, size, depth, col: integer);\n  Var storex, storey: integer;\n      sides: integer;     {Recursion stops when DEPTH=0; if}\n  Begin                   {DEPTH is less than SLOWLEV, then}\n    if depth > 0 then        {no screen updating takes place, }\n      begin                 {making the program run faster.  }\n        if depth < slowlev then{FLAG=1 for first call at each   }\n          noupdate            {level. RECURSE then calls itself}\n        else                 {NUMSIDES times with FLAG=2, then}\n          update;             {3, and then restores position.  }\n        if flag = 1 then       {FLAG=2 draws one side of the    }\n          for flag := 2 to 3 do {polygon at the current level.   }\n            begin              {FLAG=3 moves along the same path}\n              storex := turtx;    {recursively calling next level. }\n              storey := turty;\n              for sides := 1 to numsides do\n                recurse(flag, size, depth, col);\n              turtx := storex;\n              turty := storey     {The program works in three modes}\n            end                {depending on whether the pattern}\n        else                 {is to be made of lines, blots or}\n          begin               {circles. Drawing is done only   }\n            penup;             {when FLAG=2, and the PEN is down}\n            if flag = 2 then     {only in LINE MODE (1). Thickness}\n              begin             {is set by MINTHICK and ADDTHICK.}\n                colour(rgb(col));\n                thickness(minthick + ((depth - 1) * addthick) / 12);\n                if mode = 1 then\n                  pendown         {IN BLOT & CIRCLE MODES 2 & 3 the}\n                else             {radius is set using CIRCSIZE    }\n                if mode = 2 then\n                  blot(size * circsize / 120)\n                else\n                  circle(size * circsize / 120)\n              end;\n            left(halfangle);\n            forward(size);\n            right(180 - halfangle + rangle);\n            if flag = 3 then\n              begin\n                forward(size * polygap / 120);\n                recurse(1, (size * shrink) / 120, depth - 1, ((col + colinc - 1) mod 7) + 1);\n                back(size * polygap / 120)\n              end;\n            left(rangle)\n          end\n      end\n  End;\n\nBEGIN\n  blank(black);\n  if 180 mod numsides = 0 then\n    begin\n      halfangle := 90 - (180 / numsides);\n      slowlev := levels + 1 - slowdraw;\n      if slowlev > levels - 1 then\n        slowlev := levels - 1;\n      movexy(0, initsize);\n      recurse(1, initsize, levels, firstcol)\n    end\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"back", "level":1, "count":1, "lines":"67"},
        {"name":"forward", "level":1, "count":2, "lines":"61 65"},
        {"name":"left", "level":1, "count":2, "lines":"60 69"},
        {"name":"right", "level":1, "count":1, "lines":"62"},
        {"name":"movexy", "level":2, "count":1, "lines":"82"}
      ],
      "total":7
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"blot", "level":1, "count":1, "lines":"56"},
        {"name":"circle", "level":1, "count":1, "lines":"58"}
      ],
      "total":2
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":1, "lines":"50"},
        {"name":"pendown", "level":1, "count":1, "lines":"53"},
        {"name":"penup", "level":1, "count":1, "lines":"47"},
        {"name":"thickness", "level":1, "count":1, "lines":"51"},
        {"name":"rgb", "level":3, "count":1, "lines":"50"}
      ],
      "total":5
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"blank", "level":1, "count":1, "lines":"75"},
        {"name":"noupdate", "level":1, "count":1, "lines":"32"},
        {"name":"update", "level":1, "count":1, "lines":"34"}
      ],
      "total":3
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":9, "lines":"29 31 35 48 52 55 63 76 80"},
        {"name":"else", "level":1, "count":4, "lines":"33 45 54 57"},
        {"name":"for", "level":1, "count":2, "lines":"36 40"},
        {"name":"procedure", "level":2, "count":1, "lines":"25"}
      ],
      "total":16
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"recurse", "level":0, "count":3, "lines":"41 66 83"}
      ],
      "total":3
    }
  ],
  "pcode":[
    [112,13,1,1,112,0,123,112,6,2,123,4,112,8,124,112,21,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [128,47],
    [133,1],
    [139,12,7],
    [117,12,1,112,7,124,120,12,4,120,12,3,120,12,2,120,12,1],
    [114,12,3,112,0,35,129,46],
    [114,12,3,113,21,34,129,11],
    [112,0,146],
    [128,12],
    [112,-1,146],
    [114,12,1,112,1,32,129,27],
    [112,2],
    [120,12,1,112,3],
    [114,12,1,37,129,26],
    [113,14,120,12,5],
    [113,15,120,12,6],
    [112,1],
    [120,12,7,112,6],
    [114,12,7,37,129,23],
    [114,12,1,114,12,2,114,12,3,114,12,4,131,4],
    [114,12,7,4,128,19],
    [114,12,5,119,14],
    [114,12,6,119,15],
    [114,12,1,4,128,14],
    [128,46],
    [112,0,86],
    [114,12,1,112,2,32,129,38],
    [114,12,4,101,87],
    [112,2,114,12,3,112,1,27,112,6,28,112,12,29,26,85],
    [112,1,112,1,32,129,34],
    [112,-1,86],
    [128,38],
    [112,1,112,2,32,129,37],
    [114,12,2,112,60,28,112,120,29,108],
    [128,38],
    [114,12,2,112,60,28,112,120,29,107],
    [113,20,93],
    [114,12,2,91],
    [112,180,113,20,27,112,180,26,94],
    [114,12,1,112,3,32,129,45],
    [114,12,2,112,0,28,112,120,29,91],
    [112,1,114,12,2,112,40,28,112,120,29,114,12,3,112,1,27,114,12,4,112,4,26,112,1,27,112,7,31,112,1,26,131,4],
    [114,12,2,112,0,28,112,120,29,92],
    [112,180,93],
    [140,12,134,132],
    [112,0,96],
    [112,180,112,6,31,112,0,32,129,55],
    [112,90,112,180,112,6,29,27,119,20],
    [112,5,112,1,26,112,3,27,119,21],
    [113,21,112,5,112,1,27,35,129,53],
    [112,5,112,1,27,119,21],
    [112,0,112,240,89],
    [112,1,112,240,112,5,112,5,131,4],
    [130]
  ]
}
