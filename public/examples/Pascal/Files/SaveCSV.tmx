{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Saving a CSV file",
  "author":"Peter Millican",
  "date":"28/07/2020",
  "time":"13:23:54",
  "code":"PROGRAM SaveCSV;\nCONST cols=10;\n      rows=10;\n      a=3;\n      b=4;\n      fname='SaveCSV.csv';\nVAR value: array[1..cols,1..rows] of integer;\n    colwidth,rowheight: integer;\n    xmargin,ymargin: integer;\n    fontsize: integer;\n\n Procedure setup;\n Begin\n  colwidth:=1000 div (     {calculate relevant sizes}cols+  {draw the grid lines}1) {add the grid headings};\n  rowheight {calculate the array values}:=900   {put array values in grid} div (  {save values as CSV file}rows+1);\n  xmargin:=colwidth*3/7;\n  ymargin:=rowheight/3;\n  fontsize:=colwidth/4\n End;\n\n Procedure drawgrid;\n Var i,j: integer;\n Begin\n  for i:=0 to cols+1 do\n   begin\n    if (i=0) or (i=1) or (i=cols+1) then\n     thickness(10)\n    else\n     thickness(2);\n    setxy(5+i*colwidth,5);\n    drawxy(0,890)\n   end;\n  for j:=0 to rows+1 do\n   begin\n    if (j=0) or (j=1) or (j=rows+1) then\n     thickness(10)\n    else\n     thickness(2);\n    setxy(5,5+j*rowheight);\n    drawxy(995,0)\n   end\n End;\n\n Procedure labelgrid;\n Var i,j: integer;\n Begin\n  setxy(colwidth-25,5);\n  print('x',0,30);\n  setxy(20,rowheight-45);\n  print('y',0,30);\n  setxy(300,925);\n  print('Table of '+str(a)+'x + '+str(b)+'y',0,40);\n  for i:=1 to cols do\n   begin\n    setxy(i*colwidth+xmargin,ymargin);\n    print(str(i),0,fontsize)\n   end;\n  for j:=1 to rows do\n   begin\n    setxy(xmargin,j*rowheight+ymargin);\n    print(str(j),0,fontsize)\n   end\n End;\n\n Procedure calculate;\n Var i,j: integer;\n Begin\n  for i:=1 to cols do\n   for j:=1 to rows do\n    value[i,j]:=a*i+b*j\n End;\n\n Procedure display;\n Var i,j: integer;\n Begin\n  for i:=1 to cols do\n   for j:=1 to rows do\n    begin\n     setxy(i*colwidth+xmargin,j*rowheight+ymargin);\n     print(str(value[i,j]),0,fontsize)\n    end\n End;\n\n Procedure savedata;\n Var handle,i,j: integer;\n     flag: boolean;\n Begin\n  if fileexists(fname) then\n   flag:=deletefile(fname);\n  handle:=openfile(fname,3);\n  for j:=1 to rows do\n   begin\n    for i:=1 to cols-1 do\n     fwrite(handle,str(value[i,j])+',');\n    fwriteln(handle,str(value[cols,j]))\n   end;\n  closefile(handle)\n End;\n\nBEGIN\n setup;\n drawgrid;\n labelgrid;\n calculate;\n display;\n savedata;\n writeln('File '+fname+' has been saved')\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"drawxy", "level":2, "count":2, "lines":"31 40"}
      ],
      "total":2
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":8, "lines":"30 39 47 49 51 55 60 79"}
      ],
      "total":8
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"thickness", "level":1, "count":4, "lines":"27 29 36 38"}
      ],
      "total":4
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":6, "lines":"48 50 52 56 61 80"},
        {"name":"writeln", "level":1, "count":1, "lines":"107"}
      ],
      "total":7
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":7, "lines":"52 52 56 61 80 94 95"}
      ],
      "total":7
    },
    {
      "category": "File processing",
      "expressions":[
        {"name":"closefile", "level":2, "count":1, "lines":"97"},
        {"name":"deletefile", "level":2, "count":1, "lines":"89"},
        {"name":"fwrite", "level":2, "count":1, "lines":"94"},
        {"name":"fwriteln", "level":2, "count":1, "lines":"95"},
        {"name":"openfile", "level":2, "count":1, "lines":"90"},
        {"name":"fileexists", "level":3, "count":1, "lines":"88"}
      ],
      "total":6
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":3, "lines":"26 35 88"},
        {"name":"else", "level":1, "count":2, "lines":"28 37"},
        {"name":"for", "level":1, "count":10, "lines":"24 33 53 58 68 69 76 77 91 93"},
        {"name":"procedure", "level":2, "count":6, "lines":"12 21 44 65 73 84"}
      ],
      "total":21
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"setup", "level":0, "count":1, "lines":"101"},
        {"name":"drawgrid", "level":0, "count":1, "lines":"102"},
        {"name":"labelgrid", "level":0, "count":1, "lines":"103"},
        {"name":"calculate", "level":0, "count":1, "lines":"104"},
        {"name":"display", "level":0, "count":1, "lines":"105"},
        {"name":"savedata", "level":0, "count":1, "lines":"106"}
      ],
      "total":6
    }
  ],
  "pcode":[
    [112,18,1,1,112,0,123,112,6,2,123,4,112,133,124,112,151,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,26,119,25],
    [112,10,119,26,116,37,119,27],
    [112,10,119,37,116,48,119,28],
    [112,10,119,48,116,59,119,29],
    [112,10,119,59,116,70,119,30],
    [112,10,119,70,116,81,119,31],
    [112,10,119,81,116,92,119,32],
    [112,10,119,92,116,103,119,33],
    [112,10,119,103,116,114,119,34],
    [112,10,119,114,116,125,119,35],
    [112,10,119,125,116,136,119,36],
    [112,10,119,136],
    [128,114],
    [133,1],
    [112,1000,112,10,112,1,26,30,119,147],
    [112,900,112,10,112,1,26,30,119,148],
    [113,147,112,3,28,112,7,29,119,149],
    [113,148,112,3,29,119,150],
    [113,147,112,4,29,119,151],
    [134,132],
    [133,2],
    [139,13,2],
    [117,13,1,112,2,124],
    [112,0],
    [120,13,1,112,10,112,1,26],
    [114,13,1,37,129,36],
    [114,13,1,112,0,32,114,13,1,112,1,32,18,114,13,1,112,10,112,1,26,32,18,129,32],
    [112,10,85],
    [128,33],
    [112,2,85],
    [112,5,114,13,1,113,147,28,26,112,5,88],
    [112,0,112,890,90],
    [114,13,1,4,128,27],
    [112,0],
    [120,13,2,112,10,112,1,26],
    [114,13,2,37,129,46],
    [114,13,2,112,0,32,114,13,2,112,1,32,18,114,13,2,112,10,112,1,26,32,18,129,42],
    [112,10,85],
    [128,43],
    [112,2,85],
    [112,5,112,5,114,13,2,113,148,28,26,88],
    [112,995,112,0,90],
    [114,13,2,4,128,37],
    [140,13,134,132],
    [133,3],
    [139,14,2],
    [117,14,1,112,2,124],
    [113,147,112,25,27,112,5,88],
    [112,120,9,112,0,112,30,168,142],
    [112,20,113,148,112,45,27,88],
    [112,121,9,112,0,112,30,168,142],
    [112,300,112,925,88],
    [118,9,84,97,98,108,101,32,111,102,32,112,3,11,64,118,4,120,32,43,32,64,112,4,11,64,112,121,9,64,112,0,112,40,168,142],
    [112,1],
    [120,14,1,112,10],
    [114,14,1,37,129,62],
    [114,14,1,113,147,28,113,149,26,113,150,88],
    [114,14,1,11,112,0,113,151,168,142],
    [114,14,1,4,128,57],
    [112,1],
    [120,14,2,112,10],
    [114,14,2,37,129,68],
    [113,149,114,14,2,113,148,28,113,150,26,88],
    [114,14,2,11,112,0,113,151,168,142],
    [114,14,2,4,128,63],
    [140,14,134,132],
    [133,4],
    [139,15,2],
    [117,15,1,112,2,124],
    [112,1],
    [120,15,1,112,10],
    [114,15,1,37,129,81],
    [112,1],
    [120,15,2,112,10],
    [114,15,2,37,129,80],
    [113,25,114,15,1,112,1,27,2,127,26,4,122,114,15,2,112,1,27,2,127,26,4,112,3,114,15,1,28,112,4,114,15,2,28,26,2,123],
    [114,15,2,4,128,76],
    [114,15,1,4,128,73],
    [140,15,134,132],
    [133,5],
    [139,16,2],
    [117,16,1,112,2,124],
    [112,1],
    [120,16,1,112,10],
    [114,16,1,37,129,95],
    [112,1],
    [120,16,2,112,10],
    [114,16,2,37,129,94],
    [114,16,1,113,147,28,113,149,26,114,16,2,113,148,28,113,150,26,88],
    [113,25,114,16,1,112,1,27,2,127,26,4,122,114,16,2,112,1,27,2,127,26,4,122,11,112,0,113,151,168,142],
    [114,16,2,4,128,89],
    [114,16,1,4,128,86],
    [140,16,134,132],
    [133,6],
    [139,17,4],
    [117,17,1,112,4,124],
    [118,11,83,97,118,101,67,83,86,46,99,115,118,112,0,177,112,127,35,142,129,101],
    [118,11,83,97,118,101,67,83,86,46,99,115,118,112,1,177,112,128,34,120,17,4,142],
    [118,11,83,97,118,101,67,83,86,46,99,115,118,112,3,179,120,17,1,142],
    [112,1],
    [120,17,3,112,10],
    [114,17,3,37,129,112],
    [112,1],
    [120,17,2,112,10,112,1,27],
    [114,17,2,37,129,110],
    [114,17,1,113,25,114,17,2,112,1,27,2,127,26,4,122,114,17,3,112,1,27,2,127,26,4,122,11,112,44,9,64,186],
    [114,17,2,4,142,128,106],
    [114,17,1,113,25,112,10,112,1,27,2,127,26,4,122,114,17,3,112,1,27,2,127,26,4,122,11,187,142],
    [114,17,3,4,128,103],
    [114,17,1,180],
    [140,17,134,132],
    [131,16],
    [131,23],
    [131,47],
    [131,69],
    [131,82],
    [131,96],
    [118,5,70,105,108,101,32,118,11,83,97,118,101,67,83,86,46,99,115,118,64,118,15,32,104,97,115,32,98,101,101,110,32,115,97,118,101,100,64,169,170,142],
    [130]
  ]
}
