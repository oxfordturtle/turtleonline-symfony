PROGRAM SaveCSV;
CONST cols = 10;
      rows = 10;
      a = 3;
      b = 4;
      fname = 'SaveCSV.csv';
VAR value: array[1..cols, 1..rows] of integer;
    colwidth, rowheight: integer;
    xmargin, ymargin: integer;
    fontsize: integer;

  Procedure setup;
  Begin
    colwidth := 1000 div (     {calculate relevant sizes}cols +  {draw the grid lines} 1) {add the grid headings};
    rowheight {calculate the array values} := 900   {put array values in grid} div (  {save values as CSV file}rows
     + 1);
    xmargin := colwidth * 3 / 7;
    ymargin := rowheight / 3;
    fontsize := colwidth / 4
  End;

  Procedure drawgrid;
  Var i, j: integer;
  Begin
    for i := 0 to cols + 1 do
      begin
        if (i = 0) or (i = 1) or (i = cols + 1) then
          thickness(10)
        else
          thickness(2);
        setxy(5 + i * colwidth, 5);
        drawxy(0, 890)
      end;
    for j := 0 to rows + 1 do
      begin
        if (j = 0) or (j = 1) or (j = rows + 1) then
          thickness(10)
        else
          thickness(2);
        setxy(5, 5 + j * rowheight);
        drawxy(995, 0)
      end
  End;

  Procedure labelgrid;
  Var i, j: integer;
  Begin
    setxy(colwidth - 25, 5);
    print('x', 0, 30);
    setxy(20, rowheight - 45);
    print('y', 0, 30);
    setxy(300, 925);
    print('Table of ' + str(a) + 'x + ' + str(b) + 'y', 0, 40);
    for i := 1 to cols do
      begin
        setxy(i * colwidth + xmargin, ymargin);
        print(str(i), 0, fontsize)
      end;
    for j := 1 to rows do
      begin
        setxy(xmargin, j * rowheight + ymargin);
        print(str(j), 0, fontsize)
      end
  End;

  Procedure calculate;
  Var i, j: integer;
  Begin
    for i := 1 to cols do
      for j := 1 to rows do
        value[i, j] := a * i + b * j
  End;

  Procedure display;
  Var i, j: integer;
  Begin
    for i := 1 to cols do
      for j := 1 to rows do
        begin
          setxy(i * colwidth + xmargin, j * rowheight + ymargin);
          print(str(value[i, j]), 0, fontsize)
        end
  End;

  Procedure savedata;
  Var handle, i, j: integer;
      flag: boolean;
  Begin
    if fileexists(fname) then
      flag := deletefile(fname);
    handle := openfile(fname, 3);
    for j := 1 to rows do
      begin
        for i := 1 to cols - 1 do
          fwrite(handle, str(value[i, j]) + ',');
        fwriteln(handle, str(value[cols, j]))
      end;
    closefile(handle)
  End;

BEGIN
  setup;
  drawgrid;
  labelgrid;
  calculate;
  display;
  savedata;
  writeln('File ' + fname + ' has been saved')
END.
