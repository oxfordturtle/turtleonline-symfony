PROGRAM SnakeGame;
CONST boardSize = 30;
      snakeColour = purple;
      appleColour = green;
VAR snakeLength: integer;
    crash: boolean;

  {draws a new apple}
  Procedure newApple;
  Var x, y: integer;
  Begin
    {choose a random point where the snake isn't}
    repeat
      x := random(boardSize);
      y := random(boardSize)
    until (pixcol(x, y) <> snakeColour);
    {draw an apple at that point}
    pixset(x, y, appleColour)
  End;

BEGIN
  {set canvas and resolution}
  canvas(0, 0, boardSize, boardSize);
  resolution(boardSize, boardSize);
  {set angles to 4, because only four directions are needed}
  angles(4);
  {blank canvas and hide cursor}
  blank(lightblue);
  cursor(0);
  colour(snakeColour);
  thickness(1);
  penup;
  forward(1);
  snakeLength := 2;
  {place the first apple}
  newApple;
  {initialise crash variable to false}
  crash := false;
  {until the snake crashes...}
  repeat
    noupdate;
    {turn snake in response to arrow key press}
    if (abs(?key) = \up) and (turtd <> 2) then
      direction(0);
    if (abs(?key) = \right) and (turtd <> 3) then
      direction(1);
    if (abs(?key) = \down) and (turtd <> 0) then
      direction(2);
    if (abs(?key) = \left) and (turtd <> 1) then
      direction(3);
    {move snake forward}
    forward(1);
    {crash if snake reaches edge of canvas}
    if (turtx < 0) or (turtx >= boardSize) or (turty < 0) or (turty >= boardSize) then
      crash := true;
    {crash if snake hits itself}
    if pixcol(turtx, turty) = snakeColour then
      crash := true;
    {if snake reaches an apple...}
    if pixcol(turtx, turty) = appleColour then
      begin
        {increase snake length}
        inc(snakeLength);
        {"eat" the apple}
        pixset(turtx, turty, snakeColour);
        {place a new apple}
        newApple
      end;
    {rub out the previous snake}
    colour(lightblue);
    polyline(snakeLength + 2);
    {draw the snake in its new position}
    colour(snakeColour);
    polyline(snakeLength);
    update;
    {pause less for longer snakes (increasing speed with each apple)}
    pause(250 - (snakeLength * 3))
  until crash;
  {print final score}
  resolution(1000, 1000);
  blank(lilac);
  setxy(boardSize / 4, 2 * boardSize / 5);
  print('Score ' + str(snakeLength - 2), 20, 100)
END.
