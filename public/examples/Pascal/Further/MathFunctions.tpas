PROGRAM MathFunctions;
CONST decimals = 4;       {decimal places for display of values}
      denominator = 1000000; {denominator gives level of precision}
VAR a, b: integer;

  {Writes to the output the value of a mathematical function of a/b,}
  {or - in the case of HYPOT (where OP is "," not "/") - of a and b;}
  {chr(176) is the degree symbol for sin/cos/tan and their inverses.}
  Procedure show(fn: string; op: char; value: integer; degrees: integer);
  Begin
    if degrees = 1 then
      writeln(fn + '(' + str(a) + op + str(b) + chr(176) + ') = ' + qstr(value, denominator, decimals))
    else
    if degrees = 2 then
      writeln(fn + '(' + str(a) + op + str(b) + ') = ' + qstr(value, denominator, decimals) + chr(176))
    else
      writeln(fn + '(' + str(a) + op + str(b) + ') = ' + qstr(value, denominator, decimals))
  End;

BEGIN
  {show output and display information about the program}
  output(true, white, true);
  writeln('This program selects two random numbers a and b, in the');
  writeln('range 100-999, and then outputs various mathematical');
  writeln('functions of the fraction a/b. The results are expressed');
  writeln('to ' + str(decimals) + ' decimal places, and a denominator of ' + str(denominator) + ' is');
  writeln('used in the calculations to provide precision, even');
  writeln('though the Turtle functions strictly operate only on');
  writeln('integers and produce integer results.');
  writeln('');
  {set a and b to random values, and display their values and quotient}
  a := random(900) + 100;
  b := random(900) + 100;
  writeln('a = ' + str(a) + '; b = ' + str(b));
  writeln('a/b = ' + str(a) + '/' + str(b) + ' = ' + qstr(a, b, decimals));
  writeln('');
  {display square, square root, cube, and cube root of a/b}
  show('square', '/', power(a, b, 2, denominator), 0);
  show('square root', '/', root(a, b, 2, denominator), 0);
  show('cube', '/', power(a, b, 3, denominator), 0);
  show('cube root', '/', root(a, b, 3, denominator), 0);
  writeln('');
  {display hypotenuse of right-angled triangle with shorter sides a and b}
  show('hypot', ',', hypot(a, b, denominator), 0);
  show('calculated hypot', ',', sqrt(a * a + b * b, denominator), 0);
  writeln('');
  {display sin, cos, and tan of a/b, interpreted in degrees}
  show('sin', '/', sin(a, b, denominator), 1);
  show('cos', '/', cos(a, b, denominator), 1);
  show('tan', '/', tan(a, b, denominator), 1);
  writeln('');
  {display ln, exp, log10, and antilog of a/b}
  show('ln', '/', ln(a, b, denominator), 0);
  if divmult(a, b, 1000) + ln(denominator, 1, 1000) > ln(maxint, 1, 1000) then
    begin
      writeln('EXP(' + str(a) + '/' + str(b) + ') would give numerical overflow, because');
      writeln('the result*' + str(denominator) + ' would be greater than ' + str(maxint))
    end
  else
    show('exp', '/', exp(a, b, denominator), 0);
  show('log10', '/', log10(a, b, denominator), 0);
  if divmult(a, b, 1000) + log10(denominator, 1, 1000) > log10(maxint, 1, 1000) then
    begin
      writeln('ANTILOG(' + str(a) + '/' + str(b) + ') would give numerical overflow, because');
      writeln('the result*' + str(denominator) + ' would be greater than ' + str(maxint))
    end
  else
    show('antilog', '/', antilog(a, b, denominator), 0);
  writeln('');
  {display arccos, arcsin, and arctan of a/b, in degrees}
  if a > b then
    writeln('ARCCOS and ARCSIN are not defined for ' + str(a) + '/' + str(b) + ' = ' + qstr(a, b,
     decimals))
  else
    begin
      show('arccos', '/', arccos(a, b, denominator), 2);
      show('arcsin', '/', arcsin(a, b, denominator), 2)
    end;
  show('arctan', '/', arctan(a, b, denominator), 2)
END.
