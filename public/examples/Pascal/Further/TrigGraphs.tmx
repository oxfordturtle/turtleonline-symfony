{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Trigonometric graphs",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"11:59:03",
  "code":"PROGRAM TrigGraphs;\nCONST xorigin = 500;\n      yorigin = 500;\n      halfwidth = 400;\n      yscale = 200;\n      radians = false;\nVAR degrees: integer;\n    x, y: integer;\n\n  Procedure axes;\n  Begin\n    thickness(3);\n    setxy(xorigin - halfwidth, yorigin);\n    drawxy(halfwidth * 2, 0);\n    setxy(xorigin, 0);\n    drawxy(0, 1000);\n    setxy(xorigin, yorigin);\n    circle(15);\n    thickness(2);\n    setxy(xorigin - halfwidth, yorigin - yscale);\n    drawxy(halfwidth * 2, 0);\n    setxy(xorigin - halfwidth, yorigin + yscale);\n    drawxy(halfwidth * 2, 0);\n    setxy(xorigin + halfwidth + 10, yorigin - yscale - 18);\n    print('+1', 0, 20);\n    setxy(xorigin + halfwidth + 10, yorigin + yscale - 18);\n    print('-1', 0, 20);\n    if radians then\n      begin\n        setxy(xorigin - halfwidth - 44, yorigin - 4);\n        print('-p', 29, 28);\n        setxy(xorigin - halfwidth div 2 - 2, yorigin - 4);\n        print('-p/2', 29, 28);\n        setxy(xorigin + halfwidth div 2 - 50, yorigin - 4);\n        print('p/2', 29, 28);\n        setxy(xorigin + halfwidth, yorigin - 4);\n        print('p', 29, 28)\n      end\n    else\n      begin\n        setxy(xorigin - halfwidth - 64, yorigin + 2);\n        print('-180', 0, 24);\n        setxy(xorigin - halfwidth div 2 - 2, yorigin + 2);\n        print('-90', 0, 24);\n        setxy(xorigin + halfwidth div 2 - 36, yorigin + 2);\n        print('90', 0, 24);\n        setxy(xorigin + halfwidth, yorigin + 2);\n        print('180', 0, 24)\n      end\n  End;\n\n  Procedure sinecurve;\n  Begin\n    for degrees := -180 to 180 do\n      begin\n        x := xorigin + divmult(degrees, 180, halfwidth);\n        y := yorigin - sin(degrees, 1, yscale);\n        setxy(x, y)\n      end;\n    polyline(361)\n  End;\n\n  Procedure cosinecurve;\n  Begin\n    for degrees := -180 to 180 do\n      begin\n        x := xorigin + divmult(degrees, 180, halfwidth);\n        y := yorigin - cos(degrees, 1, yscale);\n        setxy(x, y)\n      end;\n    polyline(361)\n  End;\n\n  Procedure tancurve;\n  Begin\n    for degrees := -180 to 180 do\n      if degrees = -90 then\n        polyline(90)\n      else\n      if degrees = 90 then\n        polyline(179)\n      else\n        begin\n          x := xorigin + divmult(degrees, 180, halfwidth);\n          y := yorigin - tan(degrees, 1, yscale);\n          setxy(x, y)\n        end;\n    polyline(90)\n  End;\n\nBEGIN\n  axes;\n  noupdate;\n  thickness(4);\n  colour(red);\n  setxy(20, 700);\n  print('cosine', 16, 40);\n  cosinecurve;\n  colour(green);\n  setxy(100, 810);\n  print('sine', 16, 40);\n  setxy(205, 820);\n  drawxy(70, -110);\n  drawxy(0, 20);\n  movexy(0, -20);\n  drawxy(-18, 11);\n  sinecurve;\n  colour(blue);\n  setxy(140, 920);\n  print('tangent', 16, 40);\n  tancurve\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"drawxy", "level":2, "count":7, "lines":"14 16 21 23 103 104 106"},
        {"name":"movexy", "level":2, "count":1, "lines":"105"}
      ],
      "total":8
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":22, "lines":"13 15 17 20 22 24 26 30 32 34 36 41 43 45 47 58 69 86 96 100 102 109"}
      ],
      "total":22
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"circle", "level":1, "count":1, "lines":"18"},
        {"name":"polyline", "level":2, "count":5, "lines":"60 71 78 81 88"}
      ],
      "total":6
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":3, "lines":"95 99 108"},
        {"name":"thickness", "level":1, "count":3, "lines":"12 19 94"}
      ],
      "total":6
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":1, "lines":"93"}
      ],
      "total":1
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"divmult", "level":3, "count":3, "lines":"56 67 84"}
      ],
      "total":3
    },
    {
      "category": "Trig / exp / log functions",
      "expressions":[
        {"name":"cos", "level":2, "count":1, "lines":"68"},
        {"name":"sin", "level":2, "count":1, "lines":"57"},
        {"name":"tan", "level":2, "count":1, "lines":"85"}
      ],
      "total":3
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":13, "lines":"25 27 31 33 35 37 42 44 46 48 97 101 110"}
      ],
      "total":13
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":3, "lines":"28 77 80"},
        {"name":"else", "level":1, "count":3, "lines":"39 79 82"},
        {"name":"for", "level":1, "count":3, "lines":"54 65 76"},
        {"name":"procedure", "level":2, "count":4, "lines":"10 52 63 74"}
      ],
      "total":13
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"axes", "level":0, "count":1, "lines":"92"},
        {"name":"cosinecurve", "level":0, "count":1, "lines":"98"},
        {"name":"sinecurve", "level":0, "count":1, "lines":"107"},
        {"name":"tancurve", "level":0, "count":1, "lines":"111"}
      ],
      "total":4
    }
  ],
  "pcode":[
    [112,16,1,1,112,0,123,112,6,2,123,4,112,9,124,112,25,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [128,76],
    [133,1],
    [112,3,85],
    [112,500,112,400,27,112,500,88],
    [112,400,112,2,28,112,0,90],
    [112,500,112,0,88],
    [112,0,112,1000,90],
    [112,500,112,500,88],
    [112,15,107],
    [112,2,85],
    [112,500,112,400,27,112,500,112,200,27,88],
    [112,400,112,2,28,112,0,90],
    [112,500,112,400,27,112,500,112,200,26,88],
    [112,400,112,2,28,112,0,90],
    [112,500,112,400,26,112,10,26,112,500,112,200,27,112,18,27,88],
    [118,2,43,49,112,0,112,20,168,142],
    [112,500,112,400,26,112,10,26,112,500,112,200,26,112,18,27,88],
    [118,2,45,49,112,0,112,20,168,142],
    [112,0,129,31],
    [112,500,112,400,27,112,44,27,112,500,112,4,27,88],
    [118,2,45,112,112,29,112,28,168,142],
    [112,500,112,400,112,2,30,27,112,2,27,112,500,112,4,27,88],
    [118,4,45,112,47,50,112,29,112,28,168,142],
    [112,500,112,400,112,2,30,26,112,50,27,112,500,112,4,27,88],
    [118,3,112,47,50,112,29,112,28,168,142],
    [112,500,112,400,26,112,500,112,4,27,88],
    [112,112,9,112,29,112,28,168,142],
    [128,39],
    [112,500,112,400,27,112,64,27,112,500,112,2,26,88],
    [118,4,45,49,56,48,112,0,112,24,168,142],
    [112,500,112,400,112,2,30,27,112,2,27,112,500,112,2,26,88],
    [118,3,45,57,48,112,0,112,24,168,142],
    [112,500,112,400,112,2,30,26,112,36,27,112,500,112,2,26,88],
    [118,2,57,48,112,0,112,24,168,142],
    [112,500,112,400,26,112,500,112,2,26,88],
    [118,3,49,56,48,112,0,112,24,168,142],
    [134,132],
    [133,2],
    [112,180,23],
    [119,23,112,180],
    [113,23,37,129,48],
    [112,500,113,23,112,180,112,400,48,26,119,24],
    [112,500,113,23,112,1,112,200,57,27,119,25],
    [113,24,113,25,88],
    [113,23,4,128,42],
    [112,361,105],
    [134,132],
    [133,3],
    [112,180,23],
    [119,23,112,180],
    [113,23,37,129,58],
    [112,500,113,23,112,180,112,400,48,26,119,24],
    [112,500,113,23,112,1,112,200,58,27,119,25],
    [113,24,113,25,88],
    [113,23,4,128,52],
    [112,361,105],
    [134,132],
    [133,4],
    [112,180,23],
    [119,23,112,180],
    [113,23,37,129,74],
    [113,23,112,90,23,32,129,67],
    [112,90,105],
    [128,73],
    [113,23,112,90,32,129,70],
    [112,179,105],
    [128,73],
    [112,500,113,23,112,180,112,400,48,26,119,24],
    [112,500,113,23,112,1,112,200,59,27,119,25],
    [113,24,113,25,88],
    [113,23,4,128,62],
    [112,90,105],
    [134,132],
    [131,4],
    [112,0,146],
    [112,4,85],
    [112,16711680,87],
    [112,20,112,700,88],
    [118,6,99,111,115,105,110,101,112,16,112,40,168,142],
    [131,50],
    [112,2263842,87],
    [112,100,112,810,88],
    [118,4,115,105,110,101,112,16,112,40,168,142],
    [112,205,112,820,88],
    [112,70,112,110,23,90],
    [112,0,112,20,90],
    [112,0,112,20,23,89],
    [112,18,23,112,11,90],
    [131,40],
    [112,255,87],
    [112,140,112,920,88],
    [118,7,116,97,110,103,101,110,116,112,16,112,40,168,142],
    [131,60],
    [130]
  ]
}
