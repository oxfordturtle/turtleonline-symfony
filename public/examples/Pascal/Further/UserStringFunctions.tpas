PROGRAM UserStringFunctions;

  {generates the reverse of a string}
  Function reverse(s: string): string;
  Var posn: integer;
  Begin
    result := '';
    for posn := 1 to length(s) do
      result := s[posn] + result
  End;

  {generates the reverse of a string recursively}
  Function reverseRecursive(s: string): string;
  Begin
    if s = '' then
      result := s
    else
      result := reverseRecursive(delete(s, 1, 1)) + s[1]
  End;

  {tests whether a character is uppercase (1), lowercase (0), or neither (-1)}
  Function testCase(c: char): integer;
  Begin
    if (c >= 'A') and (c <= 'Z') then
      result := 1
    else
    if (c >= 'a') and (c <= 'z') then
      result := 0
    else
      result := -1
  End;

  {capitalises first letter of each word, leaving other letters unchanged and}
  {treating any non-letter as a word separator; the native TITLECASE function}
  {treats only spaces as word separators, making subsequent letters lowercase}
  Function initCaps(s: string): string;
  Var posn: integer;
      newword: boolean;
  Begin
    newword := true;
    for posn := 1 to length(s) do
      begin
        if newword and (testCase(s[posn]) = 0) then
          s[posn] := chr(ord(s[posn]) - 32);
        newword := (testCase(s[posn]) = -1)
      end;
    result := s
  End;

  {generates the Caesar cipher of a string}
  Function caesar(s: string; n: integer): string;
  Var posn: integer;
  Begin
    for posn := 1 to length(s) do
      begin
        if testCase(s[posn]) = 1 then
          begin
            s[posn] := chr(ord(s[posn]) + n);
            if s[posn] > 'Z' then
              s[posn] := chr(ord(s[posn]) - 26)
          end
        else
        if testCase(s[posn]) = 0 then
          begin
            s[posn] := chr(ord(s[posn]) + n);
            if s[posn] > 'z' then
              s[posn] := chr(ord(s[posn]) - 26)
          end
      end;
    result := s
  End;

  {shows the results of applying the above functions to a string}
  Procedure process(s: string);
  Begin
    writeln('');
    writeln('ORIGINAL STRING:               "' + s + '"');
    writeln('REVERSED (by iteration):       "' + reverse(s) + '"');
    writeln('REVERSED (by recursion):       "' + reverseRecursive(s) + '"');
    writeln('INITIAL CAPITAL ALL WORDS:     "' + initCaps(s) + '"');
    writeln('TITLE CASE:                    "' + titlecase(s) + '"');
    writeln('REVERSED THEN INITIAL CAPITAL: "' + initCaps(reverse(s)) + '"');
    writeln('REVERSED THEN TITLE CASE:      "' + titlecase(reverse(s)) + '"');
    writeln('CAESAR CIPHER (1 letter):      "' + caesar(s, 1) + '"');
    writeln('CAESAR DECRYPT (1+25 = 26):    "' + caesar(caesar(s, 1), 25) + '"');
    writeln('CAESAR CIPHER (4 letters):     "' + caesar(s, 4) + '"');
    writeln('CAESAR DECRYPT (4+22 = 26):    "' + caesar(caesar(s, 4), 22) + '"')
  End;

BEGIN
  {show the output}
  output(true, cream, true);
  writeln('Some User-Defined String Functions');
  {process some example strings}
  process('CREATING is better than LEARNING;');
  process('indeed it''s the Essence of Life!')
END.
