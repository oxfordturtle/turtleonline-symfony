{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Firing a cannon (manual)",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"11:59:07",
  "code":"PROGRAM AimCannon;\nCONST gunlength = 1000;\n      distancecol = green;\n      timecol = red;\nVAR n: integer;\n    steps: integer;\n\n  Procedure graphaxes;\n  Var n: integer;\n  Begin\n    thickness(5);\n    setxy(9700, 600);\n    drawxy(0, 3900);\n    drawxy(-9000, 0);\n    drawxy(0, -3900);\n    for n := 0 to 90 do\n      if n mod 5 = 0 then\n        begin\n          setxy(650 + n * 100, 4600);\n          print(str(n), 2, 16)\n        end;\n    for n := 0 to 9 do\n      begin\n        setxy(100, 4350 - n * 400);\n        print(str(n * 1000), 2, 16)\n      end;\n    for n := 0 to 9 do\n      begin\n        setxy(9900, 4380 - n * 400);\n        print(str(n * 20), 2, 16)\n      end;\n    setxy(4000, 4900);\n    print('Angle of elevation', 2, 24);\n    colour(distancecol);\n    setxy(0, 100);\n    print('Distance', 2, 24);\n    colour(timecol);\n    setxy(9600, 100);\n    print('Time', 2, 24)\n  End;\n\n  Procedure plot(x, y, col: integer);\n  Begin\n    setxy(700 + x * 100, 4500 - y * 2 / 5);\n    colour(col);\n    blot(40)\n  End;\n\n  Procedure aim;\n  Begin\n    repeat\n      noupdate;\n      setxy(0, 10000);\n      colour(cream);\n      blot(1600);\n      colour(yellowgreen);\n      blot(1400);\n      colour(maroon);\n      setxy(250, 9750);\n      blot(250);\n      forward(gunlength);\n      setxy(250, 9750);\n      colour(red);\n      blot(100);\n      update;\n      repeat\n      until (?lmouse > 0);\n      if pixcol(?mousex, ?mousey) = cream then\n        turnxy(?mousex - 250, ?mousey - 9750)\n    until pixcol(?mousex, ?mousey) = red\n  End;\n\n  Procedure fire(xvel, yvel, gravity, floor: integer);\n  Begin\n    setxy(250, 9750);\n    steps := 0;\n    repeat\n      inc(steps);\n      if pixcol(turtx, turty) = black then\n        begin\n          colour(white);\n          blot(75)\n        end;\n      movexy(xvel, yvel);\n      yvel := yvel + gravity;\n      if turty > floor then\n        turty := floor;\n      if (pixcol(turtx, turty) = white) or (turty = floor) then\n        begin\n          colour(black);\n          blot(75)\n        end;\n      update;\n      pause(10);\n      noupdate\n    until turty = floor\n  End;\n\nBEGIN\n  canvas(0, 0, 10500, 10000);\n  graphaxes;\n  turtd := 45;\n  thickness(20);\n  repeat\n    aim;\n    write('Elevation: ' + str(90 - turtd));\n    fire(cos(90 - turtd, 1, 96), sin(90 - turtd, 1, -96), 1, 9950);\n    write('  Distance: ' + str(turtx));\n    writeln('  Time: ' + str(steps));\n    plot(90 - turtd, turtx, distancecol);\n    plot(90 - turtd, steps * 50, timecol)\n  until 0 = 1\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"forward", "level":1, "count":1, "lines":"61"},
        {"name":"drawxy", "level":2, "count":3, "lines":"13 14 15"},
        {"name":"movexy", "level":2, "count":1, "lines":"84"}
      ],
      "total":5
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":12, "lines":"12 19 24 29 32 35 38 44 53 59 62 75"},
        {"name":"turnxy", "level":2, "count":1, "lines":"69"}
      ],
      "total":13
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"blot", "level":1, "count":7, "lines":"46 55 57 60 64 82 91"}
      ],
      "total":7
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":9, "lines":"34 37 45 54 56 58 63 81 90"},
        {"name":"thickness", "level":1, "count":2, "lines":"11 103"}
      ],
      "total":11
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"noupdate", "level":1, "count":2, "lines":"52 95"},
        {"name":"update", "level":1, "count":2, "lines":"65 93"},
        {"name":"canvas", "level":2, "count":1, "lines":"100"},
        {"name":"pixcol", "level":3, "count":4, "lines":"68 70 79 88"}
      ],
      "total":9
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"inc", "level":1, "count":1, "lines":"78"}
      ],
      "total":1
    },
    {
      "category": "Trig / exp / log functions",
      "expressions":[
        {"name":"cos", "level":2, "count":1, "lines":"107"},
        {"name":"sin", "level":2, "count":1, "lines":"107"}
      ],
      "total":2
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":6, "lines":"20 25 30 33 36 39"},
        {"name":"write", "level":1, "count":2, "lines":"106 108"},
        {"name":"writeln", "level":1, "count":1, "lines":"109"}
      ],
      "total":9
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":6, "lines":"20 25 30 106 108 109"}
      ],
      "total":6
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"pause", "level":1, "count":1, "lines":"94"}
      ],
      "total":1
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":5, "lines":"17 68 79 86 88"},
        {"name":"for", "level":1, "count":3, "lines":"16 22 27"},
        {"name":"repeat", "level":2, "count":4, "lines":"51 66 77 104"},
        {"name":"procedure", "level":2, "count":4, "lines":"8 42 49 73"}
      ],
      "total":16
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"graphaxes", "level":0, "count":1, "lines":"101"},
        {"name":"aim", "level":0, "count":1, "lines":"105"},
        {"name":"fire", "level":0, "count":1, "lines":"107"},
        {"name":"plot", "level":0, "count":2, "lines":"110 111"}
      ],
      "total":5
    }
  ],
  "pcode":[
    [112,16,1,1,112,0,123,112,6,2,123,4,112,8,124,112,24,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [128,88],
    [133,1],
    [139,12,1],
    [117,12,1,112,1,124],
    [112,5,85],
    [112,9700,112,600,88],
    [112,0,112,3900,90],
    [112,9000,23,112,0,90],
    [112,0,112,3900,23,90],
    [112,0],
    [120,12,1,112,90],
    [114,12,1,37,129,19],
    [114,12,1,112,5,31,112,0,32,129,18],
    [112,650,114,12,1,112,100,28,26,112,4600,88],
    [114,12,1,11,112,2,112,16,168,142],
    [114,12,1,4,128,13],
    [112,0],
    [120,12,1,112,9],
    [114,12,1,37,129,25],
    [112,100,112,4350,114,12,1,112,400,28,27,88],
    [114,12,1,112,1000,28,11,112,2,112,16,168,142],
    [114,12,1,4,128,20],
    [112,0],
    [120,12,1,112,9],
    [114,12,1,37,129,31],
    [112,9900,112,4380,114,12,1,112,400,28,27,88],
    [114,12,1,112,20,28,11,112,2,112,16,168,142],
    [114,12,1,4,128,26],
    [112,4000,112,4900,88],
    [118,18,65,110,103,108,101,32,111,102,32,101,108,101,118,97,116,105,111,110,112,2,112,24,168,142],
    [112,2263842,87],
    [112,0,112,100,88],
    [118,8,68,105,115,116,97,110,99,101,112,2,112,24,168,142],
    [112,16711680,87],
    [112,9600,112,100,88],
    [118,4,84,105,109,101,112,2,112,24,168,142],
    [140,12,134,132],
    [133,2],
    [139,13,3],
    [117,13,1,112,3,124,120,13,3,120,13,2,120,13,1],
    [112,700,114,13,1,112,100,28,26,112,4500,114,13,2,112,2,28,112,5,29,27,88],
    [114,13,3,87],
    [112,40,108],
    [140,13,134,132],
    [133,3],
    [112,0,146],
    [112,0,112,10000,88],
    [112,16777147,87],
    [112,1600,108],
    [112,11193395,87],
    [112,1400,108],
    [112,8388608,87],
    [112,250,112,9750,88],
    [112,250,108],
    [112,1000,91],
    [112,250,112,9750,88],
    [112,16711680,87],
    [112,100,108],
    [112,-1,146],
    [112,-1,160,112,0,35,129,62],
    [112,-7,160,112,-8,160,99,112,16777147,32,129,65],
    [112,-7,160,112,250,27,112,-8,160,112,9750,27,95],
    [112,-7,160,112,-8,160,99,112,16711680,32,129,48],
    [134,132],
    [133,4],
    [139,15,4],
    [117,15,1,112,4,124,120,15,4,120,15,3,120,15,2,120,15,1],
    [112,250,112,9750,88],
    [112,0,119,24],
    [116,24,1,122,4,2,123],
    [113,17,113,18,99,112,0,32,129,76],
    [112,16777215,87],
    [112,75,108],
    [114,15,1,114,15,2,89],
    [114,15,2,114,15,3,26,120,15,2],
    [113,18,114,15,4,35,129,80],
    [114,15,4,119,18],
    [113,17,113,18,99,112,16777215,32,113,18,114,15,4,32,18,129,83],
    [112,0,87],
    [112,75,108],
    [112,-1,146],
    [112,10,174],
    [112,0,146],
    [113,18,114,15,4,32,129,72],
    [140,15,134,132],
    [112,0,112,0,112,10500,112,10000,144],
    [131,4],
    [112,45,119,19],
    [112,20,85],
    [131,47],
    [118,11,69,108,101,118,97,116,105,111,110,58,32,112,90,113,19,27,11,64,169,142],
    [112,90,113,19,27,112,1,112,96,58,112,90,113,19,27,112,1,112,96,23,57,112,1,112,9950,131,67],
    [118,12,32,32,68,105,115,116,97,110,99,101,58,32,113,17,11,64,169,142],
    [118,8,32,32,84,105,109,101,58,32,113,24,11,64,169,170,142],
    [112,90,113,19,27,113,17,112,2263842,131,40],
    [112,90,113,19,27,113,24,112,50,28,112,16711680,131,40],
    [112,0,112,1,32,129,92],
    [130]
  ]
}
