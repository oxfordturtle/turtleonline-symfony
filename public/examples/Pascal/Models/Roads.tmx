{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Town road simulation",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"11:59:13",
  "code":"PROGRAM Roads;\nCONST maxnodes = 500;\n      suffnodes = 400;\n      maxedges = 1000;\n      mindistance = 40;\n      noderadius = 6;\n      roadradius = 4;\n      normalroad = black;\n      linkroad = blue;\nVAR nodex, nodey: array[1..maxnodes] of integer;\n    nodedist: array[1..maxnodes] of integer;\n    numnodes: integer;\n    edge1, edge2, edgelen: array[1..maxedges] of integer;\n    numedges: integer;\n    m: integer;\n\n  Function closest(n: integer): integer;\n  Var i, min, d: integer;\n  Begin\n    result := 0;\n    min := maxint;\n    for i := 1 to numnodes do\n      if i <> n then\n        begin\n          d := hypot(nodex[n] - nodex[i], nodey[n] - nodey[i], 1);\n          if d < min then\n            begin\n              min := d;\n              result := i\n            end\n        end;\n    if min < mindistance then\n      result := -1\n  End;\n\n  Procedure marknode(n, col, rad: integer);\n  Begin\n    setxy(nodex[n], nodey[n]);\n    colour(col);\n    blot(rad)\n  End;\n\n  Procedure makeedge(nodea, nodeb, col: integer);\n  Begin\n    inc(numedges);\n    edge1[numedges] := nodea;\n    edge2[numedges] := nodeb;\n    edgelen[numedges] := hypot(nodex[nodea] - nodex[nodeb], nodey[nodea] - nodey[nodeb], 1);\n    setxy(nodex[nodea], nodey[nodea]);\n    colour(col);\n    setxy(nodex[nodeb], nodey[nodeb]);\n    polyline(2)\n  End;\n\n  Procedure linkup(nodea, nodeb: integer);\n  Begin\n    if hypot(nodex[nodea] - nodex[nodeb], nodey[nodea] - nodey[nodeb], 1) < mindistance * 2 then\n      makeedge(nodea, nodeb, normalroad)\n    else\n      begin\n        inc(numnodes);\n        nodex[numnodes] := (nodex[nodea] + nodex[nodeb]) / 2;\n        nodey[numnodes] := (nodey[nodea] + nodey[nodeb]) / 2;\n        marknode(numnodes, cyan, roadradius);\n        linkup(nodea, numnodes);\n        linkup(numnodes, nodeb)\n      end\n  End;\n\n  Procedure joinup(thisnode: integer);\n  Var i, j, dist: integer;\n      continue: boolean;\n  Begin\n    for i := 1 to numnodes do\n      nodedist[i] := maxint;\n    nodedist[thisnode] := 0;\n    continue := true;\n    while continue do\n      begin\n        continue := false;\n        for i := 1 to numedges do\n          begin\n            if nodedist[edge1[i]] < maxint then\n              begin\n                if nodedist[edge1[i]] + edgelen[i] < nodedist[edge2[i]] then\n                  begin\n                    nodedist[edge2[i]] := nodedist[edge1[i]] + edgelen[i];\n                    continue := true\n                  end\n              end;\n            if nodedist[edge2[i]] < maxint then\n              begin\n                if nodedist[edge2[i]] + edgelen[i] < nodedist[edge1[i]] then\n                  begin\n                    nodedist[edge1[i]] := nodedist[edge2[i]] + edgelen[i];\n                    continue := true\n                  end\n              end\n          end\n      end;\n    i := 0;\n    continue := true;\n    while (i < numnodes) and continue do\n      begin\n        inc(i);\n        dist := hypot(nodex[i] - nodex[thisnode], nodey[i] - nodey[thisnode], 1);\n        if (i <> thisnode) and (nodedist[i] > 1000) and (dist < mindistance * 2) then\n          begin\n            makeedge(thisnode, i, linkroad);\n            continue := false\n          end\n      end\n  End;\n\nBEGIN\n  thickness(6);\n  numnodes := 0;\n  numedges := 0;\n  while numnodes < suffnodes do\n    begin\n      inc(numnodes);\n      repeat\n        nodex[numnodes] := random(1000);\n        nodey[numnodes] := random(1000);\n        m := closest(numnodes)\n      until m >= 0;\n      marknode(numnodes, red, noderadius);\n      if m > 0 then\n        linkup(m, numnodes)\n    end;\n  for m := 1 to numnodes do\n    joinup(m)\nEND.",
  "usage":[
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":3, "lines":"38 49 51"}
      ],
      "total":3
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"blot", "level":1, "count":1, "lines":"40"},
        {"name":"polyline", "level":2, "count":1, "lines":"52"}
      ],
      "total":2
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":2, "lines":"39 50"},
        {"name":"thickness", "level":1, "count":1, "lines":"116"}
      ],
      "total":3
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"inc", "level":1, "count":4, "lines":"45 61 105 121"},
        {"name":"hypot", "level":2, "count":4, "lines":"25 48 57 106"},
        {"name":"random", "level":2, "count":2, "lines":"123 124"},
        {"name":"maxint", "level":3, "count":4, "lines":"21 75 83 91"}
      ],
      "total":14
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":10, "lines":"23 26 32 57 83 85 91 93 107 128"},
        {"name":"else", "level":1, "count":1, "lines":"59"},
        {"name":"for", "level":1, "count":4, "lines":"22 74 81 131"},
        {"name":"repeat", "level":2, "count":1, "lines":"122"},
        {"name":"while", "level":2, "count":3, "lines":"78 103 119"},
        {"name":"procedure", "level":2, "count":4, "lines":"36 43 55 70"},
        {"name":"function", "level":3, "count":1, "lines":"17"}
      ],
      "total":24
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"makeedge", "level":0, "count":2, "lines":"58 109"},
        {"name":"marknode", "level":0, "count":2, "lines":"64 127"},
        {"name":"linkup", "level":0, "count":3, "lines":"65 66 129"},
        {"name":"closest", "level":0, "count":1, "lines":"125"},
        {"name":"joinup", "level":0, "count":1, "lines":"132"}
      ],
      "total":9
    }
  ],
  "pcode":[
    [112,18,1,1,112,0,123,112,6,2,123,4,112,4521,124,112,4539,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,26,119,25],
    [112,500,119,26],
    [116,528,119,527],
    [112,500,119,528],
    [116,1030,119,1029],
    [112,500,119,1030],
    [116,1533,119,1532],
    [112,1000,119,1533],
    [116,2535,119,2534],
    [112,1000,119,2535],
    [116,3537,119,3536],
    [112,1000,119,3537],
    [128,100],
    [133,1],
    [139,12,5],
    [117,12,1,112,5,124,120,12,2],
    [112,0,120,12,1],
    [6,120,12,4],
    [112,1],
    [120,12,3,113,1531],
    [114,12,3,37,129,30],
    [114,12,3,114,12,2,33,129,29],
    [113,25,114,12,2,112,1,27,2,127,26,4,122,113,25,114,12,3,112,1,27,2,127,26,4,122,27,113,527,114,12,2,112,1,27,2,127,26,4,122,113,527,114,12,3,112,1,27,2,127,26,4,122,27,112,1,50,120,12,5],
    [114,12,5,114,12,4,34,129,29],
    [114,12,5,120,12,4],
    [114,12,3,120,12,1],
    [114,12,3,4,128,22],
    [114,12,4,112,40,34,129,32],
    [112,1,23,120,12,1],
    [113,12,119,17,140,12,134,132],
    [133,2],
    [139,13,3],
    [117,13,1,112,3,124,120,13,3,120,13,2,120,13,1],
    [113,25,114,13,1,112,1,27,2,127,26,4,122,113,527,114,13,1,112,1,27,2,127,26,4,122,88],
    [114,13,2,87],
    [114,13,3,108],
    [140,13,134,132],
    [133,3],
    [139,14,3],
    [117,14,1,112,3,124,120,14,3,120,14,2,120,14,1],
    [116,4538,1,122,4,2,123],
    [113,1532,113,4538,112,1,27,2,127,26,4,114,14,1,2,123],
    [113,2534,113,4538,112,1,27,2,127,26,4,114,14,2,2,123],
    [113,3536,113,4538,112,1,27,2,127,26,4,113,25,114,14,1,112,1,27,2,127,26,4,122,113,25,114,14,2,112,1,27,2,127,26,4,122,27,113,527,114,14,1,112,1,27,2,127,26,4,122,113,527,114,14,2,112,1,27,2,127,26,4,122,27,112,1,50,2,123],
    [113,25,114,14,1,112,1,27,2,127,26,4,122,113,527,114,14,1,112,1,27,2,127,26,4,122,88],
    [114,14,3,87],
    [113,25,114,14,2,112,1,27,2,127,26,4,122,113,527,114,14,2,112,1,27,2,127,26,4,122,88],
    [112,2,105],
    [140,14,134,132],
    [133,4],
    [139,15,2],
    [117,15,1,112,2,124,120,15,2,120,15,1],
    [113,25,114,15,1,112,1,27,2,127,26,4,122,113,25,114,15,2,112,1,27,2,127,26,4,122,27,113,527,114,15,1,112,1,27,2,127,26,4,122,113,527,114,15,2,112,1,27,2,127,26,4,122,27,112,1,50,112,40,112,2,28,34,129,58],
    [114,15,1,114,15,2,112,0,131,40],
    [128,64],
    [116,1531,1,122,4,2,123],
    [113,25,113,1531,112,1,27,2,127,26,4,113,25,114,15,1,112,1,27,2,127,26,4,122,113,25,114,15,2,112,1,27,2,127,26,4,122,26,112,2,29,2,123],
    [113,527,113,1531,112,1,27,2,127,26,4,113,527,114,15,1,112,1,27,2,127,26,4,122,113,527,114,15,2,112,1,27,2,127,26,4,122,26,112,2,29,2,123],
    [113,1531,112,65535,112,4,131,33],
    [114,15,1,113,1531,131,52],
    [113,1531,114,15,2,131,52],
    [140,15,134,132],
    [133,5],
    [139,16,5],
    [117,16,1,112,5,124,120,16,1],
    [112,1],
    [120,16,2,113,1531],
    [114,16,2,37,129,73],
    [113,1029,114,16,2,112,1,27,2,127,26,4,6,2,123],
    [114,16,2,4,128,69],
    [113,1029,114,16,1,112,1,27,2,127,26,4,112,0,2,123],
    [112,-1,120,16,5],
    [114,16,5,129,90],
    [112,0,120,16,5],
    [112,1],
    [120,16,2,113,4538],
    [114,16,2,37,129,89],
    [113,1029,113,1532,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,6,34,129,84],
    [113,1029,113,1532,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,113,3536,114,16,2,112,1,27,2,127,26,4,122,26,113,1029,113,2534,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,34,129,84],
    [113,1029,113,2534,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,113,1029,113,1532,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,113,3536,114,16,2,112,1,27,2,127,26,4,122,26,2,123],
    [112,-1,120,16,5],
    [113,1029,113,2534,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,6,34,129,88],
    [113,1029,113,2534,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,113,3536,114,16,2,112,1,27,2,127,26,4,122,26,113,1029,113,1532,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,34,129,88],
    [113,1029,113,1532,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,113,1029,113,2534,114,16,2,112,1,27,2,127,26,4,122,112,1,27,2,127,26,4,122,113,3536,114,16,2,112,1,27,2,127,26,4,122,26,2,123],
    [112,-1,120,16,5],
    [114,16,2,4,128,78],
    [128,75],
    [112,0,120,16,2],
    [112,-1,120,16,5],
    [114,16,2,113,1531,34,114,16,5,17,129,99],
    [117,16,2,1,122,4,2,123],
    [113,25,114,16,2,112,1,27,2,127,26,4,122,113,25,114,16,1,112,1,27,2,127,26,4,122,27,113,527,114,16,2,112,1,27,2,127,26,4,122,113,527,114,16,1,112,1,27,2,127,26,4,122,27,112,1,50,120,16,4],
    [114,16,2,114,16,1,33,113,1029,114,16,2,112,1,27,2,127,26,4,122,112,1000,35,17,114,16,4,112,40,112,2,28,34,17,129,98],
    [114,16,1,114,16,2,112,255,131,40],
    [112,0,120,16,5],
    [128,92],
    [140,16,134,132],
    [112,6,85],
    [112,0,119,1531],
    [112,0,119,4538],
    [113,1531,112,400,34,129,114],
    [116,1531,1,122,4,2,123],
    [113,25,113,1531,112,1,27,2,127,26,4,112,1000,7,2,123],
    [113,527,113,1531,112,1,27,2,127,26,4,112,1000,7,2,123],
    [113,1531,131,16],
    [114,17,1,119,4539],
    [113,4539,112,0,37,129,105],
    [113,1531,112,16711680,112,6,131,33],
    [113,4539,112,0,35,129,113],
    [113,4539,113,1531,131,52],
    [128,103],
    [112,1],
    [119,4539,113,1531],
    [113,4539,37,129,119],
    [113,4539,131,65],
    [113,4539,4,128,115],
    [130]
  ]
}
