{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Wave interference tutor",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"11:59:15",
  "code":"PROGRAM Interference;\nCONST sectors = 7;\n      wavecol1 = red;\n      wavecol2 = skyblue;\n      waveaddcol = indigo;\n      clocks = 16;\n      report = false;\nVAR x, y: integer;\n    sectcol: array[0..sectors] of integer;\n    boundary: array[0..sectors] of integer;\n    clockx: array[1..clocks] of integer;\n    cradius, hand: integer;\n    leftx, rightx: integer;\n    dimensions: integer;\n    wavelength1, wavelength2: integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    sectcol[0] := violet;\n    sectcol[1] := blue;\n    sectcol[2] := cyan;\n    sectcol[3] := lime;\n    sectcol[4] := yellow;\n    sectcol[5] := orange;\n    sectcol[6] := red;\n    sectcol[7] := violet;\n    for n := 0 to sectors do\n      boundary[n] := divmult(360, sectors, n)\n  End;\n\n  Function wavecolour(n: integer): integer;\n  Var col1, col2: integer;\n      mix1, mix2: integer;\n  Begin\n    col2 := 0;\n    repeat\n      inc(col2)\n    until boundary[col2] >= n;\n    col1 := col2 - 1;\n    result := mixcols(sectcol[col1], sectcol[col2], boundary[col2] - n, n - boundary[col1])\n  End;\n\n  Procedure clocksetup;\n  Var n: integer;\n  Begin\n    for n := 1 to clocks do\n      clockx[n] := divmult(1000, clocks * 2 + 2, n * 2);\n    leftx := clockx[1];\n    rightx := clockx[clocks];\n    cradius := (rightx - leftx) / clocks / 2;\n    hand := cradius * 6 / 7\n  End;\n\n  Procedure drawwave(s: string; top, wavelength, wavecol: integer);\n  Var n, turn: integer;\n  Begin\n    if dimensions = 1 then\n      begin\n        setxy(leftx, top + 25);\n        colour(black);\n        drawxy(rightx - leftx, 0);\n        setxy(leftx, top);\n        colour(wavecol)\n      end;\n    for n := 0 to rightx - leftx do\n      if dimensions = 1 then\n        begin\n          setxy(leftx + n, top + 25 - cos(divmult(n mod wavelength, wavelength, 360), 1, 25));\n          polyline(2)\n        end\n      else\n        begin\n          setxy(leftx + n, top);\n          colour(wavecolour(divmult(n mod wavelength, wavelength, 360)));\n          drawxy(0, 50)\n        end;\n    for n := 1 to clocks do\n      begin\n        setxy(clockx[n], top + 70 + cradius);\n        colour(black);\n        circle(cradius);\n        blot(5);\n        turn := divmult((clockx[n] - leftx) mod wavelength, wavelength, 360);\n        if report then\n          writeln(s + ', clock ' + str(n) + ': dist=' + str(clockx[n]) + '; turn=' + str(turn));\n        turnxy(sin(turn, 1, 1000), -cos(turn, 1, 1000));\n        colour(wavecol);\n        forward(hand)\n      end\n  End;\n\n  Procedure drawresult(top: integer);\n  Var n: integer;\n      turn1, turn2: integer;\n      waveaddi, waveaddj, waveadd: integer;\n  Begin\n    if dimensions = 1 then\n      begin\n        setxy(leftx, top + 50);\n        colour(black);\n        drawxy(rightx - leftx, 0);\n        setxy(leftx, top);\n        colour(waveaddcol)\n      end;\n    for n := 0 to rightx - leftx do\n      begin\n        turn1 := divmult(n mod wavelength1, wavelength1, 360);\n        turn2 := divmult(n mod wavelength2, wavelength2, 360);\n        waveaddi := sin(turn1, 1, 500) + sin(turn2, 1, 500);\n        waveaddj := cos(turn1, 1, 500) + cos(turn2, 1, 500);\n        waveadd := hypot(waveaddi, waveaddj, 1);\n        if dimensions = 1 then\n          begin\n            setxy(leftx + n, top + 50 - divmult(waveaddj, 1000, 50));\n            polyline(2)\n          end\n        else\n          begin\n            setxy(leftx + n, top);\n            turnxy(waveaddi, -waveaddj);\n            colour(mixcols(wavecolour(turtd), black, waveadd, 1000 - waveadd));\n            if mixcols(wavecolour(turtd), black, waveadd, 1000 - waveadd) < 51 then\n              colour(black);\n            drawxy(0, 100)\n          end\n      end;\n    for n := 1 to clocks do\n      begin\n        setxy(clockx[n], top + 280 + 2 * cradius - (150 * (n mod 2)));\n        colour(black);\n        circle(cradius * 2);\n        blot(5);\n        turn1 := divmult((clockx[n] - leftx) mod wavelength1, wavelength1, 360);\n        turn2 := divmult((clockx[n] - leftx) mod wavelength2, wavelength2, 360);\n        waveaddi := sin(turn1, 1, 500) + sin(turn2, 1, 500);\n        waveaddj := cos(turn1, 1, 500) + cos(turn2, 1, 500);\n        waveadd := hypot(waveaddi, waveaddj, 1);\n        turnxy(waveaddi, -waveaddj);\n        thickness(6);\n        colour(waveaddcol);\n        forward(divmult(waveadd, 1000, hand * 2));\n        setxy(clockx[n], top + 280 + 2 * cradius - (150 * (n mod 2)));\n        thickness(4);\n        direction(turn1);\n        colour(wavecol1);\n        forward(hand);\n        direction(turn2);\n        colour(wavecol2);\n        forward(hand);\n        thickness(2)\n      end\n  End;\n\n  Procedure randomwaves;\n  Begin\n    wavelength1 := random(30) * 10 + 200;\n    wavelength2 := random(30) * 10 + 200\n  End;\n\n  Procedure changeprompt;\n  Begin\n    console(true, white);\n    writeln('Press \"1\" or \"2\" for the dimensionality required,');\n    write('or press \"R\" to pick random new wavelengths: ');\n    repeat\n    until (abs(?key) = \\1) or (abs(?key) = \\2) or (abs(?key) = \\r);\n    if abs(?key) = \\1 then\n      dimensions := 1\n    else\n    if abs(?key) = \\2 then\n      dimensions := 2\n    else\n      randomwaves;\n    reset(?key);\n    reset(\\keybuffer)\n  End;\n\nBEGIN\n  colsetup;\n  clocksetup;\n  dimensions := 1;\n  wavelength1 := 300;\n  wavelength2 := 420;\n  repeat\n    blank(white);\n    noupdate;\n    setxy(leftx, 25);\n    colour(black);\n    print('Component waves (wavelengths ' + str(wavelength1) + ', ' + str(wavelength2) + ')', 4,\n     30);\n    drawwave('Wave 1', 100, wavelength1, wavecol1);\n    drawwave('Wave 2', 300, wavelength2, wavecol2);\n    setxy(leftx, 505);\n    colour(black);\n    print('Resultant wave', 4, 30);\n    drawresult(580);\n    changeprompt\n  until 0 = 1\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"forward", "level":1, "count":4, "lines":"89 142 147 150"},
        {"name":"drawxy", "level":2, "count":4, "lines":"62 76 102 125"}
      ],
      "total":8
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"direction", "level":1, "count":2, "lines":"145 148"},
        {"name":"setxy", "level":1, "count":13, "lines":"60 63 69 74 80 100 103 115 120 130 143 188 194"},
        {"name":"turnxy", "level":2, "count":3, "lines":"87 121 139"}
      ],
      "total":18
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"blot", "level":1, "count":2, "lines":"83 133"},
        {"name":"circle", "level":1, "count":2, "lines":"82 132"},
        {"name":"polyline", "level":2, "count":2, "lines":"70 116"}
      ],
      "total":6
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":15, "lines":"61 64 75 81 88 101 104 122 124 131 141 146 149 189 195"},
        {"name":"thickness", "level":1, "count":3, "lines":"140 144 151"},
        {"name":"console", "level":2, "count":1, "lines":"163"},
        {"name":"mixcols", "level":3, "count":3, "lines":"41 122 123"}
      ],
      "total":22
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"blank", "level":1, "count":1, "lines":"186"},
        {"name":"noupdate", "level":1, "count":1, "lines":"187"}
      ],
      "total":2
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"abs", "level":1, "count":5, "lines":"167 167 167 168 171"},
        {"name":"inc", "level":1, "count":1, "lines":"38"},
        {"name":"hypot", "level":2, "count":2, "lines":"112 138"},
        {"name":"random", "level":2, "count":2, "lines":"157 158"},
        {"name":"divmult", "level":3, "count":11, "lines":"29 48 69 75 84 108 109 115 134 135 142"}
      ],
      "total":21
    },
    {
      "category": "Trig / exp / log functions",
      "expressions":[
        {"name":"cos", "level":2, "count":6, "lines":"69 87 111 111 137 137"},
        {"name":"sin", "level":2, "count":5, "lines":"87 110 110 136 136"}
      ],
      "total":11
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":2, "lines":"190 196"},
        {"name":"write", "level":1, "count":1, "lines":"165"},
        {"name":"writeln", "level":1, "count":2, "lines":"86 164"}
      ],
      "total":5
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":5, "lines":"86 86 86 190 190"}
      ],
      "total":5
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"reset", "level":3, "count":2, "lines":"175 176"}
      ],
      "total":2
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":8, "lines":"58 67 85 98 113 123 168 171"},
        {"name":"else", "level":1, "count":4, "lines":"72 118 170 173"},
        {"name":"for", "level":1, "count":6, "lines":"28 47 66 78 106 128"},
        {"name":"repeat", "level":2, "count":3, "lines":"37 166 185"},
        {"name":"procedure", "level":2, "count":6, "lines":"17 44 55 93 155 161"},
        {"name":"function", "level":3, "count":1, "lines":"32"}
      ],
      "total":28
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"wavecolour", "level":0, "count":3, "lines":"75 122 123"},
        {"name":"randomwaves", "level":0, "count":1, "lines":"174"},
        {"name":"colsetup", "level":0, "count":1, "lines":"180"},
        {"name":"clocksetup", "level":0, "count":1, "lines":"181"},
        {"name":"drawwave", "level":0, "count":2, "lines":"192 193"},
        {"name":"drawresult", "level":0, "count":1, "lines":"197"},
        {"name":"changeprompt", "level":0, "count":1, "lines":"198"}
      ],
      "total":10
    }
  ],
  "pcode":[
    [112,20,1,1,112,0,123,112,6,2,123,4,112,53,124,112,73,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,30,119,29],
    [112,8,119,30],
    [116,40,119,39],
    [112,8,119,40],
    [116,50,119,49],
    [112,16,119,50],
    [128,161],
    [133,1],
    [139,12,1],
    [117,12,1,112,1,124],
    [113,29,112,0,2,127,26,4,112,9055202,2,123],
    [113,29,112,1,2,127,26,4,112,255,2,123],
    [113,29,112,2,2,127,26,4,112,65535,2,123],
    [113,29,112,3,2,127,26,4,112,65280,2,123],
    [113,29,112,4,2,127,26,4,112,16776960,2,123],
    [113,29,112,5,2,127,26,4,112,16755200,2,123],
    [113,29,112,6,2,127,26,4,112,16711680,2,123],
    [113,29,112,7,2,127,26,4,112,9055202,2,123],
    [112,0],
    [120,12,1,112,7],
    [114,12,1,37,129,26],
    [113,39,114,12,1,2,127,26,4,112,360,112,7,114,12,1,48,2,123],
    [114,12,1,4,128,22],
    [140,12,134,132],
    [133,2],
    [139,13,6],
    [117,13,1,112,6,124,120,13,2],
    [112,0,120,13,4],
    [117,13,4,1,122,4,2,123],
    [113,39,114,13,4,2,127,26,4,122,114,13,2,37,129,31],
    [114,13,4,112,1,27,120,13,3],
    [113,29,114,13,3,2,127,26,4,122,113,29,114,13,4,2,127,26,4,122,113,39,114,13,4,2,127,26,4,122,114,13,2,27,114,13,2,113,39,114,13,3,2,127,26,4,122,27,102,120,13,1],
    [113,13,119,19,140,13,134,132],
    [133,3],
    [139,14,1],
    [117,14,1,112,1,124],
    [112,1],
    [120,14,1,112,16],
    [114,14,1,37,129,44],
    [113,49,114,14,1,112,1,27,2,127,26,4,112,1000,112,16,112,2,28,112,2,26,114,14,1,112,2,28,48,2,123],
    [114,14,1,4,128,40],
    [113,49,112,1,112,1,27,2,127,26,4,122,119,69],
    [113,49,112,16,112,1,27,2,127,26,4,122,119,70],
    [113,70,113,69,27,112,16,29,112,2,29,119,67],
    [113,67,112,6,28,112,7,29,119,68],
    [140,14,134,132],
    [133,4],
    [139,15,40],
    [117,15,1,112,40,124,120,15,38,120,15,37,120,15,36,117,15,2,1,1,4,120,15,1,112,33,2,123,4,126],
    [113,71,112,1,32,129,58],
    [113,69,114,15,36,112,25,26,88],
    [112,0,87],
    [113,70,113,69,27,112,0,90],
    [113,69,114,15,36,88],
    [114,15,38,87],
    [112,0],
    [120,15,39,113,70,113,69,27],
    [114,15,39,37,129,70],
    [113,71,112,1,32,129,65],
    [113,69,114,15,39,26,114,15,36,112,25,26,114,15,39,114,15,37,31,114,15,37,112,360,48,112,1,112,25,58,27,88],
    [112,2,105],
    [128,69],
    [113,69,114,15,39,26,114,15,36,88],
    [114,15,39,114,15,37,31,114,15,37,112,360,48,131,27],
    [114,19,1,87],
    [112,0,112,50,90],
    [114,15,39,4,128,59],
    [112,1],
    [120,15,39,112,16],
    [114,15,39,37,129,84],
    [113,49,114,15,39,112,1,27,2,127,26,4,122,114,15,36,112,70,26,113,67,26,88],
    [112,0,87],
    [113,67,107],
    [112,5,108],
    [113,49,114,15,39,112,1,27,2,127,26,4,122,113,69,27,114,15,37,31,114,15,37,112,360,48,120,15,40],
    [112,0,129,80],
    [114,15,1,118,8,44,32,99,108,111,99,107,32,64,114,15,39,11,64,118,7,58,32,100,105,115,116,61,64,113,49,114,15,39,112,1,27,2,127,26,4,122,11,64,118,7,59,32,116,117,114,110,61,64,114,15,40,11,64,169,170,142],
    [114,15,40,112,1,112,1000,57,114,15,40,112,1,112,1000,58,23,95],
    [114,15,38,87],
    [113,68,91],
    [114,15,39,4,128,71],
    [140,15,134,132],
    [133,5],
    [139,16,7],
    [117,16,1,112,7,124,120,16,1],
    [113,71,112,1,32,129,94],
    [113,69,114,16,1,112,50,26,88],
    [112,0,87],
    [113,70,113,69,27,112,0,90],
    [113,69,114,16,1,88],
    [112,4915330,87],
    [112,0],
    [120,16,2,113,70,113,69,27],
    [114,16,2,37,129,115],
    [114,16,2,113,72,31,113,72,112,360,48,120,16,3],
    [114,16,2,113,73,31,113,73,112,360,48,120,16,4],
    [114,16,3,112,1,112,500,57,114,16,4,112,1,112,500,57,26,120,16,5],
    [114,16,3,112,1,112,500,58,114,16,4,112,1,112,500,58,26,120,16,6],
    [114,16,5,114,16,6,112,1,50,120,16,7],
    [113,71,112,1,32,129,106],
    [113,69,114,16,2,26,114,16,1,112,50,26,114,16,6,112,1000,112,50,48,27,88],
    [112,2,105],
    [128,114],
    [113,69,114,16,2,26,114,16,1,88],
    [114,16,5,114,16,6,23,95],
    [113,23,131,27],
    [114,19,1,112,0,114,16,7,112,1000,114,16,7,27,102,87],
    [113,23,131,27],
    [114,19,1,112,0,114,16,7,112,1000,114,16,7,27,102,112,51,34,129,113],
    [112,0,87],
    [112,0,112,100,90],
    [114,16,2,4,128,95],
    [112,1],
    [120,16,2,112,16],
    [114,16,2,37,129,141],
    [113,49,114,16,2,112,1,27,2,127,26,4,122,114,16,1,112,280,26,112,2,113,67,28,26,112,150,114,16,2,112,2,31,28,27,88],
    [112,0,87],
    [113,67,112,2,28,107],
    [112,5,108],
    [113,49,114,16,2,112,1,27,2,127,26,4,122,113,69,27,113,72,31,113,72,112,360,48,120,16,3],
    [113,49,114,16,2,112,1,27,2,127,26,4,122,113,69,27,113,73,31,113,73,112,360,48,120,16,4],
    [114,16,3,112,1,112,500,57,114,16,4,112,1,112,500,57,26,120,16,5],
    [114,16,3,112,1,112,500,58,114,16,4,112,1,112,500,58,26,120,16,6],
    [114,16,5,114,16,6,112,1,50,120,16,7],
    [114,16,5,114,16,6,23,95],
    [112,6,85],
    [112,4915330,87],
    [114,16,7,112,1000,113,68,112,2,28,48,91],
    [113,49,114,16,2,112,1,27,2,127,26,4,122,114,16,1,112,280,26,112,2,113,67,28,26,112,150,114,16,2,112,2,31,28,27,88],
    [112,4,85],
    [114,16,3,83],
    [112,16711680,87],
    [113,68,91],
    [114,16,4,83],
    [112,45311,87],
    [113,68,91],
    [112,2,85],
    [114,16,2,4,128,116],
    [140,16,134,132],
    [133,6],
    [112,30,7,112,10,28,112,200,26,119,72],
    [112,30,7,112,10,28,112,200,26,119,73],
    [134,132],
    [133,7],
    [112,-1,112,16777215,167],
    [118,49,80,114,101,115,115,32,34,49,34,32,111,114,32,34,50,34,32,102,111,114,32,116,104,101,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,32,114,101,113,117,105,114,101,100,44,169,170,142],
    [118,45,111,114,32,112,114,101,115,115,32,34,82,34,32,116,111,32,112,105,99,107,32,114,97,110,100,111,109,32,110,101,119,32,119,97,118,101,108,101,110,103,116,104,115,58,32,169,142],
    [112,-9,160,24,112,49,32,112,-9,160,24,112,50,32,18,112,-9,160,24,112,82,32,18,129,150],
    [112,-9,160,24,112,49,32,129,154],
    [112,1,119,71],
    [128,158],
    [112,-9,160,24,112,50,32,129,157],
    [112,2,119,71],
    [128,158],
    [131,142],
    [112,-9,161],
    [112,0,161],
    [134,132],
    [131,10],
    [131,36],
    [112,1,119,71],
    [112,300,119,72],
    [112,420,119,73],
    [112,16777215,96],
    [112,0,146],
    [113,69,112,25,88],
    [112,0,87],
    [118,29,67,111,109,112,111,110,101,110,116,32,119,97,118,101,115,32,40,119,97,118,101,108,101,110,103,116,104,115,32,113,72,11,64,118,2,44,32,64,113,73,11,64,112,41,9,64,112,4,112,30,168,142],
    [118,6,87,97,118,101,32,49,112,100,113,72,112,16711680,142,131,49],
    [118,6,87,97,118,101,32,50,112,300,113,73,112,45311,142,131,49],
    [113,69,112,505,88],
    [112,0,87],
    [118,14,82,101,115,117,108,116,97,110,116,32,119,97,118,101,112,4,112,30,168,142],
    [112,580,131,85],
    [131,146],
    [112,0,112,1,32,129,166],
    [130]
  ]
}
