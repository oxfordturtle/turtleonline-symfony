{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Fibonacci recursion and iteration [dynamic programming]",
  "author":"Peter Millican",
  "date":"28/07/2020",
  "time":"13:25:10",
  "code":"PROGRAM Fibonaccis;\n{specify number of values to be calculated}\nCONST lastnum=25;\nVAR count: integer;\n    fibSave: array[1..lastnum] of integer;\n\n {calculates nth Fibonacci number recursively}\n Function fibRecursive(n: integer): integer;\n Begin\n  if (n=1) or (n=2) then\n   result:=1\n  else\n   result:=fibRecursive(n-1)+fibRecursive(n-2)\n End;\n\n {calculates nth Fibonacci number iteratively,}\n {assuming the n-1 and n-2 values have already}\n {been calculated and stored in fibSave array }\n Function fibIterative(n: integer): integer;\n Begin\n  if (n=1) or (n=2) then\n   fibSave[n]:=1\n  else\n   fibSave[n]:=fibSave[n-1]+fibSave[n-2];\n  result:=fibSave[n]\n End;\n\nBEGIN\n {set up and show the output display}\n output(true,cream,true);\n {calculate 25 Fibonacci values recursively (slow)}\n writeln('First, by recursion:');\n timeset(0);\n for count:=1 to lastnum do\n  writeln('fib('+str(count)+') = '+str(fibRecursive(count)));\n writeln('Time taken: '+qstr(time,1000,2)+' seconds');\n writeln('');\n {calculate 25 Fibonacci values iteratively (fast)}\n writeln('Then, by iteration:');\n timeset(0);\n for count:=1 to lastnum do\n  writeln('fib('+str(count)+') = '+str(fibIterative(count)));\n writeln('Time taken: '+qstr(time,1000,2)+' seconds')\nEND.",
  "usage":[
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"output", "level":2, "count":1, "lines":"30"}
      ],
      "total":1
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"writeln", "level":1, "count":7, "lines":"32 35 36 37 39 42 43"}
      ],
      "total":7
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":4, "lines":"35 35 42 42"},
        {"name":"qstr", "level":2, "count":2, "lines":"36 43"}
      ],
      "total":6
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"time", "level":2, "count":2, "lines":"36 43"},
        {"name":"timeset", "level":2, "count":2, "lines":"33 40"}
      ],
      "total":4
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":2, "lines":"10 21"},
        {"name":"else", "level":1, "count":2, "lines":"12 23"},
        {"name":"for", "level":1, "count":2, "lines":"34 41"},
        {"name":"function", "level":3, "count":2, "lines":"8 19"}
      ],
      "total":8
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"fibrecursive", "level":0, "count":3, "lines":"13 13 35"},
        {"name":"fibiterative", "level":0, "count":1, "lines":"42"}
      ],
      "total":4
    }
  ],
  "pcode":[
    [112,15,1,1,112,0,123,112,6,2,123,4,112,34,124,112,49,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,24,119,23],
    [112,25,119,24],
    [128,25],
    [133,1],
    [139,12,2],
    [117,12,1,112,2,124,120,12,2],
    [114,12,2,112,1,32,114,12,2,112,2,32,18,129,12],
    [112,1,120,12,1],
    [128,15],
    [114,12,2,112,1,27,131,6],
    [114,14,1,114,12,2,112,2,27,131,6],
    [114,14,1,26,120,12,1],
    [113,12,119,14,140,12,134,132],
    [133,2],
    [139,13,2],
    [117,13,1,112,2,124,120,13,2],
    [114,13,2,112,1,32,114,13,2,112,2,32,18,129,22],
    [113,23,114,13,2,112,1,27,2,127,26,4,112,1,2,123],
    [128,23],
    [113,23,114,13,2,112,1,27,2,127,26,4,113,23,114,13,2,112,1,27,112,1,27,2,127,26,4,122,113,23,114,13,2,112,2,27,112,1,27,2,127,26,4,122,26,2,123],
    [113,23,114,13,2,112,1,27,2,127,26,4,122,120,13,1],
    [113,13,119,14,140,13,134,132],
    [112,-1,112,16777147,112,-1,166],
    [118,20,70,105,114,115,116,44,32,98,121,32,114,101,99,117,114,115,105,111,110,58,169,170,142],
    [112,0,173],
    [112,1],
    [119,22,112,25],
    [113,22,37,129,34],
    [118,4,102,105,98,40,113,22,11,64,118,4,41,32,61,32,64,113,22,131,6],
    [114,14,1,11,64,169,170],
    [113,22,4,142,128,29],
    [118,12,84,105,109,101,32,116,97,107,101,110,58,32,172,112,1000,112,2,14,64,118,8,32,115,101,99,111,110,100,115,64,169,170,142],
    [118,0,169,170,142],
    [118,19,84,104,101,110,44,32,98,121,32,105,116,101,114,97,116,105,111,110,58,169,170,142],
    [112,0,173],
    [112,1],
    [119,22,112,25],
    [113,22,37,129,44],
    [118,4,102,105,98,40,113,22,11,64,118,4,41,32,61,32,64,113,22,131,16],
    [114,14,1,11,64,169,170],
    [113,22,4,142,128,39],
    [118,12,84,105,109,101,32,116,97,107,101,110,58,32,172,112,1000,112,2,14,64,118,8,32,115,101,99,111,110,100,115,64,169,170,142],
    [130]
  ]
}
