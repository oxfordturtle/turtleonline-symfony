{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Comparison of sorting methods",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"12:00:08",
  "code":"PROGRAM Sorting;\nCONST methods = 4;\n      n = 100;\n      cols = 10;\n      tries = 10;\n      checking = true;\nVAR a: array[0..n] of integer;\n    comps, swaps: integer;\n    caption: array[1..methods] of string;\n    comptotal, swaptotal: array[1..methods] of integer;\n    round, m: integer;\n\n  Procedure setup;\n  Begin\n    caption[1] := 'Bubblesort:';\n    caption[2] := 'Selectionsort:';\n    caption[3] := 'Insertionsort:';\n    caption[4] := 'Quicksort:'\n  End;\n\n  Procedure init;\n  Var i: integer;\n  Begin\n    for i := 1 to n do\n      a[i] := i;\n    for i := 1 to methods do\n      begin\n        comptotal[i] := 0;\n        swaptotal[i] := 0\n      end\n  End;\n\n  Function lessthan(x, y: integer): boolean;\n  Begin\n    result := (x < y);\n    inc(comps)\n  End;\n\n  Procedure swap(x, y: integer);\n  Var t: integer;\n  Begin\n    t := a[x];\n    a[x] := a[y];\n    a[y] := t;\n    inc(swaps)\n  End;\n\n  Function ordered: boolean;\n  Var i: integer;\n  Begin\n    result := true;\n    for i := 2 to n do\n      if a[i - 1] > a[i] then\n        result := false\n  End;\n\n  Procedure list;\n  Var i: integer;\n  Begin\n    write('     ');\n    for i := 1 to n do\n      begin\n        write(str(a[i]) + ' ');\n        if i mod cols = 0 then\n          begin\n            writeln('');\n            write('     ')\n          end\n      end;\n    writeln('')\n  End;\n\n  Procedure randomise;\n  Var i, j: integer;\n  Begin\n    for i := 1 to n do\n      begin\n        j := random(n) + 1;\n        swap(i, j)\n      end\n  End;\n\n  Procedure bubblesort;\n  Var i, numswaps: integer;\n  Begin\n    repeat\n      numswaps := 0;\n      for i := 1 to n - 1 do\n        if lessthan(a[i + 1], a[i]) then\n          begin\n            swap(i, i + 1);\n            inc(numswaps)\n          end\n    until numswaps = 0\n  End;\n\n  Procedure selectionsort;\n  Var i, j: integer;\n      lowsofar: integer;\n  Begin\n    for i := 1 to n - 1 do\n      begin\n        lowsofar := i;\n        for j := i + 1 to n do\n          if lessthan(a[j], a[lowsofar]) then\n            lowsofar := j;\n        if lowsofar <> i then\n          swap(i, lowsofar)\n      end\n  End;\n\n  Procedure insertionsort;\n  Var i, j: integer;\n  Begin\n    for i := 2 to n do\n      begin\n        j := i;\n        while (j > 1) and lessthan(a[j], a[j - 1]) do\n          begin\n            swap(j - 1, j);\n            dec(j)\n          end\n      end\n  End;\n\n  Procedure quicksort;\n\n    procedure qsort(left, right: integer);\n    var m, i: integer;\n    begin\n      if left < right then\n        begin\n          m := left;\n          for i := left + 1 to right do\n            if lessthan(a[i], a[left]) then\n              begin\n                inc(m);\n                swap(m, i)\n              end;\n          swap(left, m);\n          qsort(left, m - 1);\n          qsort(m + 1, right)\n        end\n    end;\n\n  Begin\n    qsort(1, n)\n  End;\n\n  Procedure sort(method: integer);\n  Begin\n    comps := 0;\n    swaps := 0;\n    if method = 1 then\n      bubblesort\n    else\n    if method = 2 then\n      selectionsort\n    else\n    if method = 3 then\n      insertionsort\n    else\n    if method = 4 then\n      quicksort;\n    write(pad(caption[method], ' ', -17) + pad(str(comps), ' ', 4) + ' comparisons');\n    writeln(pad(str(swaps), ' ', 6) + ' swaps');\n    if checking then\n      if not(ordered) then\n        begin\n          writeln('     Sort failed:');\n          list;\n          halt\n        end\n  End;\n\nBEGIN\n  output(true, white, true);\n  setup;\n  init;\n  writeln(str(methods) + ' sorting methods will be compared, each of them being used to');\n  writeln('sort randomised arrays of ' + str(n) + ' items (' + str(tries) +\n     ' times), while keeping');\n  writeln('track of the numbers of comparisons and swaps required.');\n  if checking then\n    writeln('If sorting fails, the program will halt and show the array.');\n  writeln('');\n  for round := 1 to tries do\n    begin\n      for m := 1 to methods do\n        begin\n          randomise;\n          sort(m);\n          comptotal[m] := comptotal[m] + comps;\n          swaptotal[m] := swaptotal[m] + swaps\n        end;\n      writeln('')\n    end;\n  output(true, cream, true);\n  writeln('Averages from sorting ' + str(n) + ' items, over ' + str(tries) + ' trials');\n  writeln('');\n  writeln('               COMPARISONS    SWAPS');\n  for m := 1 to methods do\n    begin\n      write(pad(caption[m], ' ', -17) + pad(qstr(comptotal[m], tries, 1), ' ', 7));\n      writeln(pad(qstr(swaptotal[m], tries, 1), ' ', 11))\n    end\nEND.",
  "usage":[
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"output", "level":2, "count":2, "lines":"177 198"}
      ],
      "total":2
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"dec", "level":1, "count":1, "lines":"121"},
        {"name":"inc", "level":1, "count":4, "lines":"36 45 92 137"},
        {"name":"random", "level":2, "count":1, "lines":"78"}
      ],
      "total":6
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"write", "level":1, "count":5, "lines":"60 63 67 165 204"},
        {"name":"writeln", "level":1, "count":14, "lines":"66 70 166 170 180 181 183 185 186 196 199 200 201 205"},
        {"name":"pad", "level":3, "count":6, "lines":"165 165 166 204 204 205"}
      ],
      "total":25
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":8, "lines":"63 165 166 180 181 181 199 199"},
        {"name":"qstr", "level":2, "count":2, "lines":"204 205"}
      ],
      "total":10
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"halt", "level":1, "count":1, "lines":"172"}
      ],
      "total":1
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":14, "lines":"53 64 89 105 107 131 135 154 157 160 163 167 168 184"},
        {"name":"else", "level":1, "count":3, "lines":"156 159 162"},
        {"name":"for", "level":1, "count":13, "lines":"24 26 52 61 76 88 101 104 115 134 187 189 202"},
        {"name":"repeat", "level":2, "count":1, "lines":"86"},
        {"name":"while", "level":2, "count":1, "lines":"118"},
        {"name":"procedure", "level":2, "count":11, "lines":"13 21 39 57 73 83 97 112 126 128 150"},
        {"name":"function", "level":3, "count":2, "lines":"33 48"}
      ],
      "total":45
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"swap", "level":0, "count":6, "lines":"79 91 108 120 138 140"},
        {"name":"lessthan", "level":0, "count":4, "lines":"89 105 118 135"},
        {"name":"qsort", "level":0, "count":3, "lines":"141 142 147"},
        {"name":"bubblesort", "level":0, "count":1, "lines":"155"},
        {"name":"selectionsort", "level":0, "count":1, "lines":"158"},
        {"name":"insertionsort", "level":0, "count":1, "lines":"161"},
        {"name":"quicksort", "level":0, "count":1, "lines":"164"},
        {"name":"ordered", "level":0, "count":1, "lines":"168"},
        {"name":"list", "level":0, "count":1, "lines":"171"},
        {"name":"setup", "level":0, "count":1, "lines":"178"},
        {"name":"init", "level":0, "count":1, "lines":"179"},
        {"name":"randomise", "level":0, "count":1, "lines":"191"},
        {"name":"sort", "level":0, "count":1, "lines":"192"}
      ],
      "total":23
    }
  ],
  "pcode":[
    [112,26,1,1,112,0,123,112,6,2,123,4,112,267,124,112,293,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,34,119,33],
    [112,101,119,34],
    [116,139,119,138],
    [112,4,119,139,116,145,119,140],
    [112,33,119,144,116,179,119,141],
    [112,33,119,178,116,213,119,142],
    [112,33,119,212,116,247,119,143],
    [112,33,119,246],
    [116,281,119,280],
    [112,4,119,281],
    [116,287,119,286],
    [112,4,119,287],
    [128,177],
    [133,1],
    [113,138,112,1,112,1,27,2,127,26,4,122,118,11,66,117,98,98,108,101,115,111,114,116,58,2,126,142],
    [113,138,112,2,112,1,27,2,127,26,4,122,118,14,83,101,108,101,99,116,105,111,110,115,111,114,116,58,2,126,142],
    [113,138,112,3,112,1,27,2,127,26,4,122,118,14,73,110,115,101,114,116,105,111,110,115,111,114,116,58,2,126,142],
    [113,138,112,4,112,1,27,2,127,26,4,122,118,10,81,117,105,99,107,115,111,114,116,58,2,126,142],
    [134,132],
    [133,2],
    [139,13,1],
    [117,13,1,112,1,124],
    [112,1],
    [120,13,1,112,100],
    [114,13,1,37,129,30],
    [113,33,114,13,1,2,127,26,4,114,13,1,2,123],
    [114,13,1,4,128,26],
    [112,1],
    [120,13,1,112,4],
    [114,13,1,37,129,36],
    [113,280,114,13,1,112,1,27,2,127,26,4,112,0,2,123],
    [113,286,114,13,1,112,1,27,2,127,26,4,112,0,2,123],
    [114,13,1,4,128,31],
    [140,13,134,132],
    [133,3],
    [139,14,3],
    [117,14,1,112,3,124,120,14,3,120,14,2],
    [114,14,2,114,14,3,34,120,14,1],
    [116,136,1,122,4,2,123],
    [113,14,119,25,140,14,134,132],
    [133,4],
    [139,15,3],
    [117,15,1,112,3,124,120,15,2,120,15,1],
    [113,33,114,15,1,2,127,26,4,122,120,15,3],
    [113,33,114,15,1,2,127,26,4,113,33,114,15,2,2,127,26,4,122,2,123],
    [113,33,114,15,2,2,127,26,4,114,15,3,2,123],
    [116,137,1,122,4,2,123],
    [140,15,134,132],
    [133,5],
    [139,16,2],
    [117,16,1,112,2,124],
    [112,-1,120,16,1],
    [112,2],
    [120,16,2,112,100],
    [114,16,2,37,129,61],
    [113,33,114,16,2,112,1,27,2,127,26,4,122,113,33,114,16,2,2,127,26,4,122,35,129,60],
    [112,0,120,16,1],
    [114,16,2,4,128,56],
    [113,16,119,25,140,16,134,132],
    [133,6],
    [139,17,1],
    [117,17,1,112,1,124],
    [118,5,32,32,32,32,32,169,142],
    [112,1],
    [120,17,1,112,100],
    [114,17,1,37,129,74],
    [113,33,114,17,1,2,127,26,4,122,11,112,32,9,64,169,142],
    [114,17,1,112,10,31,112,0,32,129,73],
    [118,0,169,170,142],
    [118,5,32,32,32,32,32,169,142],
    [114,17,1,4,128,67],
    [118,0,169,170,142],
    [140,17,134,132],
    [133,7],
    [139,18,2],
    [117,18,1,112,2,124],
    [112,1],
    [120,18,1,112,100],
    [114,18,1,37,129,85],
    [112,100,7,112,1,26,120,18,2],
    [114,18,1,114,18,2,131,43],
    [114,18,1,4,128,80],
    [140,18,134,132],
    [133,8],
    [139,19,2],
    [117,19,1,112,2,124],
    [112,0,120,19,2],
    [112,1],
    [120,19,1,112,100,112,1,27],
    [114,19,1,37,129,98],
    [113,33,114,19,1,112,1,26,2,127,26,4,122,113,33,114,19,1,2,127,26,4,122,131,37],
    [114,25,1,129,97],
    [114,19,1,114,19,1,112,1,26,131,43],
    [117,19,2,1,122,4,2,123],
    [114,19,1,4,128,91],
    [114,19,2,112,0,32,129,89],
    [140,19,134,132],
    [133,9],
    [139,20,3],
    [117,20,1,112,3,124],
    [112,1],
    [120,20,1,112,100,112,1,27],
    [114,20,1,37,129,117],
    [114,20,1,120,20,3],
    [114,20,1,112,1,26],
    [120,20,2,112,100],
    [114,20,2,37,129,114],
    [113,33,114,20,2,2,127,26,4,122,113,33,114,20,3,2,127,26,4,122,131,37],
    [114,25,1,129,113],
    [114,20,2,120,20,3],
    [114,20,2,4,128,108],
    [114,20,3,114,20,1,33,129,116],
    [114,20,1,114,20,3,131,43],
    [114,20,1,4,128,104],
    [140,20,134,132],
    [133,10],
    [139,21,2],
    [117,21,1,112,2,124],
    [112,2],
    [120,21,1,112,100],
    [114,21,1,37,129,131],
    [114,21,1,120,21,2],
    [114,21,2,112,1,35,113,33,114,21,2,2,127,26,4,122,113,33,114,21,2,112,1,27,2,127,26,4,122,131,37],
    [114,25,1,17,129,130],
    [114,21,2,112,1,27,114,21,2,131,43],
    [117,21,2,1,122,5,2,123],
    [128,125],
    [114,21,1,4,128,122],
    [140,21,134,132],
    [133,12],
    [139,23,4],
    [117,23,1,112,4,124,120,23,2,120,23,1],
    [114,23,1,114,23,2,34,129,148],
    [114,23,1,120,23,3],
    [114,23,1,112,1,26],
    [120,23,4,114,23,2],
    [114,23,4,37,129,145],
    [113,33,114,23,4,2,127,26,4,122,113,33,114,23,1,2,127,26,4,122,131,37],
    [114,25,1,129,144],
    [117,23,3,1,122,4,2,123],
    [114,23,3,114,23,4,131,43],
    [114,23,4,4,128,138],
    [114,23,1,114,23,3,131,43],
    [114,23,1,114,23,3,112,1,27,131,132],
    [114,23,3,112,1,26,114,23,2,131,132],
    [140,23,134,132],
    [133,11],
    [112,1,112,100,131,132],
    [134,132],
    [133,13],
    [139,24,1],
    [117,24,1,112,1,124,120,24,1],
    [112,0,119,136],
    [112,0,119,137],
    [114,24,1,112,1,32,129,160],
    [131,86],
    [128,168],
    [114,24,1,112,2,32,129,163],
    [131,100],
    [128,168],
    [114,24,1,112,3,32,129,166],
    [131,118],
    [128,168],
    [114,24,1,112,4,32,129,168],
    [131,149],
    [113,138,114,24,1,112,1,27,2,127,26,4,122,112,32,9,112,17,23,72,113,136,11,112,32,9,112,4,72,64,118,12,32,99,111,109,112,97,114,105,115,111,110,115,64,169,142],
    [113,137,11,112,32,9,112,6,72,118,6,32,115,119,97,112,115,64,169,170,142],
    [112,-1,129,176],
    [131,51],
    [114,25,1,16,129,176],
    [118,17,32,32,32,32,32,83,111,114,116,32,102,97,105,108,101,100,58,169,170,142],
    [131,62],
    [130],
    [140,24,134,132],
    [112,-1,112,16777215,112,-1,166],
    [131,16],
    [131,22],
    [112,4,11,118,61,32,115,111,114,116,105,110,103,32,109,101,116,104,111,100,115,32,119,105,108,108,32,98,101,32,99,111,109,112,97,114,101,100,44,32,101,97,99,104,32,111,102,32,116,104,101,109,32,98,101,105,110,103,32,117,115,101,100,32,116,111,64,169,170,142],
    [118,26,115,111,114,116,32,114,97,110,100,111,109,105,115,101,100,32,97,114,114,97,121,115,32,111,102,32,112,100,11,64,118,8,32,105,116,101,109,115,32,40,64,112,10,11,64,118,22,32,116,105,109,101,115,41,44,32,119,104,105,108,101,32,107,101,101,112,105,110,103,64,169,170,142],
    [118,55,116,114,97,99,107,32,111,102,32,116,104,101,32,110,117,109,98,101,114,115,32,111,102,32,99,111,109,112,97,114,105,115,111,110,115,32,97,110,100,32,115,119,97,112,115,32,114,101,113,117,105,114,101,100,46,169,170,142],
    [112,-1,129,185],
    [118,59,73,102,32,115,111,114,116,105,110,103,32,102,97,105,108,115,44,32,116,104,101,32,112,114,111,103,114,97,109,32,119,105,108,108,32,104,97,108,116,32,97,110,100,32,115,104,111,119,32,116,104,101,32,97,114,114,97,121,46,169,170,142],
    [118,0,169,170,142],
    [112,1],
    [119,292,112,10],
    [113,292,37,129,199],
    [112,1],
    [119,293,112,4],
    [113,293,37,129,197],
    [131,76],
    [113,293,131,152],
    [113,280,113,293,112,1,27,2,127,26,4,113,280,113,293,112,1,27,2,127,26,4,122,113,136,26,2,123],
    [113,286,113,293,112,1,27,2,127,26,4,113,286,113,293,112,1,27,2,127,26,4,122,113,137,26,2,123],
    [113,293,4,128,190],
    [118,0,169,170,142],
    [113,292,4,128,187],
    [112,-1,112,16777147,112,-1,166],
    [118,22,65,118,101,114,97,103,101,115,32,102,114,111,109,32,115,111,114,116,105,110,103,32,112,100,11,64,118,13,32,105,116,101,109,115,44,32,111,118,101,114,32,64,112,10,11,64,118,7,32,116,114,105,97,108,115,64,169,170,142],
    [118,0,169,170,142],
    [118,35,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,79,77,80,65,82,73,83,79,78,83,32,32,32,32,83,87,65,80,83,169,170,142],
    [112,1],
    [119,293,112,4],
    [113,293,37,129,209],
    [113,138,113,293,112,1,27,2,127,26,4,122,112,32,9,112,17,23,72,113,280,113,293,112,1,27,2,127,26,4,122,112,10,112,1,14,112,32,9,112,7,72,64,169,142],
    [113,286,113,293,112,1,27,2,127,26,4,122,112,10,112,1,14,112,32,9,112,11,72,169,170,142],
    [113,293,4,128,204],
    [130]
  ]
}
