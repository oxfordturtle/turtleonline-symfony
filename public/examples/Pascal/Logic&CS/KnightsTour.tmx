{
  "format":1,
  "language":"Pascal",
  "version":13,
  "name":"Knights Tour program",
  "author":"Peter Millican",
  "date":"23/07/2020",
  "time":"12:00:14",
  "code":"PROGRAM KnightsTour;\nCONST width = 10;\n      height = 10;\n      maxlast = 255;\n      delay = 0;\n      margin = 20;\n      timelimit = 500;\n      pauseonbest = 1000;\n      drawall = false;\nVAR vectorx, vectory: array[0..8] of integer;\n    squarestatus, cleverrank: array[0..maxlast] of integer;\n    lastsquare: integer;\n    xgap, ygap, radius: integer;\n    countsquares, attempts, total, best: integer;\n    clever, pausenow: boolean;\n\n  Procedure setup;\n  Begin\n    vectorx[0] := 1;\n    vectory[0] := -2;\n    vectorx[1] := 2;\n    vectory[1] := -1;\n    vectorx[2] := 2;\n    vectory[2] := 1;\n    vectorx[3] := 1;\n    vectory[3] := 2;\n    vectorx[4] := -1;\n    vectory[4] := 2;\n    vectorx[5] := -2;\n    vectory[5] := 1;\n    vectorx[6] := -2;\n    vectory[6] := -1;\n    vectorx[7] := -1;\n    vectory[7] := -2;\n    xgap := (1000 - 2 * margin) / width;\n    ygap := (1000 - 2 * margin) / height;\n    if xgap <= ygap then\n      radius := xgap * 2 / 5\n    else\n      radius := ygap * 2 / 5;\n    lastsquare := width * height - 1\n  End;\n\n  Function findx(s: integer): integer;\n  Begin\n    result := s mod width\n  End;\n\n  Function findy(s: integer): integer;\n  Begin\n    result := s div width\n  End;\n\n  Function findsquare(x, y: integer): integer;\n  Begin\n    result := y * width + x\n  End;\n\n  Procedure drawsquare(s: integer);\n  Begin\n    setxy(margin + xgap * findx(s) + xgap / 2, margin + ygap * findy(s) + ygap / 2);\n    if squarestatus[s] = 0 then\n      begin\n        colour(salmon);\n        blot(radius)\n      end\n    else\n      begin\n        colour(white);\n        blot(radius);\n        if width > 10 then\n          begin\n            if squarestatus[s] < 10 then\n              movexy(-8, -20)\n            else\n            if squarestatus[s] < 100 then\n              movexy(-15, -20)\n            else\n              movexy(-22, -20);\n            colour(black);\n            print(str(squarestatus[s]), 4, 20)\n          end\n        else\n          begin\n            if squarestatus[s] < 10 then\n              movexy(-10, -24)\n            else\n            if squarestatus[s] < 100 then\n              movexy(-20, -24)\n            else\n              movexy(-30, -24);\n            colour(black);\n            print(str(squarestatus[s]), 4, 25)\n          end\n      end\n  End;\n\n  Procedure drawboard;\n  Var s: integer;\n  Begin\n    blank(darkgreen);\n    for s := 0 to lastsquare do\n      drawsquare(s)\n  End;\n\n  Function goodmove(s, direction: integer): integer;\n  Var newx, newy: integer;\n  Begin\n    newx := findx(s) + vectorx[direction];\n    newy := findy(s) + vectory[direction];\n    if (newx >= 0) and (newx < width) and (newy >= 0) and (newy < height) then\n      begin\n        result := findsquare(newx, newy);\n        if squarestatus[result] > 0 then\n          result := -1\n      end\n    else\n      result := -1\n  End;\n\n  Function moveto(s, direction: integer): integer;\n  Var newx, newy: integer;\n      newn: integer;\n      d: integer;\n  Begin\n    newx := findx(s) + vectorx[direction];\n    newy := findy(s) + vectory[direction];\n    result := findsquare(newx, newy);\n    if clever then\n      for d := 0 to 7 do\n        begin\n          newn := goodmove(result, d);\n          if newn > -1 then\n            dec(cleverrank[newn])\n        end\n  End;\n\n  Procedure clearboard;\n  Var s, d: integer;\n  Begin\n    for s := 0 to lastsquare do\n      squarestatus[s] := 0;\n    if clever then\n      for s := 0 to lastsquare do\n        begin\n          cleverrank[s] := 0;\n          for d := 0 to 7 do\n            if goodmove(s, d) > -1 then\n              inc(cleverrank[s])\n        end\n  End;\n\n  Function randommove(s: integer): integer;\n  Var d: integer;\n  Begin\n    repeat\n      d := random(8)\n    until (goodmove(s, d) > -1) or (time >= timelimit);\n    result := d\n  End;\n\n  Function clevermove(s: integer): integer;\n  Var chosen, d, news: integer;\n      bestrank, numbest: integer;\n  Begin\n    chosen := -1;\n    bestrank := 9;\n    for d := 0 to 8 do\n      begin\n        news := goodmove(s, d);\n        if news > -1 then\n          if cleverrank[news] < bestrank then\n            begin\n              chosen := d;\n              bestrank := cleverrank[news];\n              numbest := 1\n            end\n          else\n          if cleverrank[news] = bestrank then\n            begin\n              inc(numbest);\n              if random(numbest) = 0 then\n                chosen := d\n            end\n      end;\n    result := chosen\n  End;\n\n  Procedure findroute;\n  Var thiss, s, d: integer;\n  Begin\n    countsquares := 1;\n    thiss := random(lastsquare + 1);\n    squarestatus[thiss] := countsquares;\n    timeset(0);\n    while time < timelimit do\n      begin\n        if clever then\n          d := clevermove(thiss)\n        else\n          d := randommove(thiss);\n        if (time < timelimit) and (d > -1) then\n          begin\n            thiss := moveto(thiss, d);\n            inc(countsquares);\n            squarestatus[thiss] := countsquares;\n            if drawall then\n              drawsquare(thiss)\n          end\n      end\n  End;\n\nBEGIN\n  write('Random search or Clever search? (R/C) ');\n  repeat\n  until (abs(?key) = \\r) or (abs(?key) = \\c);\n  clever := (abs(?key) = \\c);\n  if clever then\n    writeln('  Clever ...')\n  else\n    writeln('  Random ...');\n  setup;\n  if lastsquare > maxlast then\n    writeln('Error: maximum board size is ' + str(maxlast + 1) + ' squares')\n  else\n    begin\n      attempts := 0;\n      total := 0;\n      best := 0;\n      repeat\n        inc(attempts);\n        clearboard;\n        if drawall then\n          drawboard;\n        findroute;\n        total := total + countsquares;\n        pausenow := (countsquares > best);\n        if countsquares > best then\n          begin\n            drawboard;\n            best := countsquares;\n            write('Attempt ');\n            write(str(attempts));\n            write(', score: ');\n            write(str(countsquares));\n            if attempts > 1 then\n              begin\n                write('   (average of all attempts: ');\n                write(qstr(total, attempts, 2));\n                writeln(')')\n              end\n            else\n              writeln('');\n            update\n          end;\n        if pausenow then\n          pause(pauseonbest);\n        noupdate\n      until best = width * height\n    end\nEND.",
  "usage":[
    {
      "category": "Turtle: relative movement",
      "expressions":[
        {"name":"movexy", "level":2, "count":6, "lines":"74 77 79 86 89 91"}
      ],
      "total":6
    },
    {
      "category": "Turtle: absolute movement",
      "expressions":[
        {"name":"setxy", "level":1, "count":1, "lines":"61"}
      ],
      "total":1
    },
    {
      "category": "Turtle: drawing shapes",
      "expressions":[
        {"name":"blot", "level":1, "count":2, "lines":"65 70"}
      ],
      "total":2
    },
    {
      "category": "Other Turtle commands",
      "expressions":[
        {"name":"colour", "level":1, "count":4, "lines":"64 69 80 92"}
      ],
      "total":4
    },
    {
      "category": "Canvas operations",
      "expressions":[
        {"name":"blank", "level":1, "count":1, "lines":"101"},
        {"name":"noupdate", "level":1, "count":1, "lines":"258"},
        {"name":"update", "level":1, "count":1, "lines":"254"}
      ],
      "total":3
    },
    {
      "category": "General arithmetic functions",
      "expressions":[
        {"name":"abs", "level":1, "count":3, "lines":"216 216 217"},
        {"name":"dec", "level":1, "count":1, "lines":"134"},
        {"name":"inc", "level":1, "count":4, "lines":"149 181 205 231"},
        {"name":"random", "level":2, "count":3, "lines":"157 182 193"}
      ],
      "total":11
    },
    {
      "category": "String operations",
      "expressions":[
        {"name":"print", "level":1, "count":2, "lines":"81 93"},
        {"name":"write", "level":1, "count":7, "lines":"214 242 243 244 245 248 249"},
        {"name":"writeln", "level":1, "count":5, "lines":"219 221 224 250 253"}
      ],
      "total":14
    },
    {
      "category": "Type conversion routines",
      "expressions":[
        {"name":"str", "level":1, "count":5, "lines":"81 93 224 243 245"},
        {"name":"qstr", "level":2, "count":1, "lines":"249"}
      ],
      "total":6
    },
    {
      "category": "Input and timing routines",
      "expressions":[
        {"name":"pause", "level":1, "count":1, "lines":"257"},
        {"name":"time", "level":2, "count":3, "lines":"158 196 202"},
        {"name":"timeset", "level":2, "count":1, "lines":"195"}
      ],
      "total":5
    },
    {
      "category": "Command structures",
      "expressions":[
        {"name":"if", "level":1, "count":26, "lines":"37 62 71 73 76 85 88 111 114 129 133 143 148 171 172 179 182 198 202 207 218 223 233 238 246 256"},
        {"name":"else", "level":1, "count":13, "lines":"39 67 75 78 83 87 90 117 178 200 220 225 252"},
        {"name":"for", "level":1, "count":6, "lines":"102 130 141 144 147 168"},
        {"name":"repeat", "level":2, "count":3, "lines":"156 215 230"},
        {"name":"while", "level":2, "count":1, "lines":"196"},
        {"name":"procedure", "level":2, "count":5, "lines":"17 59 98 138 189"},
        {"name":"function", "level":3, "count":7, "lines":"44 49 54 106 121 153 162"}
      ],
      "total":61
    },
    {
      "category": "Subroutine calls",
      "expressions":[
        {"name":"findx", "level":0, "count":3, "lines":"61 109 126"},
        {"name":"findy", "level":0, "count":3, "lines":"61 110 127"},
        {"name":"drawsquare", "level":0, "count":2, "lines":"103 208"},
        {"name":"findsquare", "level":0, "count":2, "lines":"113 128"},
        {"name":"goodmove", "level":0, "count":4, "lines":"132 148 158 170"},
        {"name":"clevermove", "level":0, "count":1, "lines":"199"},
        {"name":"randommove", "level":0, "count":1, "lines":"201"},
        {"name":"moveto", "level":0, "count":1, "lines":"204"},
        {"name":"setup", "level":0, "count":1, "lines":"222"},
        {"name":"clearboard", "level":0, "count":1, "lines":"232"},
        {"name":"drawboard", "level":0, "count":2, "lines":"234 240"},
        {"name":"findroute", "level":0, "count":1, "lines":"235"}
      ],
      "total":22
    }
  ],
  "pcode":[
    [112,25,1,1,112,0,123,112,6,2,123,4,112,554,124,112,579,138],
    [80,112,2,85,112,360,84,112,32,162,112,1,123,141,112,0,1,112,1000,1,1,1,145,144],
    [116,33,119,32],
    [112,9,119,33],
    [116,44,119,43],
    [112,9,119,44],
    [116,55,119,54],
    [112,256,119,55],
    [116,313,119,312],
    [112,256,119,313],
    [128,205],
    [133,1],
    [113,32,112,0,2,127,26,4,112,1,2,123],
    [113,43,112,0,2,127,26,4,112,2,23,2,123],
    [113,32,112,1,2,127,26,4,112,2,2,123],
    [113,43,112,1,2,127,26,4,112,1,23,2,123],
    [113,32,112,2,2,127,26,4,112,2,2,123],
    [113,43,112,2,2,127,26,4,112,1,2,123],
    [113,32,112,3,2,127,26,4,112,1,2,123],
    [113,43,112,3,2,127,26,4,112,2,2,123],
    [113,32,112,4,2,127,26,4,112,1,23,2,123],
    [113,43,112,4,2,127,26,4,112,2,2,123],
    [113,32,112,5,2,127,26,4,112,2,23,2,123],
    [113,43,112,5,2,127,26,4,112,1,2,123],
    [113,32,112,6,2,127,26,4,112,2,23,2,123],
    [113,43,112,6,2,127,26,4,112,1,23,2,123],
    [113,32,112,7,2,127,26,4,112,1,23,2,123],
    [113,43,112,7,2,127,26,4,112,2,23,2,123],
    [112,1000,112,2,112,20,28,27,112,10,29,119,571],
    [112,1000,112,2,112,20,28,27,112,10,29,119,572],
    [113,571,113,572,36,129,34],
    [113,571,112,2,28,112,5,29,119,573],
    [128,35],
    [113,572,112,2,28,112,5,29,119,573],
    [112,10,112,10,28,112,1,27,119,570],
    [134,132],
    [133,2],
    [139,13,2],
    [117,13,1,112,2,124,120,13,2],
    [114,13,2,112,10,31,120,13,1],
    [113,13,119,24,140,13,134,132],
    [133,3],
    [139,14,2],
    [117,14,1,112,2,124,120,14,2],
    [114,14,2,112,10,30,120,14,1],
    [113,14,119,24,140,14,134,132],
    [133,4],
    [139,15,3],
    [117,15,1,112,3,124,120,15,3,120,15,2],
    [114,15,3,112,10,28,114,15,2,26,120,15,1],
    [113,15,119,24,140,15,134,132],
    [133,5],
    [139,16,1],
    [117,16,1,112,1,124,120,16,1],
    [112,20,113,571,114,16,1,131,37],
    [114,24,1,28,26,113,571,112,2,29,26,112,20,113,572,114,16,1,131,42],
    [114,24,1,28,26,113,572,112,2,29,26,88],
    [113,54,114,16,1,2,127,26,4,122,112,0,32,129,62],
    [112,16416882,87],
    [113,573,108],
    [128,84],
    [112,16777215,87],
    [113,573,108],
    [112,10,112,10,35,129,75],
    [113,54,114,16,1,2,127,26,4,122,112,10,34,129,68],
    [112,8,23,112,20,23,89],
    [128,72],
    [113,54,114,16,1,2,127,26,4,122,112,100,34,129,71],
    [112,15,23,112,20,23,89],
    [128,72],
    [112,22,23,112,20,23,89],
    [112,0,87],
    [113,54,114,16,1,2,127,26,4,122,11,112,4,112,20,168,142],
    [128,84],
    [113,54,114,16,1,2,127,26,4,122,112,10,34,129,78],
    [112,10,23,112,24,23,89],
    [128,82],
    [113,54,114,16,1,2,127,26,4,122,112,100,34,129,81],
    [112,20,23,112,24,23,89],
    [128,82],
    [112,30,23,112,24,23,89],
    [112,0,87],
    [113,54,114,16,1,2,127,26,4,122,11,112,4,112,25,168,142],
    [140,16,134,132],
    [133,6],
    [139,17,1],
    [117,17,1,112,1,124],
    [112,25600,96],
    [112,0],
    [120,17,1,113,570],
    [114,17,1,37,129,94],
    [114,17,1,131,52],
    [114,17,1,4,128,90],
    [140,17,134,132],
    [133,7],
    [139,18,5],
    [117,18,1,112,5,124,120,18,3,120,18,2],
    [114,18,2,131,37],
    [114,24,1,113,32,114,18,3,2,127,26,4,122,26,120,18,4],
    [114,18,2,131,42],
    [114,24,1,113,43,114,18,3,2,127,26,4,122,26,120,18,5],
    [114,18,4,112,0,37,114,18,4,112,10,34,17,114,18,5,112,0,37,17,114,18,5,112,10,34,17,129,108],
    [114,18,4,114,18,5,131,47],
    [114,24,1,120,18,1],
    [113,54,114,18,1,2,127,26,4,122,112,0,35,129,107],
    [112,1,23,120,18,1],
    [128,109],
    [112,1,23,120,18,1],
    [113,18,119,24,140,18,134,132],
    [133,8],
    [139,19,7],
    [117,19,1,112,7,124,120,19,3,120,19,2],
    [114,19,2,131,37],
    [114,24,1,113,32,114,19,3,2,127,26,4,122,26,120,19,4],
    [114,19,2,131,42],
    [114,24,1,113,43,114,19,3,2,127,26,4,122,26,120,19,5],
    [114,19,4,114,19,5,131,47],
    [114,24,1,120,19,1],
    [113,578,129,128],
    [112,0],
    [120,19,7,112,7],
    [114,19,7,37,129,128],
    [114,19,1,114,19,7,131,95],
    [114,24,1,120,19,6],
    [114,19,6,112,1,23,35,129,127],
    [113,312,114,19,6,2,127,26,4,1,122,5,2,123],
    [114,19,7,4,128,121],
    [113,19,119,24,140,19,134,132],
    [133,9],
    [139,20,2],
    [117,20,1,112,2,124],
    [112,0],
    [120,20,1,113,570],
    [114,20,1,37,129,137],
    [113,54,114,20,1,2,127,26,4,112,0,2,123],
    [114,20,1,4,128,133],
    [113,578,129,150],
    [112,0],
    [120,20,1,113,570],
    [114,20,1,37,129,150],
    [113,312,114,20,1,2,127,26,4,112,0,2,123],
    [112,0],
    [120,20,2,112,7],
    [114,20,2,37,129,149],
    [114,20,1,114,20,2,131,95],
    [114,24,1,112,1,23,35,129,148],
    [113,312,114,20,1,2,127,26,4,1,122,4,2,123],
    [114,20,2,4,128,143],
    [114,20,1,4,128,139],
    [140,20,134,132],
    [133,10],
    [139,21,3],
    [117,21,1,112,3,124,120,21,2],
    [112,8,7,120,21,3],
    [114,21,2,114,21,3,131,95],
    [114,24,1,112,1,23,35,172,112,500,37,18,129,154],
    [114,21,3,120,21,1],
    [113,21,119,24,140,21,134,132],
    [133,11],
    [139,22,7],
    [117,22,1,112,7,124,120,22,2],
    [112,1,23,120,22,3],
    [112,9,120,22,6],
    [112,0],
    [120,22,4,112,8],
    [114,22,4,37,129,180],
    [114,22,2,114,22,4,131,95],
    [114,24,1,120,22,5],
    [114,22,5,112,1,23,35,129,179],
    [113,312,114,22,5,2,127,26,4,122,114,22,6,34,129,175],
    [114,22,4,120,22,3],
    [113,312,114,22,5,2,127,26,4,122,120,22,6],
    [112,1,120,22,7],
    [128,179],
    [113,312,114,22,5,2,127,26,4,122,114,22,6,32,129,179],
    [117,22,7,1,122,4,2,123],
    [114,22,7,7,112,0,32,129,179],
    [114,22,4,120,22,3],
    [114,22,4,4,128,165],
    [114,22,3,120,22,1],
    [113,22,119,24,140,22,134,132],
    [133,12],
    [139,23,3],
    [117,23,1,112,3,124],
    [112,1,119,574],
    [113,570,112,1,26,7,120,23,1],
    [113,54,114,23,1,2,127,26,4,113,574,2,123],
    [112,0,173],
    [172,112,500,34,129,204],
    [113,578,129,194],
    [114,23,1,131,159],
    [114,24,1,120,23,3],
    [128,196],
    [114,23,1,131,151],
    [114,24,1,120,23,3],
    [172,112,500,34,114,23,3,112,1,23,35,17,129,203],
    [114,23,1,114,23,3,131,110],
    [114,24,1,120,23,1],
    [116,574,1,122,4,2,123],
    [113,54,114,23,1,2,127,26,4,113,574,2,123],
    [112,0,129,203],
    [114,23,1,131,52],
    [128,189],
    [140,23,134,132],
    [118,38,82,97,110,100,111,109,32,115,101,97,114,99,104,32,111,114,32,67,108,101,118,101,114,32,115,101,97,114,99,104,63,32,40,82,47,67,41,32,169,142],
    [112,-9,160,24,112,82,32,112,-9,160,24,112,67,32,18,129,206],
    [112,-9,160,24,112,67,32,119,578],
    [113,578,129,211],
    [118,12,32,32,67,108,101,118,101,114,32,46,46,46,169,170],
    [128,212],
    [118,12,32,32,82,97,110,100,111,109,32,46,46,46,169,170,142],
    [131,12],
    [113,570,112,255,35,129,216],
    [118,29,69,114,114,111,114,58,32,109,97,120,105,109,117,109,32,98,111,97,114,100,32,115,105,122,101,32,105,115,32,112,255,112,1,26,11,64,118,8,32,115,113,117,97,114,101,115,64,169,170],
    [142,128,244],
    [112,0,119,575],
    [112,0,119,576],
    [112,0,119,577],
    [116,575,1,122,4,2,123],
    [131,129],
    [112,0,129,223],
    [131,85],
    [131,182],
    [113,576,113,574,26,119,576],
    [113,574,113,577,35,119,579],
    [113,574,113,577,35,129,240],
    [131,85],
    [113,574,119,577],
    [118,8,65,116,116,101,109,112,116,32,169,142],
    [113,575,11,169,142],
    [118,9,44,32,115,99,111,114,101,58,32,169,142],
    [113,574,11,169,142],
    [113,575,112,1,35,129,238],
    [118,29,32,32,32,40,97,118,101,114,97,103,101,32,111,102,32,97,108,108,32,97,116,116,101,109,112,116,115,58,32,169,142],
    [113,576,113,575,112,2,14,169,142],
    [112,41,9,169,170,142],
    [128,239],
    [118,0,169,170,142],
    [112,-1,146],
    [113,579,129,242],
    [112,1000,174],
    [112,0,146],
    [113,577,112,10,112,10,28,32,129,219],
    [130]
  ]
}
