PROGRAM UserStringFunctions;

  {generates the reverse of a string}
  Function reverse(s: string): string;
  Var posn: integer;
      t: string;
  Begin
    t := '';
    for posn := 1 to length(s) do
      t := copy(s, posn, 1) + t;
    result := t
  End;

  {generates the reverse of a string recursively}
  Function reverseRecursive(s: string): string;
  Begin
    if s = '' then
      result := s
    else
      result := reverseRecursive(delete(s, 1, 1)) + copy(s, 1, 1)
  End;

  {tests whether a character is uppercase (1), lowercase (0), or neither (-1)}
  Function testCase(c: char): integer;
  Begin
    if (c>='A') and (c<='Z') then
      result:=1
    else
      if (c>='a') and (c<='z') then
    result:=0
      else
    result:=-1
  End;

  {generates a string with the first letter of each word capitalised}
  {N.B. the same result can be achieved with the native titlecase command}
  Function initCaps(s: string): string;
  Var posn: integer;
      t: string;
  Begin
    s := lowercase(s);
    if testCase(s[1]) = 0 then
      s[1] := chr(ord(s[1]) - 32);
    for posn := 2 to length(s) do
      if (s[posn-1] = ' ') and (testCase(s[posn]) = 0) then
        s[posn] := chr(ord(s[posn]) - 32);
    result := s
  End;

  {generates the Caesar cipher of a string}
  Function caesar(s: string; n: integer): string;
  Var posn: integer;
  Begin
    for posn := 1 to length(s) do
      begin
        if testCase(s[posn]) = 1 then
          begin
            s[posn] := chr(ord(s[posn]) + n);
            if s[posn] > 'Z' then
              s[posn] := chr(ord(s[posn]) - 26)
          end
        else
        if testCase(s[posn]) = 0 then
          begin
            s[posn] := chr(ord(s[posn]) + n);
            if s[posn] > 'z' then
              s[posn] := chr(ord(s[posn]) - 26)
          end
      end;
    result := s
  End;

  {shows the results of applying the above functions to a string}
  Procedure process(s: string);
  Begin
    writeln('');
    writeln('ORIGINAL STRING:            "' + s + '"');
    writeln('REVERSED (by iteration):    "' + reverse(s) + '"');
    writeln('REVERSED (by recursion):    "' + reverseRecursive(s) + '"');
    writeln('INITIAL CAPITAL ALL WORDS:  "' + initCaps(s) + '"');
    writeln('CAESAR CIPHER (1 letter):   "' + caesar(s, 1) + '"');
    writeln('CAESAR DECRYPT (1+25 = 26): "' + caesar(caesar(s, 1), 25) + '"');
    writeln('CAESAR CIPHER (4 letters):  "' + caesar(s, 4) + '"');
    writeln('CAESAR DECRYPT (4+22 = 26): "' + caesar(caesar(s, 4), 22) + '"')
  End;

BEGIN
  {show the output}
  output(true, cream, true);
  writeln('Some User-Defined String Functions');
  {process some example strings}
  process('the quick brown fox jumps,');
  process('OVER THE LAZY DOG.')
END.
