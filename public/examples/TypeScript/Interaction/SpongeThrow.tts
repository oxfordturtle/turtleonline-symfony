const faceRadius: number = 100;
const spongeRadius: number = 40;

// draws an eye sized relative to a face
function eye (faceRadius: number): void {
  colour(white);
  ellblot(faceRadius * 3 / 20, faceRadius / 10);
  colour(emerald);
  blot(faceRadius * 9 / 100);
  colour(black);
  blot(faceRadius / 25);
}

// draws a face of the given radius
// N.B. copied from the Resizable face example
function face(radius: number): void {
  direction(0);
  // draw head
  colour(peach);
  blot(radius);
  // draw mouth
  colour(darkred);
  blot(radius * 7 / 10);
  forward(radius * 3 / 20);
  colour(peach);
  blot(radius * 3 / 4);
  // draw nose
  back(radius * 3 / 10);
  colour(royal);
  blot(radius * 3 / 20);
  // move to left eye position (without drawing)
  penUp();
  forward(radius * 9 / 20);
  left(90);
  forward(radius * 2 / 5);
  // draw left eye
  eye(radius);
  // move to right eye position (without drawing)
  back(radius * 4 / 5);
  // draw right eye
  eye(radius);
}

// set initial face location and velocity
var x: number = 300;
var y: number = 700;
var xVelocity: number = 8;
var yVelocity: number = -4;
// repeatedly...
while (0 < 1) {
  noUpdate();
  // rub out previous face
  colour(white);
  setXY(x, y);
  blot(faceRadius + spongeRadius);
  // move to next location and draw new face
  x = x + xVelocity;
  y = y + yVelocity;
  setXY(x, y);
  face(faceRadius);
  update();
  pause(10);
  // if left click detected within the face...
  if ((?lmouse > 0) && (hypot(?mousex - x, ?mousey - y, 1) < faceRadius)) {
    // draw a randomly coloured sponge and pause
    setXY(?mousex, ?mousey);
    randCol(4);
    blot(spongeRadius);
    pause(100);
  }
  // "bounce" (i.e. invert velocity) at canvas edges
  if ((x < faceRadius) || (x > 999 - faceRadius)) {
    xVelocity = -xVelocity;
  }
  if ((y < faceRadius) || (y > 999 - faceRadius)) {
    yVelocity = -yVelocity;
  }
}
