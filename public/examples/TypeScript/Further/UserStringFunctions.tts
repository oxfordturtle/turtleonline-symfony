// generates the reverse of a string
function reverse (s: string): string {
  var result: string = '';
  for (var posn: number = 0; posn < length(s); posn = posn + 1) {
    result = s[posn] + result;
  }
  return result;
}

// generates the reverse of a string recursively
function reverseRecursive (s: string): string {
  if (s == '') {
    return s
  }
  return reverseRecursive(delete(s, 0, 1)) + s[0];
}

// tests whether a character is uppercase (1), lowercase (0), or neither (-1)
function testCase (c: string): number {
  if ((charCode(c) >= charCode('A')) && (charCode(c) <= charCode('Z'))) {
    return 1;
  }
  if ((charCode(c) >= charCode('a')) && (charCode(c) <= charCode('z'))) {
    return 0;
  }
  return -1;
}

// capitalises first letter of each word, leaving other letters unchanged and
// treating any non-letter as a word separator; the native TOTITLECASE function
// treats only spaces as word separators, making subsequent letters lowercase
function initCaps (s: string): string {
  var newword: boolean = true;
  var result: string = '';
  for (var posn: number = 0; posn < length(s); posn = posn + 1) {
    var c: string = s[posn];
    if (newword && (testCase(c) == 0)) {
      c = fromCharCode(charCode(s[posn]) - 32);
    }
    result = result + c;
    newword = (testCase(c) == -1);
  }
  return result;
}

// generates the Caesar cipher of a string
function caesar (s: string, n: number): string {
  var result: string = '';
  for (var posn: number = 0; posn < length(s); posn = posn + 1) {
    var c: string = s[posn];
    if (testCase(c) == 1) {
      c = fromCharCode(charCode(c) + n);
      if (charCode(c) > charCode('Z')) {
        c = fromCharCode(charCode(c) - 26);
      }
    } else {
      if (testCase(c) == 0) {
        c = fromCharCode(charCode(c) + n);
        if (charCode(c) > charCode('z')) {
          c = fromCharCode(charCode(c) - 26);
        }
      }
    }
    result = result + c;
  }
  return result;
}

// shows the results of applying the above functions to a string
function process (s: string): void {
  writeln('');
  writeln('ORIGINAL STRING:               "' + s + '"');
  writeln('REVERSED (by iteration):       "' + reverse(s) + '"');
  writeln('REVERSED (by recursion):       "' + reverseRecursive(s) + '"');
  writeln('INITIAL CAPITAL ALL WORDS:     "' + initCaps(s) + '"');
  writeln('TITLE CASE:                    "' + toTitleCase(s) + '"');
  writeln('REVERSED THEN INITIAL CAPITAL: "' + initCaps(reverse(s)) + '"');
  writeln('REVERSED THEN TITLE CASE:      "' + toTitleCase(reverse(s)) + '"');
  writeln('CAESAR CIPHER (1 letter):      "' + caesar(s, 1) + '"');
  writeln('CAESAR DECRYPT (1+25 = 26):    "' + caesar(caesar(s, 1), 25) + '"');
  writeln('CAESAR CIPHER (4 letters):     "' + caesar(s, 4) + '"');
  writeln('CAESAR DECRYPT (4+22 = 26):    "' + caesar(caesar(s, 4), 22) + '"');
}

// show the output
output(true, cream, true);
writeln('Some User-Defined String Functions');
// process some example strings
process('CREATING is better than LEARNING');
process('indeed it\'s the Essence of Life!');
