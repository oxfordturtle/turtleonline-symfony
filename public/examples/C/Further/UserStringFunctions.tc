// generates the reverse of a string
string reverse (string s) {
  string result = '';
  for (int posn = 0; posn < strlen(s); posn = posn + 1) {
    result = s[posn] + result;
  }
  return result;
}

// generates the reverse of a string recursively
string reverseRecursive (string s) {
  if (s == '') {
    return s;
  }
  return reverseRecursive(strdel(s, 0, 1)) + s[0];
}

// tests whether a character is uppercase (1), lowercase (0), or neither (-1)
int testCase (char c) {
  if ((c >= 'A') && (c <= 'Z')) {
    return 1;
  }
  if ((c >= 'a') && (c <= 'z')) {
    return 0;
  }
  return -1;
}

// capitalises first letter of each word, leaving other letters unchanged and
// treating any non-letter as a word separator; the native STRTITLE function
// treats only spaces as word separators, making subsequent letters lowercase
string initCaps (string s) {
  bool newword = true;
  for (int posn = 0; posn < strlen(s); posn = posn + 1) {
    if (newword && (testCase(s[posn]) == 0)) {
      s[posn] = (char) ((int) s[posn]) - 32;
    }
    newword = (testCase(s[posn]) == -1);
  }
  return s;
}

// generates the Caesar cipher of a string
string caesar (string s, int n) {
  for (int posn = 0; posn < strlen(s); posn = posn + 1) {
    if (testCase(s[posn]) == 1) {
      s[posn] = (char) ((int) s[posn]) + n;
      if (s[posn] > 'Z') {
        s[posn] = (char) ((int) s[posn]) - 26;
      }
    }
    else {
      if (testCase(s[posn]) == 0) {
        s[posn] = (char) ((int) s[posn]) + n;
        if (s[posn] > 'z') {
          s[posn] = (char) ((int) s[posn]) - 26;
        }
      }
    }
  }
  return s;
}

// shows the results of applying the above functions to a string
void process(string s) {
  writeline('');
  writeline('ORIGINAL STRING:               "' + s + '"');
  writeline('REVERSED (by iteration):       "' + reverse(s) + '"');
  writeline('REVERSED (by recursion):       "' + reverseRecursive(s) + '"');
  writeline('INITIAL CAPITAL ALL WORDS:     "' + initCaps(s) + '"');
  writeline('TITLE CASE:                    "' + strtitle(s) + '"');
  writeline('REVERSED THEN INITIAL CAPITAL: "' + initCaps(reverse(s)) + '"');
  writeline('REVERSED THEN TITLE CASE:      "' + strtitle(reverse(s)) + '"');
  writeline('CAESAR CIPHER (1 letter):      "' + caesar(s, 1) + '"');
  writeline('CAESAR DECRYPT (1+25 = 26):    "' + caesar(caesar(s, 1), 25) + '"');
  writeline('CAESAR CIPHER (4 letters):     "' + caesar(s, 4) + '"');
  writeline('CAESAR DECRYPT (4+22 = 26):    "' + caesar(caesar(s, 4), 22) + '"');
}

void main () {
  // show the output
  output(true, cream, true);
  writeline('Some User-Defined String Functions');
  // process some example strings
  process('CREATING is better than LEARNING');
  process('indeed it\'s the Essence of Life!');
}
