const int width = 50;
const int height = 50;
const int n = 10;
int util[14];

void utility (int x, int y) {
  int this = pixcol(x, y) & 0x7;
  int utot = 0;
  for (int i = -1; i <= 1; i = i + 1) {
    for (int j = -1; j <= 1; j = j + 1) {
      if ((i != 0) || (j != 0)) {
        int flag = this | (pixcol((x + width + i) % width, (y + height + j) % height)) & 0xF;
        utot = utot + util[flag - 1];
      }
    }
  }
  pixset(x, y, utot * 0x100 + pixcol(x, y) & 0xF);
}

void pickbest (int x, int y) {
  int bestsofar = pixcol(x, y);
  if (rand(5) > 0) {
    for (int i = -1; i <= 1; i = i + 1) {
      for (int j = -1; j <= 1; j = j + 1) {
        if ((pixcol((x + width + i) % width, (y + height + j) % height) & 0xFFFF00) > (bestsofar & 0xFFFF00)) {
          bestsofar = pixcol((x + width + i) % width, (y + height + j) % height);
        }
      }
    }
  }
  pixset(x, y, (pixcol(x, y) & 0xFFFF0F) + (bestsofar & 0xF) * 0x10);
}

void fixbest (int x, int y) {
  if ((pixcol(x, y) & 0x10) > 0) {
    pixset(x, y, 0xFF0001);
  } else {
    if ((pixcol(x, y) & 0x20) > 0) {
      pixset(x, y, 0x00FF02);
    } else {
      pixset(x, y, 0x0000FC);
    }
  }
}

void setutilities () {
  util[0] = 3 * n;
  util[1] = 3 * n;
  util[2] = 3 * n;
  util[4] = 5 * n;
  util[5] = n + 4;
  util[11] = n;
  util[12] = 0;
  util[13] = n - 1;
}

void main () {
  canvas(0, 0, width, height);
  resolution(width, height);
  setutilities();
  noupdate();
  for (int i = 0; i < width; i = i + 1) {
    for (int j = 0; j < height; j = j + 1) {
      if (rand(50) == 0) {
        pixset(i, j, 0x0000FC);
      } else {
        if (rand(7) == 0) {
          pixset(i, j, 0x00FF02);
        } else {
          pixset(i, j, 0xFF0001);
        }
      }
    }
  }
  update();
  pause(1000);
  while (?key != \escape) {
    noupdate();
    for (i = 0; i < width; i = i + 1) {
      for (j = 0; j < height; j = j + 1) {
        utility(i, j);
      }
    }
    for (i = 0; i < width; i = i + 1) {
      for (j = 0; j < height; j = j + 1) {
        pickbest(i, j);
      }
    }
    for (i = 0; i < width; i = i + 1) {
      for (j = 0; j < height; j = j + 1) {
        fixbest(i, j);
      }
    }
    update();
  }
}