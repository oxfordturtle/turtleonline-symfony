const int population = 1000;
const int matepergen = 400;
const int randomvar = 1;
const int leftmargin = 70;
const int topmargin = 20;
bool female[population];
int fop[population];
int generation;

void axes () {
  for (int i = 1; i <= 9; i = i + 1) {
    setxy(leftmargin + i * 100 - 25, topmargin + 800);
    print(itoa(i * 100), 4, 20);
  }
  for (i = 2; i <= 10; i = i + 1) {
    setxy(0, 1000 - i * 100);
    colour(black);
    print(itoa(i * 10) + '%', 4, 20);
    movexy(leftmargin, topmargin);
    colour(lightgrey);
    drawxy(1000 - leftmargin, 0);
  }
  setxy(leftmargin, topmargin);
  colour(black);
  drawxy(0, 800);
  drawxy(1000 - leftmargin, 0);
  colour(red);
  setxy(50, 880);
  print('Proportion of Females in Population, over 900 Generations', 4, 25);
  setxy(50, 930);
  print('with Female Offspring Probability genes initially set 90%+', 4, 25);
}

void graph () {
  int females = 0;
  for (int n = 0; n < population; n = n + 1) {
    if (female[n]) {
      females = females + 1;
    }
  }
  colour(red);
  setxy(leftmargin + generation, topmargin + 1000 - females);
  if (generation > 0) {
    polyline(2);
  }
}

void domating () {
  do {
    int A = rand(population);
    int B = rand(population);
  } while (female[A] == female[B]);
  bool inheritA = (rand(2) == 0);
  int replace = rand(population);
  if (inheritA) {
    fop[replace] = fop[A];
  } else {
    fop[replace] = fop[B];
  }
  female[replace] = fop[replace] > rand(1000);
  fop[replace] = fop[replace] + rand(randomvar * 20 + 1) - randomvar * 10;
  fop[replace] = max(0, min(1000, fop[replace]));
}

void main () {
  axes();
  for (int n = 0; n < population; n = n + 1) {
    female[n] = (rand(2) == 0);
    fop[n] = 900 + rand(101);
  }
  generation = 0;
  do {
    graph();
    generation = generation + 1;
    for (n = 0; n < matepergen; n = n + 1) {
      domating();
    }
  } while (generation < 900);
}
