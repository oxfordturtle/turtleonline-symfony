const int maxnodes = 500;
const int suffnodes = 400;
const int maxedges = 1000;
const int mindistance = 40;
const int noderadius = 6;
const int roadradius = 4;
const int normalroad = black;
const int linkroad = blue;

int nodex[maxnodes];
int nodey[maxnodes];
int nodedist[maxnodes];
int numnodes;
int edge1[maxedges];
int edge2[maxedges];
int edgelen[maxedges];
int numedges;

int closest (int n) {
  int result = 0;
  int min = maxint();
  for (int i = 0; i < numnodes; i = i + 1) {
    if (i != n) {
      int d = hypot(nodex[n] - nodex[i], nodey[n] - nodey[i], 1);
      if (d < min) {
        min = d;
        result = i;
      }
    }
  }
  if (min < mindistance) {
    result = -1;
  }
  return result;
}

void marknode(int n, int col, int rad) {
  setxy(nodex[n], nodey[n]);
  colour(col);
  blot(rad);
}

void makeedge (int nodea, int nodeb, int col) {
  numedges = numedges + 1;
  edge1[numedges] = nodea;
  edge2[numedges] = nodeb;
  edgelen[numedges] = hypot(nodex[nodea] - nodex[nodeb], nodey[nodea] - nodey[nodeb], 1);
  setxy(nodex[nodea], nodey[nodea]);
  colour(col);
  setxy(nodex[nodeb], nodey[nodeb]);
  polyline(2);
}

void linkup (int nodea, int nodeb) {
  if (hypot(nodex[nodea] - nodex[nodeb], nodey[nodea] - nodey[nodeb], 1) < mindistance * 2) {
    makeedge(nodea, nodeb, normalroad);
  } else {
    numnodes = numnodes + 1;
    nodex[numnodes] = (nodex[nodea] + nodex[nodeb]) / 2;
    nodey[numnodes] = (nodey[nodea] + nodey[nodeb]) / 2;
    marknode(numnodes, cyan, roadradius);
    linkup(nodea, numnodes);
    linkup(numnodes, nodeb);
  }
}

void joinup (int thisnode) {
  for (int i = 0; i < numnodes; i = i + 1) {
    nodedist[i] = maxint();
  }
  nodedist[thisnode] = 0;
  bool continue = true;
  while (continue) {
    continue = false;
    for (i = 0; i < numedges; i = i + 1) {
      if (nodedist[edge1[i]] < maxint()) {
        if (nodedist[edge1[i]] + edgelen[i] < nodedist[edge2[i]]) {
          nodedist[edge2[i]] = nodedist[edge1[i]] + edgelen[i];
          continue = true;
        }
      }
      if (nodedist[edge2[i]] < maxint()) {
        if (nodedist[edge2[i]] + edgelen[i] < nodedist[edge1[i]]) {
          nodedist[edge1[i]] = nodedist[edge2[i]] + edgelen[i];
          continue = true;
        }
      }
    }
  }
  i = 0;
  continue = true;
  while ((i < numnodes) && continue) {
    i = i + 1;
    int dist = hypot(nodex[i] - nodex[thisnode], nodey[i] - nodey[thisnode], 1);
    if ((i != thisnode) && (nodedist[i] > 1000) && (dist < mindistance * 2)) {
      makeedge(thisnode, i, linkroad);
      continue = false;
    }
  }
}

void main () {
  thickness(6);
  numnodes = 0;
  numedges = 0;
  while (numnodes < suffnodes) {
    numnodes = numnodes + 1;
    do {
      nodex[numnodes] = rand(1000);
      nodey[numnodes] = rand(1000);
      int m = closest(numnodes);
    } while (m < 0);
    marknode(numnodes, red, noderadius);
    if (m > 0) {
      linkup(m, numnodes);
    }
  }
  for (m = 0; m < numnodes; m = m + 1) {
    joinup(m);
  }
}
