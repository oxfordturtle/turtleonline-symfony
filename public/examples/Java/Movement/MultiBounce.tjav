class MultiBounce {
  void main () {
    final int minSize = 70;
    final int maxSize = 130;
    final int balls = 10;
    int[] x = new int[balls];
    int[] y = new int[balls];
    int[] xVelocity = new int[balls];
    int[] yVelocity = new int[balls];
    int[] size = new int[balls];
    int[] colr = new int[balls];
    // set initial properties for each ball
    for (n = 0; n < balls; n = n + 1) {
      size[n] = minSize + randInt(maxSize - minSize);
      colr[n] = rgb(n);
      x[n] = randInt(1000 - 2 * size[n]) + size[n];
      y[n] = randInt(1000 - 2 * size[n]) + size[n];
      xVelocity[n] = randInt(15) - 7;
      yVelocity[n] = randInt(15) - 7;
    }
    do {
      noUpdate();
      // rub out previous balls
      blank(white);
      // draw each ball in its next position
      for (n = 0; n < balls; n = n + 1) {
        // move to next position
        x[n] = x[n] + xVelocity[n];
        y[n] = y[n] + yVelocity[n];
        setXY(x[n], y[n]);
        // draw ball
        colour(colr[n]);
        blot(size[n]);
        // "bounce" (i.e. invert velocity) at canvas edges
        if ((x[n] < size[n]) or (x[n] > 1000 - size[n])) {
          xVelocity[n] = -xVelocity[n];
        }
        if ((y[n] < size[n]) or (y[n] > 1000 - size[n])) {
          yVelocity[n] = -yVelocity[n];
        }
      }
      update();
      pause(5);
    } while (1 == 1);
  }
}
