class UserStringFunctions {
  // generates the reverse of a String
  String reverse (String s) {
    String result = '';
    for (int posn = 0; posn < length(s); posn = posn + 1) {
      result = s[posn] + result;
    }
    return result;
  }

  // generates the reverse of a String recursively
  String reverseRecursive (String s) {
    if (s == '') {
      return s;
    }
    return reverseRecursive(delete(s, 0, 1)) + s[0];
  }

  // tests whether a character is uppercase (1), lowercase (0), or neither (-1)
  int testCase (char c) {
    if ((c >= 'A') && (c <= 'Z')) {
      return 1;
    }
    if ((c >= 'a') && (c <= 'z')) {
      return 0;
    }
    return -1;
  }

  // capitalises first letter of each word, leaving other letters unchanged and
  // treating any non-letter as a word separator; the native TITLECASE function
  // treats only spaces as word separators, making subsequent letters lowercase
  String initCaps (String s) {
    boolean newword = true;
    for (int posn = 0; posn < length(s); posn = posn + 1) {
      if (newword && (testCase(s[posn]) == 0)) {
        s[posn] = (char) s[posn] - 32;
      }
      newword = (testCase(s[posn]) == -1);
    }
    return s;
  }

  // generates the Caesar cipher of a String
  String caesar (String s, int n) {
    for (int posn = 0; posn < length(s); posn = posn + 1) {
      if (testCase(s[posn]) == 1) {
        s[posn] = (char) s[posn] + n;
        if (s[posn] > 'Z') {
          s[posn] = (char) s[posn] - 26;
        }
      }
      else {
        if (testCase(s[posn]) == 0) {
          s[posn] = (char) s[posn] + n;
          if (s[posn] > 'z') {
            s[posn] = (char) s[posn] - 26;
          }
        }
      }
    }
    return s;
  }

  // shows the results of applying the above functions to a String
  void process(String s) {
    writeln('');
    writeln('ORIGINAL String:               "' + s + '"');
    writeln('REVERSED (by iteration):       "' + reverse(s) + '"');
    writeln('REVERSED (by recursion):       "' + reverseRecursive(s) + '"');
    writeln('INITIAL CAPITAL ALL WORDS:     "' + initCaps(s) + '"');
    writeln('TITLE CASE:                    "' + toTitleCase(s) + '"');
    writeln('REVERSED THEN INITIAL CAPITAL: "' + initCaps(reverse(s)) + '"');
    writeln('REVERSED THEN TITLE CASE:      "' + toTitleCase(reverse(s)) + '"');
    writeln('CAESAR CIPHER (1 letter):      "' + caesar(s, 1) + '"');
    writeln('CAESAR DECRYPT (1+25 = 26):    "' + caesar(caesar(s, 1), 25) + '"');
    writeln('CAESAR CIPHER (4 letters):     "' + caesar(s, 4) + '"');
    writeln('CAESAR DECRYPT (4+22 = 26):    "' + caesar(caesar(s, 4), 22) + '"');
  }

  void main () {
    // show the output
    output(true, cream, true);
    writeln('Some User-Defined String Functions');
    // process some example strings
    process('CREATING is better than LEARNING');
    process('indeed it\'s the Essence of Life!');
  }
}
